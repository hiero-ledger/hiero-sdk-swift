// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: token_create.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

///*
/// # Token Create
/// Create an Hedera Token Service (HTS) token.
///
/// ### Keywords
/// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
/// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
/// document are to be interpreted as described in
/// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
/// [RFC8174](https://www.ietf.org/rfc/rfc8174).

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
/// Create an HTS token.
///
/// #### Keys
/// Each token has several keys that, separately, control different functions
/// for that token. It is *_strongly_* recommended that each key assigned to
/// a token be unique, or disabled by assigning an empty `KeyList`.
/// Keys and purpose
/// - `adminKey` is a general access and may authorize a token update
///   transaction as well as _update the other keys_. Even the admin key
///   cannot authorize _adding_ a key that is not present, however.<br/>
///   The admin key may also delete the token entirely.
/// - `fee_schedule` may authorize updating the token custom fees. If this
///   key is not present, the custom fees for the token are fixed and immutable.
/// - `freeze` may authorize a token freeze or unfreeze transaction.
///   If this key is not present, accounts holding this token cannot have
///   their tokens frozen or unfrozen.
/// - `kyc` may authorize a token grant KYC or revoke KYC transaction.
///   If this key is not present, accounts holding this token cannot have
///   KYC status granted or revoked.
/// - `metadata` may authorize token update nfts transactions.
///   If this key is not present, the token metadata values for that
///   non-fungible/unique token _type_ will be immutable.
/// - `pause` may authorize a token pause or token unpause transaction.
///   If this key is not present, the token cannot be paused (preventing any
///   account from transacting in that token) or resumed.
/// - `supply` may authorize a token mint or burn transaction.
///   If this key is not present, the token cannot mint additional supply and
///   existing tokens cannot be "burned" from the treasury (but _might_ still be
///   "burned" from individual accounts, c.f. `wipeKey` and `tokenWipe`).
/// - `wipe` may authorize a token wipe account transaction.
///   If this key is not present, accounts holding this token cannot have
///   their balance or NFTs wiped (effectively burned).
///
/// #### Requirements
/// If `tokenType` is fungible/common, the `initialSupply` MUST be strictly
/// greater than zero(`0`).<br/>
/// If `tokenType` is non-fungible/unique, the `initialSupply` MUST
/// be zero(`0`).<br/>
/// If `tokenSupplyType` is "infinite", the `maxSupply` MUST be zero(`0`).<br/>
/// If `tokenSupplyType` is "finite", the `maxSupply` MUST be strictly
/// greater than zero(`0`).<br/>
///
/// ### Block Stream Effects
/// If the token is created, the Token Identifier SHALL be in the receipt.<br/>
public struct Proto_TokenCreateTransactionBody: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// A name for the token.<br/>
  /// This is generally the "full name" displayed in wallet software.
  /// <p>
  /// This field is REQUIRED.<br/>
  /// This value MUST NOT exceed 100 bytes when encoded as UTF-8.<br/>
  /// This value MUST NOT contain the Unicode NUL codepoint.
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  ///*
  /// A symbol to use for the token.
  /// <p>
  /// This field is REQUIRED.<br/>
  /// This value MUST NOT exceed 100 bytes when encoded as UTF-8.<br/>
  /// This value MUST NOT contain the Unicode NUL codepoint.
  public var symbol: String {
    get {return _storage._symbol}
    set {_uniqueStorage()._symbol = newValue}
  }

  ///*
  /// A decimal precision of the token's smallest denomination.<br/>
  /// Most values are described in terms of this smallest denomination,
  /// so the token initial supply, for instance, must be divided by
  /// <tt>10<sup>decimals</sup></tt> to get whole tokens.
  /// <p>
  /// This MUST be zero(`0`) for non-fungible/unique tokens.
  public var decimals: UInt32 {
    get {return _storage._decimals}
    set {_uniqueStorage()._decimals = newValue}
  }

  ///*
  /// An initial supply, in the smallest denomination for the token.
  /// <p>
  /// This amount SHALL be transferred to the treasury account as part
  /// of this transaction.<br/>
  /// This amount MUST be specified in the smallest denomination for the
  /// token (i.e. <tt>10<sup>-decimals</sup></tt> whole tokens).<br/>
  /// This MUST be zero(`0`) for a non-fungible/unique token.
  public var initialSupply: UInt64 {
    get {return _storage._initialSupply}
    set {_uniqueStorage()._initialSupply = newValue}
  }

  ///*
  /// A treasury account identifier.
  /// <p>
  /// This field is REQUIRED.<br/>
  /// The identified account SHALL be designated the "treasury" for the
  /// new token, and all tokens "minted" SHALL be delivered to that account,
  /// including the initial supply, if any.<br/>
  /// The identified account MUST exist, MUST NOT be expired, and SHOULD
  /// have a non-zero HBAR balance.<br/>
  /// The identified account SHALL be associated to the new token.
  public var treasury: Proto_AccountID {
    get {return _storage._treasury ?? Proto_AccountID()}
    set {_uniqueStorage()._treasury = newValue}
  }
  /// Returns true if `treasury` has been explicitly set.
  public var hasTreasury: Bool {return _storage._treasury != nil}
  /// Clears the value of `treasury`. Subsequent reads from it will return its default value.
  public mutating func clearTreasury() {_uniqueStorage()._treasury = nil}

  ///*
  /// An Hedera key for token administration.
  /// <p>
  /// This key, if set, SHALL have administrative authority for this token and
  /// MAY authorize token update and/or token delete transactions.<br/>
  /// If this key is not set, or is an empty `KeyList`, this token SHALL be
  /// immutable, except for expiration and renewal.
  public var adminKey: Proto_Key {
    get {return _storage._adminKey ?? Proto_Key()}
    set {_uniqueStorage()._adminKey = newValue}
  }
  /// Returns true if `adminKey` has been explicitly set.
  public var hasAdminKey: Bool {return _storage._adminKey != nil}
  /// Clears the value of `adminKey`. Subsequent reads from it will return its default value.
  public mutating func clearAdminKey() {_uniqueStorage()._adminKey = nil}

  ///*
  /// An Hedera key for managing account KYC.
  /// <p>
  /// This key, if set, SHALL have KYC authority for this token and
  /// MAY authorize transactions to grant or revoke KYC for accounts.<br/>
  /// If this key is not set, or is an empty `KeyList`, KYC status for this
  /// token SHALL NOT be granted or revoked for any account.<br/>
  /// If this key is removed after granting KYC, those grants SHALL remain
  /// and cannot be revoked.
  public var kycKey: Proto_Key {
    get {return _storage._kycKey ?? Proto_Key()}
    set {_uniqueStorage()._kycKey = newValue}
  }
  /// Returns true if `kycKey` has been explicitly set.
  public var hasKycKey: Bool {return _storage._kycKey != nil}
  /// Clears the value of `kycKey`. Subsequent reads from it will return its default value.
  public mutating func clearKycKey() {_uniqueStorage()._kycKey = nil}

  ///*
  /// An Hedera key for managing asset "freeze".
  /// <p>
  /// This key, if set, SHALL have "freeze" authority for this token and
  /// MAY authorize transactions to freeze or unfreeze accounts
  /// with respect to this token.<br/>
  /// If this key is not set, or is an empty `KeyList`, this token
  /// SHALL NOT be frozen or unfrozen for any account.<br/>
  /// If this key is removed after freezing accounts, those accounts
  /// SHALL remain frozen and cannot be unfrozen.
  public var freezeKey: Proto_Key {
    get {return _storage._freezeKey ?? Proto_Key()}
    set {_uniqueStorage()._freezeKey = newValue}
  }
  /// Returns true if `freezeKey` has been explicitly set.
  public var hasFreezeKey: Bool {return _storage._freezeKey != nil}
  /// Clears the value of `freezeKey`. Subsequent reads from it will return its default value.
  public mutating func clearFreezeKey() {_uniqueStorage()._freezeKey = nil}

  ///*
  /// An Hedera key for wiping tokens from accounts.
  /// <p>
  /// This key, if set, SHALL have "wipe" authority for this token and
  /// MAY authorize transactions to "wipe" any amount of this token from
  /// any account, effectively burning the tokens "wiped".<br/>
  /// If this key is not set, or is an empty `KeyList`, it SHALL NOT be
  /// possible to "wipe" this token from an account.
  public var wipeKey: Proto_Key {
    get {return _storage._wipeKey ?? Proto_Key()}
    set {_uniqueStorage()._wipeKey = newValue}
  }
  /// Returns true if `wipeKey` has been explicitly set.
  public var hasWipeKey: Bool {return _storage._wipeKey != nil}
  /// Clears the value of `wipeKey`. Subsequent reads from it will return its default value.
  public mutating func clearWipeKey() {_uniqueStorage()._wipeKey = nil}

  ///*
  /// An Hedera key for "minting" and "burning" tokens.
  /// <p>
  /// This key, if set, MAY authorize transactions to "mint" new tokens to
  /// be delivered to the token treasury or "burn" tokens held by the
  /// token treasury.<br/>
  /// If this key is not set, or is an empty `KeyList`, it SHALL NOT be
  /// possible to change the supply of tokens and neither "mint" nor "burn"
  /// transactions SHALL be permitted.
  public var supplyKey: Proto_Key {
    get {return _storage._supplyKey ?? Proto_Key()}
    set {_uniqueStorage()._supplyKey = newValue}
  }
  /// Returns true if `supplyKey` has been explicitly set.
  public var hasSupplyKey: Bool {return _storage._supplyKey != nil}
  /// Clears the value of `supplyKey`. Subsequent reads from it will return its default value.
  public mutating func clearSupplyKey() {_uniqueStorage()._supplyKey = nil}

  ///*
  /// An initial Freeze status for accounts associated to this token.
  /// <p>
  /// If this value is set, an account MUST be the subject of a
  /// `tokenUnfreeze` transaction after associating to the token before
  /// that account can send or receive this token.<br/>
  /// If this value is set, the `freezeKey` SHOULD be set.<br/>
  /// If the `freezeKey` is not set, any account associated to this token
  /// while this value is set SHALL be permanently frozen.
  /// <p>
  /// <blockquote>REVIEW NOTE<blockquote>
  /// Should we prevent setting this value true for tokens with no freeze
  /// key?<br/>
  /// Should we set this value to false if a freeze key is removed?
  /// </blockquote></blockquote>
  public var freezeDefault: Bool {
    get {return _storage._freezeDefault}
    set {_uniqueStorage()._freezeDefault = newValue}
  }

  ///*
  /// An expiration timestamp.
  /// <p>
  /// If the `autoRenewAccount` and `autoRenewPeriod` fields are set, this
  /// value SHALL be replaced with the current consensus time extended
  /// by the `autoRenewPeriod` duration.<br/>
  /// If this value is set and token expiration is enabled in network
  /// configuration, this token SHALL expire when consensus time exceeds
  /// this value, and MAY be subsequently removed from the network state.<br/>
  /// If this value is not set, and the automatic renewal account is also not
  /// set, then this value SHALL default to the current consensus time
  /// extended by the "default" expiration period from network configuration.
  public var expiry: Proto_Timestamp {
    get {return _storage._expiry ?? Proto_Timestamp()}
    set {_uniqueStorage()._expiry = newValue}
  }
  /// Returns true if `expiry` has been explicitly set.
  public var hasExpiry: Bool {return _storage._expiry != nil}
  /// Clears the value of `expiry`. Subsequent reads from it will return its default value.
  public mutating func clearExpiry() {_uniqueStorage()._expiry = nil}

  ///*
  /// An identifier for the account to be charged renewal fees at the token's
  /// expiry to extend the lifetime of the token.
  /// <p>
  /// If this value is set, the token lifetime SHALL be extended by the
  /// _smallest_ of the following:
  /// <ul>
  ///   <li>The current `autoRenewPeriod` duration.</li>
  ///   <li>The maximum duration that this account has funds to purchase.</li>
  ///   <li>The configured MAX_AUTORENEW_PERIOD at the time of automatic
  ///       renewal.</li>
  /// </ul>
  /// If this account's HBAR balance is `0` when the token must be
  /// renewed, then the token SHALL be expired, and MAY be subsequently
  /// removed from state.<br/>
  /// If this value is set, the referenced account MUST sign this
  /// transaction.
  public var autoRenewAccount: Proto_AccountID {
    get {return _storage._autoRenewAccount ?? Proto_AccountID()}
    set {_uniqueStorage()._autoRenewAccount = newValue}
  }
  /// Returns true if `autoRenewAccount` has been explicitly set.
  public var hasAutoRenewAccount: Bool {return _storage._autoRenewAccount != nil}
  /// Clears the value of `autoRenewAccount`. Subsequent reads from it will return its default value.
  public mutating func clearAutoRenewAccount() {_uniqueStorage()._autoRenewAccount = nil}

  ///*
  /// A duration between token automatic renewals.<br/>
  /// All entities in state may be charged "rent" occasionally (typically
  /// every 90 days) to prevent unnecessary growth of the ledger. This value
  /// sets the interval between such events for this token.
  /// <p>
  /// This value MUST be set.<br/>
  /// This value MUST be greater than the configured
  /// MIN_AUTORENEW_PERIOD.<br/>
  /// This value MUST be less than the configured MAX_AUTORENEW_PERIOD.
  public var autoRenewPeriod: Proto_Duration {
    get {return _storage._autoRenewPeriod ?? Proto_Duration()}
    set {_uniqueStorage()._autoRenewPeriod = newValue}
  }
  /// Returns true if `autoRenewPeriod` has been explicitly set.
  public var hasAutoRenewPeriod: Bool {return _storage._autoRenewPeriod != nil}
  /// Clears the value of `autoRenewPeriod`. Subsequent reads from it will return its default value.
  public mutating func clearAutoRenewPeriod() {_uniqueStorage()._autoRenewPeriod = nil}

  ///*
  /// A short description for this token.
  /// <p>
  /// This value, if set, MUST NOT exceed `transaction.maxMemoUtf8Bytes`
  /// (default 100) bytes when encoded as UTF-8.
  public var memo: String {
    get {return _storage._memo}
    set {_uniqueStorage()._memo = newValue}
  }

  ///*
  /// A type for this token, according to IWA classification.
  /// <p>
  /// If this value is not set, the token SHALL have the default type of
  /// fungible/common.<br/>
  /// This field SHALL be immutable.
  public var tokenType: Proto_TokenType {
    get {return _storage._tokenType}
    set {_uniqueStorage()._tokenType = newValue}
  }

  ///*
  /// A supply type for this token, according to IWA classification.
  /// <p>
  /// If this value is not set, the token SHALL have the default supply
  /// type of "infinite" (which is, as a practical matter,
  /// (2<sup><i>63</i></sup>-1)/10<sup><i>decimals</i></sup>).<br/>
  /// This field SHALL be immutable.
  public var supplyType: Proto_TokenSupplyType {
    get {return _storage._supplyType}
    set {_uniqueStorage()._supplyType = newValue}
  }

  ///*
  /// A maximum supply for this token.
  /// <p>
  /// This SHALL be interpreted in terms of the smallest fractional unit for
  /// this token.<br/>
  /// If `supplyType` is "infinite", this MUST be `0`.<br/>
  /// This field SHALL be immutable.
  public var maxSupply: Int64 {
    get {return _storage._maxSupply}
    set {_uniqueStorage()._maxSupply = newValue}
  }

  ///*
  /// An Hedera key for managing the token custom fee schedule.
  /// <p>
  /// This key, if set, MAY authorize transactions to modify the
  /// `custom_fees` for this token.<br/>
  /// If this key is not set, or is an empty `KeyList`, the `custom_fees`
  /// for this token SHALL NOT be modified.
  public var feeScheduleKey: Proto_Key {
    get {return _storage._feeScheduleKey ?? Proto_Key()}
    set {_uniqueStorage()._feeScheduleKey = newValue}
  }
  /// Returns true if `feeScheduleKey` has been explicitly set.
  public var hasFeeScheduleKey: Bool {return _storage._feeScheduleKey != nil}
  /// Clears the value of `feeScheduleKey`. Subsequent reads from it will return its default value.
  public mutating func clearFeeScheduleKey() {_uniqueStorage()._feeScheduleKey = nil}

  ///*
  /// A list of custom fees representing a fee schedule.
  /// <p>
  /// This list MAY be empty, which SHALL mean that there
  /// are no custom fees for this token.<br/>
  /// If this token is a non-fungible/unique type, the entries
  /// in this list MUST NOT declare a `fractional_fee`.<br/>
  /// If this token is a fungible/common type, the entries in this
  /// list MUST NOT declare a `royalty_fee`.<br/>
  /// Any token type MAY include entries that declare a `fixed_fee`.
  public var customFees: [Proto_CustomFee] {
    get {return _storage._customFees}
    set {_uniqueStorage()._customFees = newValue}
  }

  ///*
  /// An Hedera key for managing token "pause".
  /// <p>
  /// This key, if set, SHALL have "pause" authority for this token and
  /// MAY authorize transactions to pause or unpause this token.<br/>
  /// If this key is not set, or is an empty `KeyList`, this token
  /// SHALL NOT be paused or unpaused.<br/>
  /// If this key is removed while the token is paused, the token cannot
  /// be unpaused and SHALL remain paused.
  public var pauseKey: Proto_Key {
    get {return _storage._pauseKey ?? Proto_Key()}
    set {_uniqueStorage()._pauseKey = newValue}
  }
  /// Returns true if `pauseKey` has been explicitly set.
  public var hasPauseKey: Bool {return _storage._pauseKey != nil}
  /// Clears the value of `pauseKey`. Subsequent reads from it will return its default value.
  public mutating func clearPauseKey() {_uniqueStorage()._pauseKey = nil}

  ///*
  /// Token "Metadata".
  /// <p>
  /// The value, if set, MUST NOT exceed 100 bytes.<br/>
  /// <dl><dt>Examples</dt>
  ///   <dd>hcs://1/0.0.4896575</dd>
  ///   <dd>ipfs://bafkreifd7tcjjuwxxf4qkaibkj62pj4mhfuud7plwrc3pfoygt55al6syi</dd>
  /// </dl>
  public var metadata: Data {
    get {return _storage._metadata}
    set {_uniqueStorage()._metadata = newValue}
  }

  ///*
  /// An Hedera key for managing the token `metadata`.
  /// <p>
  /// This key, if set, MAY authorize transactions to modify the
  /// `metadata` for this token.<br/>
  /// If this key is not set, or is an empty `KeyList`, the `metadata`
  /// for this token SHALL NOT be modified.
  public var metadataKey: Proto_Key {
    get {return _storage._metadataKey ?? Proto_Key()}
    set {_uniqueStorage()._metadataKey = newValue}
  }
  /// Returns true if `metadataKey` has been explicitly set.
  public var hasMetadataKey: Bool {return _storage._metadataKey != nil}
  /// Clears the value of `metadataKey`. Subsequent reads from it will return its default value.
  public mutating func clearMetadataKey() {_uniqueStorage()._metadataKey = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "proto"

extension Proto_TokenCreateTransactionBody: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TokenCreateTransactionBody"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "symbol"),
    3: .same(proto: "decimals"),
    4: .same(proto: "initialSupply"),
    5: .same(proto: "treasury"),
    6: .same(proto: "adminKey"),
    7: .same(proto: "kycKey"),
    8: .same(proto: "freezeKey"),
    9: .same(proto: "wipeKey"),
    10: .same(proto: "supplyKey"),
    11: .same(proto: "freezeDefault"),
    13: .same(proto: "expiry"),
    14: .same(proto: "autoRenewAccount"),
    15: .same(proto: "autoRenewPeriod"),
    16: .same(proto: "memo"),
    17: .same(proto: "tokenType"),
    18: .same(proto: "supplyType"),
    19: .same(proto: "maxSupply"),
    20: .standard(proto: "fee_schedule_key"),
    21: .standard(proto: "custom_fees"),
    22: .standard(proto: "pause_key"),
    23: .same(proto: "metadata"),
    24: .standard(proto: "metadata_key"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _symbol: String = String()
    var _decimals: UInt32 = 0
    var _initialSupply: UInt64 = 0
    var _treasury: Proto_AccountID? = nil
    var _adminKey: Proto_Key? = nil
    var _kycKey: Proto_Key? = nil
    var _freezeKey: Proto_Key? = nil
    var _wipeKey: Proto_Key? = nil
    var _supplyKey: Proto_Key? = nil
    var _freezeDefault: Bool = false
    var _expiry: Proto_Timestamp? = nil
    var _autoRenewAccount: Proto_AccountID? = nil
    var _autoRenewPeriod: Proto_Duration? = nil
    var _memo: String = String()
    var _tokenType: Proto_TokenType = .fungibleCommon
    var _supplyType: Proto_TokenSupplyType = .infinite
    var _maxSupply: Int64 = 0
    var _feeScheduleKey: Proto_Key? = nil
    var _customFees: [Proto_CustomFee] = []
    var _pauseKey: Proto_Key? = nil
    var _metadata: Data = Data()
    var _metadataKey: Proto_Key? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _symbol = source._symbol
      _decimals = source._decimals
      _initialSupply = source._initialSupply
      _treasury = source._treasury
      _adminKey = source._adminKey
      _kycKey = source._kycKey
      _freezeKey = source._freezeKey
      _wipeKey = source._wipeKey
      _supplyKey = source._supplyKey
      _freezeDefault = source._freezeDefault
      _expiry = source._expiry
      _autoRenewAccount = source._autoRenewAccount
      _autoRenewPeriod = source._autoRenewPeriod
      _memo = source._memo
      _tokenType = source._tokenType
      _supplyType = source._supplyType
      _maxSupply = source._maxSupply
      _feeScheduleKey = source._feeScheduleKey
      _customFees = source._customFees
      _pauseKey = source._pauseKey
      _metadata = source._metadata
      _metadataKey = source._metadataKey
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._symbol) }()
        case 3: try { try decoder.decodeSingularUInt32Field(value: &_storage._decimals) }()
        case 4: try { try decoder.decodeSingularUInt64Field(value: &_storage._initialSupply) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._treasury) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._adminKey) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._kycKey) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._freezeKey) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._wipeKey) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._supplyKey) }()
        case 11: try { try decoder.decodeSingularBoolField(value: &_storage._freezeDefault) }()
        case 13: try { try decoder.decodeSingularMessageField(value: &_storage._expiry) }()
        case 14: try { try decoder.decodeSingularMessageField(value: &_storage._autoRenewAccount) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._autoRenewPeriod) }()
        case 16: try { try decoder.decodeSingularStringField(value: &_storage._memo) }()
        case 17: try { try decoder.decodeSingularEnumField(value: &_storage._tokenType) }()
        case 18: try { try decoder.decodeSingularEnumField(value: &_storage._supplyType) }()
        case 19: try { try decoder.decodeSingularInt64Field(value: &_storage._maxSupply) }()
        case 20: try { try decoder.decodeSingularMessageField(value: &_storage._feeScheduleKey) }()
        case 21: try { try decoder.decodeRepeatedMessageField(value: &_storage._customFees) }()
        case 22: try { try decoder.decodeSingularMessageField(value: &_storage._pauseKey) }()
        case 23: try { try decoder.decodeSingularBytesField(value: &_storage._metadata) }()
        case 24: try { try decoder.decodeSingularMessageField(value: &_storage._metadataKey) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if !_storage._symbol.isEmpty {
        try visitor.visitSingularStringField(value: _storage._symbol, fieldNumber: 2)
      }
      if _storage._decimals != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._decimals, fieldNumber: 3)
      }
      if _storage._initialSupply != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._initialSupply, fieldNumber: 4)
      }
      try { if let v = _storage._treasury {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._adminKey {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._kycKey {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._freezeKey {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._wipeKey {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._supplyKey {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      if _storage._freezeDefault != false {
        try visitor.visitSingularBoolField(value: _storage._freezeDefault, fieldNumber: 11)
      }
      try { if let v = _storage._expiry {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._autoRenewAccount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._autoRenewPeriod {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      } }()
      if !_storage._memo.isEmpty {
        try visitor.visitSingularStringField(value: _storage._memo, fieldNumber: 16)
      }
      if _storage._tokenType != .fungibleCommon {
        try visitor.visitSingularEnumField(value: _storage._tokenType, fieldNumber: 17)
      }
      if _storage._supplyType != .infinite {
        try visitor.visitSingularEnumField(value: _storage._supplyType, fieldNumber: 18)
      }
      if _storage._maxSupply != 0 {
        try visitor.visitSingularInt64Field(value: _storage._maxSupply, fieldNumber: 19)
      }
      try { if let v = _storage._feeScheduleKey {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      } }()
      if !_storage._customFees.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._customFees, fieldNumber: 21)
      }
      try { if let v = _storage._pauseKey {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
      } }()
      if !_storage._metadata.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._metadata, fieldNumber: 23)
      }
      try { if let v = _storage._metadataKey {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 24)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_TokenCreateTransactionBody, rhs: Proto_TokenCreateTransactionBody) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._name != rhs_storage._name {return false}
        if _storage._symbol != rhs_storage._symbol {return false}
        if _storage._decimals != rhs_storage._decimals {return false}
        if _storage._initialSupply != rhs_storage._initialSupply {return false}
        if _storage._treasury != rhs_storage._treasury {return false}
        if _storage._adminKey != rhs_storage._adminKey {return false}
        if _storage._kycKey != rhs_storage._kycKey {return false}
        if _storage._freezeKey != rhs_storage._freezeKey {return false}
        if _storage._wipeKey != rhs_storage._wipeKey {return false}
        if _storage._supplyKey != rhs_storage._supplyKey {return false}
        if _storage._freezeDefault != rhs_storage._freezeDefault {return false}
        if _storage._expiry != rhs_storage._expiry {return false}
        if _storage._autoRenewAccount != rhs_storage._autoRenewAccount {return false}
        if _storage._autoRenewPeriod != rhs_storage._autoRenewPeriod {return false}
        if _storage._memo != rhs_storage._memo {return false}
        if _storage._tokenType != rhs_storage._tokenType {return false}
        if _storage._supplyType != rhs_storage._supplyType {return false}
        if _storage._maxSupply != rhs_storage._maxSupply {return false}
        if _storage._feeScheduleKey != rhs_storage._feeScheduleKey {return false}
        if _storage._customFees != rhs_storage._customFees {return false}
        if _storage._pauseKey != rhs_storage._pauseKey {return false}
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._metadataKey != rhs_storage._metadataKey {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
