//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: mirror/mirror_network_service.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


///*
/// Provides cross network APIs like address book queries
///
/// Usage: instantiate `Com_Hedera_Mirror_Api_Proto_NetworkServiceClient`, then call methods of this protocol to make API calls.
public protocol Com_Hedera_Mirror_Api_Proto_NetworkServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Com_Hedera_Mirror_Api_Proto_NetworkServiceClientInterceptorFactoryProtocol? { get }

  func getNodes(
    _ request: Com_Hedera_Mirror_Api_Proto_AddressBookQuery,
    callOptions: CallOptions?,
    handler: @escaping (Proto_NodeAddress) -> Void
  ) -> ServerStreamingCall<Com_Hedera_Mirror_Api_Proto_AddressBookQuery, Proto_NodeAddress>
}

extension Com_Hedera_Mirror_Api_Proto_NetworkServiceClientProtocol {
  public var serviceName: String {
    return "com.hedera.mirror.api.proto.NetworkService"
  }

  ///
  /// Query for an address book and return its nodes. The nodes are returned in ascending order by node ID. The
  /// response is not guaranteed to be a byte-for-byte equivalent to the NodeAddress in the Hedera file on
  /// the network since it is reconstructed from a normalized database table.
  ///
  /// - Parameters:
  ///   - request: Request to send to getNodes.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func getNodes(
    _ request: Com_Hedera_Mirror_Api_Proto_AddressBookQuery,
    callOptions: CallOptions? = nil,
    handler: @escaping (Proto_NodeAddress) -> Void
  ) -> ServerStreamingCall<Com_Hedera_Mirror_Api_Proto_AddressBookQuery, Proto_NodeAddress> {
    return self.makeServerStreamingCall(
      path: Com_Hedera_Mirror_Api_Proto_NetworkServiceClientMetadata.Methods.getNodes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetNodesInterceptors() ?? [],
      handler: handler
    )
  }
}

@available(*, deprecated)
extension Com_Hedera_Mirror_Api_Proto_NetworkServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Com_Hedera_Mirror_Api_Proto_NetworkServiceNIOClient")
public final class Com_Hedera_Mirror_Api_Proto_NetworkServiceClient: Com_Hedera_Mirror_Api_Proto_NetworkServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Com_Hedera_Mirror_Api_Proto_NetworkServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Com_Hedera_Mirror_Api_Proto_NetworkServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the com.hedera.mirror.api.proto.NetworkService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Com_Hedera_Mirror_Api_Proto_NetworkServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Com_Hedera_Mirror_Api_Proto_NetworkServiceNIOClient: Com_Hedera_Mirror_Api_Proto_NetworkServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Com_Hedera_Mirror_Api_Proto_NetworkServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the com.hedera.mirror.api.proto.NetworkService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Com_Hedera_Mirror_Api_Proto_NetworkServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

///*
/// Provides cross network APIs like address book queries
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Com_Hedera_Mirror_Api_Proto_NetworkServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Com_Hedera_Mirror_Api_Proto_NetworkServiceClientInterceptorFactoryProtocol? { get }

  func makeGetNodesCall(
    _ request: Com_Hedera_Mirror_Api_Proto_AddressBookQuery,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Com_Hedera_Mirror_Api_Proto_AddressBookQuery, Proto_NodeAddress>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Com_Hedera_Mirror_Api_Proto_NetworkServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Com_Hedera_Mirror_Api_Proto_NetworkServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: Com_Hedera_Mirror_Api_Proto_NetworkServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeGetNodesCall(
    _ request: Com_Hedera_Mirror_Api_Proto_AddressBookQuery,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Com_Hedera_Mirror_Api_Proto_AddressBookQuery, Proto_NodeAddress> {
    return self.makeAsyncServerStreamingCall(
      path: Com_Hedera_Mirror_Api_Proto_NetworkServiceClientMetadata.Methods.getNodes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetNodesInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Com_Hedera_Mirror_Api_Proto_NetworkServiceAsyncClientProtocol {
  public func getNodes(
    _ request: Com_Hedera_Mirror_Api_Proto_AddressBookQuery,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Proto_NodeAddress> {
    return self.performAsyncServerStreamingCall(
      path: Com_Hedera_Mirror_Api_Proto_NetworkServiceClientMetadata.Methods.getNodes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetNodesInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Com_Hedera_Mirror_Api_Proto_NetworkServiceAsyncClient: Com_Hedera_Mirror_Api_Proto_NetworkServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Com_Hedera_Mirror_Api_Proto_NetworkServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Com_Hedera_Mirror_Api_Proto_NetworkServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Com_Hedera_Mirror_Api_Proto_NetworkServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'getNodes'.
  func makegetNodesInterceptors() -> [ClientInterceptor<Com_Hedera_Mirror_Api_Proto_AddressBookQuery, Proto_NodeAddress>]
}

public enum Com_Hedera_Mirror_Api_Proto_NetworkServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "NetworkService",
    fullName: "com.hedera.mirror.api.proto.NetworkService",
    methods: [
      Com_Hedera_Mirror_Api_Proto_NetworkServiceClientMetadata.Methods.getNodes,
    ]
  )

  public enum Methods {
    public static let getNodes = GRPCMethodDescriptor(
      name: "getNodes",
      path: "/com.hedera.mirror.api.proto.NetworkService/getNodes",
      type: GRPCCallType.serverStreaming
    )
  }
}

///*
/// Provides cross network APIs like address book queries
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Com_Hedera_Mirror_Api_Proto_NetworkServiceProvider: CallHandlerProvider {
  var interceptors: Com_Hedera_Mirror_Api_Proto_NetworkServiceServerInterceptorFactoryProtocol? { get }

  ///
  /// Query for an address book and return its nodes. The nodes are returned in ascending order by node ID. The
  /// response is not guaranteed to be a byte-for-byte equivalent to the NodeAddress in the Hedera file on
  /// the network since it is reconstructed from a normalized database table.
  func getNodes(request: Com_Hedera_Mirror_Api_Proto_AddressBookQuery, context: StreamingResponseCallContext<Proto_NodeAddress>) -> EventLoopFuture<GRPCStatus>
}

extension Com_Hedera_Mirror_Api_Proto_NetworkServiceProvider {
  public var serviceName: Substring {
    return Com_Hedera_Mirror_Api_Proto_NetworkServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "getNodes":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Com_Hedera_Mirror_Api_Proto_AddressBookQuery>(),
        responseSerializer: ProtobufSerializer<Proto_NodeAddress>(),
        interceptors: self.interceptors?.makegetNodesInterceptors() ?? [],
        userFunction: self.getNodes(request:context:)
      )

    default:
      return nil
    }
  }
}

///*
/// Provides cross network APIs like address book queries
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Com_Hedera_Mirror_Api_Proto_NetworkServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Com_Hedera_Mirror_Api_Proto_NetworkServiceServerInterceptorFactoryProtocol? { get }

  ///
  /// Query for an address book and return its nodes. The nodes are returned in ascending order by node ID. The
  /// response is not guaranteed to be a byte-for-byte equivalent to the NodeAddress in the Hedera file on
  /// the network since it is reconstructed from a normalized database table.
  func getNodes(
    request: Com_Hedera_Mirror_Api_Proto_AddressBookQuery,
    responseStream: GRPCAsyncResponseStreamWriter<Proto_NodeAddress>,
    context: GRPCAsyncServerCallContext
  ) async throws
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Com_Hedera_Mirror_Api_Proto_NetworkServiceAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Com_Hedera_Mirror_Api_Proto_NetworkServiceServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Com_Hedera_Mirror_Api_Proto_NetworkServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Com_Hedera_Mirror_Api_Proto_NetworkServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "getNodes":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Com_Hedera_Mirror_Api_Proto_AddressBookQuery>(),
        responseSerializer: ProtobufSerializer<Proto_NodeAddress>(),
        interceptors: self.interceptors?.makegetNodesInterceptors() ?? [],
        wrapping: { try await self.getNodes(request: $0, responseStream: $1, context: $2) }
      )

    default:
      return nil
    }
  }
}

public protocol Com_Hedera_Mirror_Api_Proto_NetworkServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'getNodes'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makegetNodesInterceptors() -> [ServerInterceptor<Com_Hedera_Mirror_Api_Proto_AddressBookQuery, Proto_NodeAddress>]
}

public enum Com_Hedera_Mirror_Api_Proto_NetworkServiceServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "NetworkService",
    fullName: "com.hedera.mirror.api.proto.NetworkService",
    methods: [
      Com_Hedera_Mirror_Api_Proto_NetworkServiceServerMetadata.Methods.getNodes,
    ]
  )

  public enum Methods {
    public static let getNodes = GRPCMethodDescriptor(
      name: "getNodes",
      path: "/com.hedera.mirror.api.proto.NetworkService/getNodes",
      type: GRPCCallType.serverStreaming
    )
  }
}
