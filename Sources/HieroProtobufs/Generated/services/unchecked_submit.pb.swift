// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: services/unchecked_submit.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

///*
/// # Unchecked Submit
/// Submit a transaction to the network, bypassing all but the most minimal
/// validation.
///
/// > Important
/// >> This transaction is obsolete and not supported.<br/>
/// >> Any transaction of this type that is submitted SHALL fail with a
/// >> `PRE_CHECK` result of `NOT_SUPPORTED`.
///
/// ### Keywords
/// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
/// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
/// document are to be interpreted as described in
/// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
/// [RFC8174](https://www.ietf.org/rfc/rfc8174).

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
/// Submit an arbitrary (serialized) Transaction to the network
/// without pre-check.
///
/// This transaction SHALL require `superuser` privileges
/// (e.g. the `treasury` or `systemAdmin` accounts).
///
/// NOTE: This message was marked as deprecated in the .proto file.
public struct Proto_UncheckedSubmitBody: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// The serialized bytes of a `Transaction`.
  /// <p>
  /// This transaction SHALL be deserialized and submitted for consensus
  /// with no further validation.<br/>
  /// Specifically, the transaction may violate basic limits and
  /// constraints such as size limits, minimum or maximum values,
  /// valid start time, fee calculations, etc...
  public var transactionBytes: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "proto"

extension Proto_UncheckedSubmitBody: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UncheckedSubmitBody"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "transactionBytes"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.transactionBytes) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.transactionBytes.isEmpty {
      try visitor.visitSingularBytesField(value: self.transactionBytes, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_UncheckedSubmitBody, rhs: Proto_UncheckedSubmitBody) -> Bool {
    if lhs.transactionBytes != rhs.transactionBytes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
