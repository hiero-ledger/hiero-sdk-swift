///*
/// # Smart Contract Service
/// gRPC service definitions for calls to the Hedera EVM-compatible
/// Smart Contract service.
///
/// ### Keywords
/// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
/// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
/// document are to be interpreted as described in
/// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
/// [RFC8174](https://www.ietf.org/rfc/rfc8174).

// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: services/smart_contract_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf

// MARK: - proto.SmartContractService

/// Namespace containing generated types for the "proto.SmartContractService" service.
public enum Proto_SmartContractService {
    /// Service descriptor for the "proto.SmartContractService" service.
    public static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.SmartContractService")
    /// Namespace for method metadata.
    public enum Method {
        /// Namespace for "createContract" metadata.
        public enum createContract {
            /// Request type for "createContract".
            public typealias Input = Proto_Transaction
            /// Response type for "createContract".
            public typealias Output = Proto_TransactionResponse
            /// Descriptor for "createContract".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.SmartContractService"),
                method: "createContract"
            )
        }
        /// Namespace for "updateContract" metadata.
        public enum updateContract {
            /// Request type for "updateContract".
            public typealias Input = Proto_Transaction
            /// Response type for "updateContract".
            public typealias Output = Proto_TransactionResponse
            /// Descriptor for "updateContract".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.SmartContractService"),
                method: "updateContract"
            )
        }
        /// Namespace for "contractCallMethod" metadata.
        public enum contractCallMethod {
            /// Request type for "contractCallMethod".
            public typealias Input = Proto_Transaction
            /// Response type for "contractCallMethod".
            public typealias Output = Proto_TransactionResponse
            /// Descriptor for "contractCallMethod".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.SmartContractService"),
                method: "contractCallMethod"
            )
        }
        /// Namespace for "contractCallLocalMethod" metadata.
        public enum contractCallLocalMethod {
            /// Request type for "contractCallLocalMethod".
            public typealias Input = Proto_Query
            /// Response type for "contractCallLocalMethod".
            public typealias Output = Proto_Response
            /// Descriptor for "contractCallLocalMethod".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.SmartContractService"),
                method: "contractCallLocalMethod"
            )
        }
        /// Namespace for "getContractInfo" metadata.
        public enum getContractInfo {
            /// Request type for "getContractInfo".
            public typealias Input = Proto_Query
            /// Response type for "getContractInfo".
            public typealias Output = Proto_Response
            /// Descriptor for "getContractInfo".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.SmartContractService"),
                method: "getContractInfo"
            )
        }
        /// Namespace for "ContractGetBytecode" metadata.
        public enum ContractGetBytecode {
            /// Request type for "ContractGetBytecode".
            public typealias Input = Proto_Query
            /// Response type for "ContractGetBytecode".
            public typealias Output = Proto_Response
            /// Descriptor for "ContractGetBytecode".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.SmartContractService"),
                method: "ContractGetBytecode"
            )
        }
        /// Namespace for "getBySolidityID" metadata.
        public enum getBySolidityID {
            /// Request type for "getBySolidityID".
            public typealias Input = Proto_Query
            /// Response type for "getBySolidityID".
            public typealias Output = Proto_Response
            /// Descriptor for "getBySolidityID".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.SmartContractService"),
                method: "getBySolidityID"
            )
        }
        /// Namespace for "getTxRecordByContractID" metadata.
        public enum getTxRecordByContractID {
            /// Request type for "getTxRecordByContractID".
            public typealias Input = Proto_Query
            /// Response type for "getTxRecordByContractID".
            public typealias Output = Proto_Response
            /// Descriptor for "getTxRecordByContractID".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.SmartContractService"),
                method: "getTxRecordByContractID"
            )
        }
        /// Namespace for "deleteContract" metadata.
        public enum deleteContract {
            /// Request type for "deleteContract".
            public typealias Input = Proto_Transaction
            /// Response type for "deleteContract".
            public typealias Output = Proto_TransactionResponse
            /// Descriptor for "deleteContract".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.SmartContractService"),
                method: "deleteContract"
            )
        }
        /// Namespace for "systemDelete" metadata.
        public enum systemDelete {
            /// Request type for "systemDelete".
            public typealias Input = Proto_Transaction
            /// Response type for "systemDelete".
            public typealias Output = Proto_TransactionResponse
            /// Descriptor for "systemDelete".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.SmartContractService"),
                method: "systemDelete"
            )
        }
        /// Namespace for "systemUndelete" metadata.
        public enum systemUndelete {
            /// Request type for "systemUndelete".
            public typealias Input = Proto_Transaction
            /// Response type for "systemUndelete".
            public typealias Output = Proto_TransactionResponse
            /// Descriptor for "systemUndelete".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.SmartContractService"),
                method: "systemUndelete"
            )
        }
        /// Namespace for "callEthereum" metadata.
        public enum callEthereum {
            /// Request type for "callEthereum".
            public typealias Input = Proto_Transaction
            /// Response type for "callEthereum".
            public typealias Output = Proto_TransactionResponse
            /// Descriptor for "callEthereum".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.SmartContractService"),
                method: "callEthereum"
            )
        }
        /// Descriptors for all methods in the "proto.SmartContractService" service.
        public static let descriptors: [GRPCCore.MethodDescriptor] = [
            createContract.descriptor,
            updateContract.descriptor,
            contractCallMethod.descriptor,
            contractCallLocalMethod.descriptor,
            getContractInfo.descriptor,
            ContractGetBytecode.descriptor,
            getBySolidityID.descriptor,
            getTxRecordByContractID.descriptor,
            deleteContract.descriptor,
            systemDelete.descriptor,
            systemUndelete.descriptor,
            callEthereum.descriptor
        ]
    }
}

extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "proto.SmartContractService" service.
    public static let proto_SmartContractService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.SmartContractService")
}

// MARK: proto.SmartContractService (server)

extension Proto_SmartContractService {
    /// Streaming variant of the service protocol for the "proto.SmartContractService" service.
    ///
    /// This protocol is the lowest-level of the service protocols generated for this service
    /// giving you the most flexibility over the implementation of your service. This comes at
    /// the cost of more verbose and less strict APIs. Each RPC requires you to implement it in
    /// terms of a request stream and response stream. Where only a single request or response
    /// message is expected, you are responsible for enforcing this invariant is maintained.
    ///
    /// Where possible, prefer using the stricter, less-verbose ``ServiceProtocol``
    /// or ``SimpleServiceProtocol`` instead.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > The Hedera Smart Contract Service (HSCS) provides an interface to an EVM
    /// > compatible environment to create, store, manage, and execute smart contract
    /// > calls. Smart Contracts implement useful and often highly complex
    /// > interactions between individuals, systems, and the distributed ledger.
    public protocol StreamingServiceProtocol: GRPCCore.RegistrableRPCService {
        /// Handle the "createContract" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Create a new smart contract.
        /// > <p>
        /// > If this transaction succeeds, the `ContractID` for the new smart
        /// > contract SHALL be set in the transaction receipt.<br/>
        /// > The contract is defined by the initial bytecode (or `initcode`).
        /// > The `initcode` SHALL be provided either in a previously created file,
        /// > or in the transaction body itself for very small contracts.<br/>
        /// > As part of contract creation, the constructor defined for the new
        /// > smart contract SHALL run with the parameters provided in
        /// > the `constructorParameters` field.<br/>
        /// > The gas to "power" that constructor MUST be provided via the `gas`
        /// > field, and SHALL be charged to the payer for this transaction.<br/>
        /// > If the contract _constructor_ stores information, it is charged gas for
        /// > that storage. There is a separate fee in HBAR to maintain that storage
        /// > until the expiration, and that fee SHALL be added to this transaction
        /// > as part of the _transaction fee_, rather than gas.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Transaction` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_TransactionResponse` messages.
        func createContract(
            request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse>

        /// Handle the "updateContract" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Modify a smart contract.<br/>
        /// > Any change other than updating the expiration time requires that the
        /// > contract be modifiable (has a valid `adminKey`) and that the
        /// > transaction be signed by the `adminKey`
        /// > <p>
        /// > Fields _not set_ on the request SHALL NOT be modified.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Transaction` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_TransactionResponse` messages.
        func updateContract(
            request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse>

        /// Handle the "contractCallMethod" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Call a function of a given smart contract, providing function parameter
        /// > inputs as needed.
        /// > <p>
        /// > Resource ("gas") charges SHALL include all relevant fees incurred by
        /// > the contract execution, including any storage required.<br/>
        /// > The total transaction fee SHALL incorporate all of the "gas" actually
        /// > consumed as well as the standard fees for transaction handling,
        /// > data transfers, signature verification, etc...
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Transaction` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_TransactionResponse` messages.
        func contractCallMethod(
            request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse>

        /// Handle the "contractCallLocalMethod" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Call a query function of a given smart contract, providing
        /// > function parameter inputs as needed.<br/>
        /// > This is performed locally on the particular node that the client is
        /// > communicating with. Executing the call locally is faster and less
        /// > costly, but imposes certain restrictions.
        /// > <p>
        /// > The call MUST NOT change the state of the contract instance. This also
        /// > precludes any expenditure or transfer of HBAR or other tokens.<br/>
        /// > The call SHALL NOT have a separate consensus timestamp.<br/>
        /// > The call SHALL NOT generate a record nor a receipt.<br/>
        /// > The response SHALL contain the output returned by the function call.<br/>
        /// > <p>
        /// > This is generally useful for calling accessor functions which read
        /// > (query) state without changes or side effects. Any contract call that
        /// > would use the `STATICCALL` opcode MAY be called via contract call local
        /// > with performance and cost benefits.
        /// > <p>
        /// > Unlike a ContractCall transaction, the node SHALL always consume the
        /// > _entire_ amount of offered "gas" in determining the fee for this query,
        /// > so accurate gas estimation is important.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Query` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_Response` messages.
        func contractCallLocalMethod(
            request: GRPCCore.StreamingServerRequest<Proto_Query>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_Response>

        /// Handle the "getContractInfo" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > A standard query to obtain detailed information for a smart contract.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Query` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_Response` messages.
        func getContractInfo(
            request: GRPCCore.StreamingServerRequest<Proto_Query>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_Response>

        /// Handle the "ContractGetBytecode" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > A standard query to read the current bytecode for a smart contract.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Query` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_Response` messages.
        func contractGetBytecode(
            request: GRPCCore.StreamingServerRequest<Proto_Query>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_Response>

        /// Handle the "getBySolidityID" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > A standard query to obtain account and contract identifiers for a smart
        /// > contract, given the Solidity identifier for that contract.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Query` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_Response` messages.
        func getBySolidityID(
            request: GRPCCore.StreamingServerRequest<Proto_Query>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_Response>

        /// Handle the "getTxRecordByContractID" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > <blockquote>This query is no longer supported.</blockquote>
        /// > This query always returned an empty record list.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Query` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_Response` messages.
        func getTxRecordByContractID(
            request: GRPCCore.StreamingServerRequest<Proto_Query>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_Response>

        /// Handle the "deleteContract" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Delete a smart contract, and transfer any remaining HBAR balance
        /// > to a designated account.
        /// > <p>
        /// > If this call succeeds then all subsequent calls to that smart
        /// > contract SHALL fail.<br/>
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Transaction` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_TransactionResponse` messages.
        func deleteContract(
            request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse>

        /// Handle the "systemDelete" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Delete a smart contract, as a system-initiated deletion, this
        /// > SHALL NOT transfer balances.
        /// > <blockquote>
        /// > This call is an administrative function of the Hedera network, and
        /// > SHALL require network administration authorization.<br/>
        /// > This transaction MUST be signed by one of the network administration
        /// > accounts (typically `0.0.2` through `0.0.59`, as defined in the
        /// > `api-permission.properties` file).
        /// > </blockquote>
        /// > If this call succeeds then all subsequent calls to that smart
        /// > contract SHALL fail.<br/>
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Transaction` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_TransactionResponse` messages.
        func systemDelete(
            request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse>

        /// Handle the "systemUndelete" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Un-Delete a smart contract, returning it (mostly) to its state
        /// > prior to deletion.
        /// > <p>
        /// > The contract to be restored MUST have been deleted via `systemDelete`.
        /// > If the contract was deleted via `deleteContract`, it
        /// > SHALL NOT be recoverable.
        /// > <blockquote>
        /// > This call is an administrative function of the Hedera network, and
        /// > SHALL require network administration authorization.<br/>
        /// > This transaction MUST be signed by one of the network administration
        /// > accounts (typically `0.0.2` through `0.0.59`, as defined in the
        /// > `api-permission.properties` file).
        /// > </blockquote>
        /// > If this call succeeds then subsequent calls to that smart
        /// > contract MAY succeed.<br/>
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Transaction` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_TransactionResponse` messages.
        func systemUndelete(
            request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse>

        /// Handle the "callEthereum" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Make an Ethereum transaction "call" with all data in Ethereum formats,
        /// > including the contract alias.
        /// > <p>
        /// > Call data MAY be in the transaction, or stored within a "File".<br/>
        /// > The caller MAY offer additional gas above what is offered in the call
        /// > data, but MAY be charged up to 80% of that value if the amount required
        /// > is less than this "floor" amount.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Transaction` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_TransactionResponse` messages.
        func callEthereum(
            request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse>
    }

    /// Service protocol for the "proto.SmartContractService" service.
    ///
    /// This protocol is higher level than ``StreamingServiceProtocol`` but lower level than
    /// the ``SimpleServiceProtocol``, it provides access to request and response metadata and
    /// trailing response metadata. If you don't need these then consider using
    /// the ``SimpleServiceProtocol``. If you need fine grained control over your RPCs then
    /// use ``StreamingServiceProtocol``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > The Hedera Smart Contract Service (HSCS) provides an interface to an EVM
    /// > compatible environment to create, store, manage, and execute smart contract
    /// > calls. Smart Contracts implement useful and often highly complex
    /// > interactions between individuals, systems, and the distributed ledger.
    public protocol ServiceProtocol: Proto_SmartContractService.StreamingServiceProtocol {
        /// Handle the "createContract" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Create a new smart contract.
        /// > <p>
        /// > If this transaction succeeds, the `ContractID` for the new smart
        /// > contract SHALL be set in the transaction receipt.<br/>
        /// > The contract is defined by the initial bytecode (or `initcode`).
        /// > The `initcode` SHALL be provided either in a previously created file,
        /// > or in the transaction body itself for very small contracts.<br/>
        /// > As part of contract creation, the constructor defined for the new
        /// > smart contract SHALL run with the parameters provided in
        /// > the `constructorParameters` field.<br/>
        /// > The gas to "power" that constructor MUST be provided via the `gas`
        /// > field, and SHALL be charged to the payer for this transaction.<br/>
        /// > If the contract _constructor_ stores information, it is charged gas for
        /// > that storage. There is a separate fee in HBAR to maintain that storage
        /// > until the expiration, and that fee SHALL be added to this transaction
        /// > as part of the _transaction fee_, rather than gas.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_TransactionResponse` message.
        func createContract(
            request: GRPCCore.ServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse>

        /// Handle the "updateContract" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Modify a smart contract.<br/>
        /// > Any change other than updating the expiration time requires that the
        /// > contract be modifiable (has a valid `adminKey`) and that the
        /// > transaction be signed by the `adminKey`
        /// > <p>
        /// > Fields _not set_ on the request SHALL NOT be modified.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_TransactionResponse` message.
        func updateContract(
            request: GRPCCore.ServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse>

        /// Handle the "contractCallMethod" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Call a function of a given smart contract, providing function parameter
        /// > inputs as needed.
        /// > <p>
        /// > Resource ("gas") charges SHALL include all relevant fees incurred by
        /// > the contract execution, including any storage required.<br/>
        /// > The total transaction fee SHALL incorporate all of the "gas" actually
        /// > consumed as well as the standard fees for transaction handling,
        /// > data transfers, signature verification, etc...
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_TransactionResponse` message.
        func contractCallMethod(
            request: GRPCCore.ServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse>

        /// Handle the "contractCallLocalMethod" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Call a query function of a given smart contract, providing
        /// > function parameter inputs as needed.<br/>
        /// > This is performed locally on the particular node that the client is
        /// > communicating with. Executing the call locally is faster and less
        /// > costly, but imposes certain restrictions.
        /// > <p>
        /// > The call MUST NOT change the state of the contract instance. This also
        /// > precludes any expenditure or transfer of HBAR or other tokens.<br/>
        /// > The call SHALL NOT have a separate consensus timestamp.<br/>
        /// > The call SHALL NOT generate a record nor a receipt.<br/>
        /// > The response SHALL contain the output returned by the function call.<br/>
        /// > <p>
        /// > This is generally useful for calling accessor functions which read
        /// > (query) state without changes or side effects. Any contract call that
        /// > would use the `STATICCALL` opcode MAY be called via contract call local
        /// > with performance and cost benefits.
        /// > <p>
        /// > Unlike a ContractCall transaction, the node SHALL always consume the
        /// > _entire_ amount of offered "gas" in determining the fee for this query,
        /// > so accurate gas estimation is important.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Query` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_Response` message.
        func contractCallLocalMethod(
            request: GRPCCore.ServerRequest<Proto_Query>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_Response>

        /// Handle the "getContractInfo" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > A standard query to obtain detailed information for a smart contract.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Query` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_Response` message.
        func getContractInfo(
            request: GRPCCore.ServerRequest<Proto_Query>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_Response>

        /// Handle the "ContractGetBytecode" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > A standard query to read the current bytecode for a smart contract.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Query` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_Response` message.
        func contractGetBytecode(
            request: GRPCCore.ServerRequest<Proto_Query>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_Response>

        /// Handle the "getBySolidityID" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > A standard query to obtain account and contract identifiers for a smart
        /// > contract, given the Solidity identifier for that contract.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Query` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_Response` message.
        func getBySolidityID(
            request: GRPCCore.ServerRequest<Proto_Query>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_Response>

        /// Handle the "getTxRecordByContractID" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > <blockquote>This query is no longer supported.</blockquote>
        /// > This query always returned an empty record list.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Query` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_Response` message.
        func getTxRecordByContractID(
            request: GRPCCore.ServerRequest<Proto_Query>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_Response>

        /// Handle the "deleteContract" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Delete a smart contract, and transfer any remaining HBAR balance
        /// > to a designated account.
        /// > <p>
        /// > If this call succeeds then all subsequent calls to that smart
        /// > contract SHALL fail.<br/>
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_TransactionResponse` message.
        func deleteContract(
            request: GRPCCore.ServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse>

        /// Handle the "systemDelete" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Delete a smart contract, as a system-initiated deletion, this
        /// > SHALL NOT transfer balances.
        /// > <blockquote>
        /// > This call is an administrative function of the Hedera network, and
        /// > SHALL require network administration authorization.<br/>
        /// > This transaction MUST be signed by one of the network administration
        /// > accounts (typically `0.0.2` through `0.0.59`, as defined in the
        /// > `api-permission.properties` file).
        /// > </blockquote>
        /// > If this call succeeds then all subsequent calls to that smart
        /// > contract SHALL fail.<br/>
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_TransactionResponse` message.
        func systemDelete(
            request: GRPCCore.ServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse>

        /// Handle the "systemUndelete" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Un-Delete a smart contract, returning it (mostly) to its state
        /// > prior to deletion.
        /// > <p>
        /// > The contract to be restored MUST have been deleted via `systemDelete`.
        /// > If the contract was deleted via `deleteContract`, it
        /// > SHALL NOT be recoverable.
        /// > <blockquote>
        /// > This call is an administrative function of the Hedera network, and
        /// > SHALL require network administration authorization.<br/>
        /// > This transaction MUST be signed by one of the network administration
        /// > accounts (typically `0.0.2` through `0.0.59`, as defined in the
        /// > `api-permission.properties` file).
        /// > </blockquote>
        /// > If this call succeeds then subsequent calls to that smart
        /// > contract MAY succeed.<br/>
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_TransactionResponse` message.
        func systemUndelete(
            request: GRPCCore.ServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse>

        /// Handle the "callEthereum" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Make an Ethereum transaction "call" with all data in Ethereum formats,
        /// > including the contract alias.
        /// > <p>
        /// > Call data MAY be in the transaction, or stored within a "File".<br/>
        /// > The caller MAY offer additional gas above what is offered in the call
        /// > data, but MAY be charged up to 80% of that value if the amount required
        /// > is less than this "floor" amount.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_TransactionResponse` message.
        func callEthereum(
            request: GRPCCore.ServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse>
    }

    /// Simple service protocol for the "proto.SmartContractService" service.
    ///
    /// This is the highest level protocol for the service. The API is the easiest to use but
    /// doesn't provide access to request or response metadata. If you need access to these
    /// then use ``ServiceProtocol`` instead.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > The Hedera Smart Contract Service (HSCS) provides an interface to an EVM
    /// > compatible environment to create, store, manage, and execute smart contract
    /// > calls. Smart Contracts implement useful and often highly complex
    /// > interactions between individuals, systems, and the distributed ledger.
    public protocol SimpleServiceProtocol: Proto_SmartContractService.ServiceProtocol {
        /// Handle the "createContract" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Create a new smart contract.
        /// > <p>
        /// > If this transaction succeeds, the `ContractID` for the new smart
        /// > contract SHALL be set in the transaction receipt.<br/>
        /// > The contract is defined by the initial bytecode (or `initcode`).
        /// > The `initcode` SHALL be provided either in a previously created file,
        /// > or in the transaction body itself for very small contracts.<br/>
        /// > As part of contract creation, the constructor defined for the new
        /// > smart contract SHALL run with the parameters provided in
        /// > the `constructorParameters` field.<br/>
        /// > The gas to "power" that constructor MUST be provided via the `gas`
        /// > field, and SHALL be charged to the payer for this transaction.<br/>
        /// > If the contract _constructor_ stores information, it is charged gas for
        /// > that storage. There is a separate fee in HBAR to maintain that storage
        /// > until the expiration, and that fee SHALL be added to this transaction
        /// > as part of the _transaction fee_, rather than gas.
        ///
        /// - Parameters:
        ///   - request: A `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_TransactionResponse` to respond with.
        func createContract(
            request: Proto_Transaction,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_TransactionResponse

        /// Handle the "updateContract" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Modify a smart contract.<br/>
        /// > Any change other than updating the expiration time requires that the
        /// > contract be modifiable (has a valid `adminKey`) and that the
        /// > transaction be signed by the `adminKey`
        /// > <p>
        /// > Fields _not set_ on the request SHALL NOT be modified.
        ///
        /// - Parameters:
        ///   - request: A `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_TransactionResponse` to respond with.
        func updateContract(
            request: Proto_Transaction,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_TransactionResponse

        /// Handle the "contractCallMethod" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Call a function of a given smart contract, providing function parameter
        /// > inputs as needed.
        /// > <p>
        /// > Resource ("gas") charges SHALL include all relevant fees incurred by
        /// > the contract execution, including any storage required.<br/>
        /// > The total transaction fee SHALL incorporate all of the "gas" actually
        /// > consumed as well as the standard fees for transaction handling,
        /// > data transfers, signature verification, etc...
        ///
        /// - Parameters:
        ///   - request: A `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_TransactionResponse` to respond with.
        func contractCallMethod(
            request: Proto_Transaction,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_TransactionResponse

        /// Handle the "contractCallLocalMethod" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Call a query function of a given smart contract, providing
        /// > function parameter inputs as needed.<br/>
        /// > This is performed locally on the particular node that the client is
        /// > communicating with. Executing the call locally is faster and less
        /// > costly, but imposes certain restrictions.
        /// > <p>
        /// > The call MUST NOT change the state of the contract instance. This also
        /// > precludes any expenditure or transfer of HBAR or other tokens.<br/>
        /// > The call SHALL NOT have a separate consensus timestamp.<br/>
        /// > The call SHALL NOT generate a record nor a receipt.<br/>
        /// > The response SHALL contain the output returned by the function call.<br/>
        /// > <p>
        /// > This is generally useful for calling accessor functions which read
        /// > (query) state without changes or side effects. Any contract call that
        /// > would use the `STATICCALL` opcode MAY be called via contract call local
        /// > with performance and cost benefits.
        /// > <p>
        /// > Unlike a ContractCall transaction, the node SHALL always consume the
        /// > _entire_ amount of offered "gas" in determining the fee for this query,
        /// > so accurate gas estimation is important.
        ///
        /// - Parameters:
        ///   - request: A `Proto_Query` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_Response` to respond with.
        func contractCallLocalMethod(
            request: Proto_Query,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_Response

        /// Handle the "getContractInfo" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > A standard query to obtain detailed information for a smart contract.
        ///
        /// - Parameters:
        ///   - request: A `Proto_Query` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_Response` to respond with.
        func getContractInfo(
            request: Proto_Query,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_Response

        /// Handle the "ContractGetBytecode" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > A standard query to read the current bytecode for a smart contract.
        ///
        /// - Parameters:
        ///   - request: A `Proto_Query` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_Response` to respond with.
        func contractGetBytecode(
            request: Proto_Query,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_Response

        /// Handle the "getBySolidityID" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > A standard query to obtain account and contract identifiers for a smart
        /// > contract, given the Solidity identifier for that contract.
        ///
        /// - Parameters:
        ///   - request: A `Proto_Query` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_Response` to respond with.
        func getBySolidityID(
            request: Proto_Query,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_Response

        /// Handle the "getTxRecordByContractID" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > <blockquote>This query is no longer supported.</blockquote>
        /// > This query always returned an empty record list.
        ///
        /// - Parameters:
        ///   - request: A `Proto_Query` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_Response` to respond with.
        func getTxRecordByContractID(
            request: Proto_Query,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_Response

        /// Handle the "deleteContract" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Delete a smart contract, and transfer any remaining HBAR balance
        /// > to a designated account.
        /// > <p>
        /// > If this call succeeds then all subsequent calls to that smart
        /// > contract SHALL fail.<br/>
        ///
        /// - Parameters:
        ///   - request: A `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_TransactionResponse` to respond with.
        func deleteContract(
            request: Proto_Transaction,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_TransactionResponse

        /// Handle the "systemDelete" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Delete a smart contract, as a system-initiated deletion, this
        /// > SHALL NOT transfer balances.
        /// > <blockquote>
        /// > This call is an administrative function of the Hedera network, and
        /// > SHALL require network administration authorization.<br/>
        /// > This transaction MUST be signed by one of the network administration
        /// > accounts (typically `0.0.2` through `0.0.59`, as defined in the
        /// > `api-permission.properties` file).
        /// > </blockquote>
        /// > If this call succeeds then all subsequent calls to that smart
        /// > contract SHALL fail.<br/>
        ///
        /// - Parameters:
        ///   - request: A `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_TransactionResponse` to respond with.
        func systemDelete(
            request: Proto_Transaction,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_TransactionResponse

        /// Handle the "systemUndelete" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Un-Delete a smart contract, returning it (mostly) to its state
        /// > prior to deletion.
        /// > <p>
        /// > The contract to be restored MUST have been deleted via `systemDelete`.
        /// > If the contract was deleted via `deleteContract`, it
        /// > SHALL NOT be recoverable.
        /// > <blockquote>
        /// > This call is an administrative function of the Hedera network, and
        /// > SHALL require network administration authorization.<br/>
        /// > This transaction MUST be signed by one of the network administration
        /// > accounts (typically `0.0.2` through `0.0.59`, as defined in the
        /// > `api-permission.properties` file).
        /// > </blockquote>
        /// > If this call succeeds then subsequent calls to that smart
        /// > contract MAY succeed.<br/>
        ///
        /// - Parameters:
        ///   - request: A `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_TransactionResponse` to respond with.
        func systemUndelete(
            request: Proto_Transaction,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_TransactionResponse

        /// Handle the "callEthereum" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Make an Ethereum transaction "call" with all data in Ethereum formats,
        /// > including the contract alias.
        /// > <p>
        /// > Call data MAY be in the transaction, or stored within a "File".<br/>
        /// > The caller MAY offer additional gas above what is offered in the call
        /// > data, but MAY be charged up to 80% of that value if the amount required
        /// > is less than this "floor" amount.
        ///
        /// - Parameters:
        ///   - request: A `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_TransactionResponse` to respond with.
        func callEthereum(
            request: Proto_Transaction,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_TransactionResponse
    }
}

// Default implementation of 'registerMethods(with:)'.
extension Proto_SmartContractService.StreamingServiceProtocol {
    public func registerMethods<Transport>(with router: inout GRPCCore.RPCRouter<Transport>) where Transport: GRPCCore.ServerTransport {
        router.registerHandler(
            forMethod: Proto_SmartContractService.Method.createContract.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Transaction>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_TransactionResponse>(),
            handler: { request, context in
                try await self.createContract(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_SmartContractService.Method.updateContract.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Transaction>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_TransactionResponse>(),
            handler: { request, context in
                try await self.updateContract(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_SmartContractService.Method.contractCallMethod.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Transaction>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_TransactionResponse>(),
            handler: { request, context in
                try await self.contractCallMethod(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_SmartContractService.Method.contractCallLocalMethod.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Query>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Response>(),
            handler: { request, context in
                try await self.contractCallLocalMethod(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_SmartContractService.Method.getContractInfo.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Query>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Response>(),
            handler: { request, context in
                try await self.getContractInfo(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_SmartContractService.Method.ContractGetBytecode.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Query>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Response>(),
            handler: { request, context in
                try await self.contractGetBytecode(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_SmartContractService.Method.getBySolidityID.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Query>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Response>(),
            handler: { request, context in
                try await self.getBySolidityID(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_SmartContractService.Method.getTxRecordByContractID.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Query>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Response>(),
            handler: { request, context in
                try await self.getTxRecordByContractID(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_SmartContractService.Method.deleteContract.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Transaction>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_TransactionResponse>(),
            handler: { request, context in
                try await self.deleteContract(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_SmartContractService.Method.systemDelete.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Transaction>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_TransactionResponse>(),
            handler: { request, context in
                try await self.systemDelete(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_SmartContractService.Method.systemUndelete.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Transaction>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_TransactionResponse>(),
            handler: { request, context in
                try await self.systemUndelete(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_SmartContractService.Method.callEthereum.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Transaction>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_TransactionResponse>(),
            handler: { request, context in
                try await self.callEthereum(
                    request: request,
                    context: context
                )
            }
        )
    }
}

// Default implementation of streaming methods from 'StreamingServiceProtocol'.
extension Proto_SmartContractService.ServiceProtocol {
    public func createContract(
        request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse> {
        let response = try await self.createContract(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func updateContract(
        request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse> {
        let response = try await self.updateContract(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func contractCallMethod(
        request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse> {
        let response = try await self.contractCallMethod(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func contractCallLocalMethod(
        request: GRPCCore.StreamingServerRequest<Proto_Query>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_Response> {
        let response = try await self.contractCallLocalMethod(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func getContractInfo(
        request: GRPCCore.StreamingServerRequest<Proto_Query>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_Response> {
        let response = try await self.getContractInfo(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func contractGetBytecode(
        request: GRPCCore.StreamingServerRequest<Proto_Query>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_Response> {
        let response = try await self.contractGetBytecode(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func getBySolidityID(
        request: GRPCCore.StreamingServerRequest<Proto_Query>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_Response> {
        let response = try await self.getBySolidityID(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func getTxRecordByContractID(
        request: GRPCCore.StreamingServerRequest<Proto_Query>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_Response> {
        let response = try await self.getTxRecordByContractID(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func deleteContract(
        request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse> {
        let response = try await self.deleteContract(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func systemDelete(
        request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse> {
        let response = try await self.systemDelete(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func systemUndelete(
        request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse> {
        let response = try await self.systemUndelete(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func callEthereum(
        request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse> {
        let response = try await self.callEthereum(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }
}

// Default implementation of methods from 'ServiceProtocol'.
extension Proto_SmartContractService.SimpleServiceProtocol {
    public func createContract(
        request: GRPCCore.ServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse> {
        return GRPCCore.ServerResponse<Proto_TransactionResponse>(
            message: try await self.createContract(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func updateContract(
        request: GRPCCore.ServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse> {
        return GRPCCore.ServerResponse<Proto_TransactionResponse>(
            message: try await self.updateContract(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func contractCallMethod(
        request: GRPCCore.ServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse> {
        return GRPCCore.ServerResponse<Proto_TransactionResponse>(
            message: try await self.contractCallMethod(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func contractCallLocalMethod(
        request: GRPCCore.ServerRequest<Proto_Query>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_Response> {
        return GRPCCore.ServerResponse<Proto_Response>(
            message: try await self.contractCallLocalMethod(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func getContractInfo(
        request: GRPCCore.ServerRequest<Proto_Query>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_Response> {
        return GRPCCore.ServerResponse<Proto_Response>(
            message: try await self.getContractInfo(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func contractGetBytecode(
        request: GRPCCore.ServerRequest<Proto_Query>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_Response> {
        return GRPCCore.ServerResponse<Proto_Response>(
            message: try await self.contractGetBytecode(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func getBySolidityID(
        request: GRPCCore.ServerRequest<Proto_Query>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_Response> {
        return GRPCCore.ServerResponse<Proto_Response>(
            message: try await self.getBySolidityID(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func getTxRecordByContractID(
        request: GRPCCore.ServerRequest<Proto_Query>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_Response> {
        return GRPCCore.ServerResponse<Proto_Response>(
            message: try await self.getTxRecordByContractID(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func deleteContract(
        request: GRPCCore.ServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse> {
        return GRPCCore.ServerResponse<Proto_TransactionResponse>(
            message: try await self.deleteContract(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func systemDelete(
        request: GRPCCore.ServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse> {
        return GRPCCore.ServerResponse<Proto_TransactionResponse>(
            message: try await self.systemDelete(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func systemUndelete(
        request: GRPCCore.ServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse> {
        return GRPCCore.ServerResponse<Proto_TransactionResponse>(
            message: try await self.systemUndelete(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func callEthereum(
        request: GRPCCore.ServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse> {
        return GRPCCore.ServerResponse<Proto_TransactionResponse>(
            message: try await self.callEthereum(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }
}

// MARK: proto.SmartContractService (client)

extension Proto_SmartContractService {
    /// Generated client protocol for the "proto.SmartContractService" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > The Hedera Smart Contract Service (HSCS) provides an interface to an EVM
    /// > compatible environment to create, store, manage, and execute smart contract
    /// > calls. Smart Contracts implement useful and often highly complex
    /// > interactions between individuals, systems, and the distributed ledger.
    public protocol ClientProtocol: Sendable {
        /// Call the "createContract" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Create a new smart contract.
        /// > <p>
        /// > If this transaction succeeds, the `ContractID` for the new smart
        /// > contract SHALL be set in the transaction receipt.<br/>
        /// > The contract is defined by the initial bytecode (or `initcode`).
        /// > The `initcode` SHALL be provided either in a previously created file,
        /// > or in the transaction body itself for very small contracts.<br/>
        /// > As part of contract creation, the constructor defined for the new
        /// > smart contract SHALL run with the parameters provided in
        /// > the `constructorParameters` field.<br/>
        /// > The gas to "power" that constructor MUST be provided via the `gas`
        /// > field, and SHALL be charged to the payer for this transaction.<br/>
        /// > If the contract _constructor_ stores information, it is charged gas for
        /// > that storage. There is a separate fee in HBAR to maintain that storage
        /// > until the expiration, and that fee SHALL be added to this transaction
        /// > as part of the _transaction fee_, rather than gas.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func createContract<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "updateContract" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Modify a smart contract.<br/>
        /// > Any change other than updating the expiration time requires that the
        /// > contract be modifiable (has a valid `adminKey`) and that the
        /// > transaction be signed by the `adminKey`
        /// > <p>
        /// > Fields _not set_ on the request SHALL NOT be modified.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func updateContract<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "contractCallMethod" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Call a function of a given smart contract, providing function parameter
        /// > inputs as needed.
        /// > <p>
        /// > Resource ("gas") charges SHALL include all relevant fees incurred by
        /// > the contract execution, including any storage required.<br/>
        /// > The total transaction fee SHALL incorporate all of the "gas" actually
        /// > consumed as well as the standard fees for transaction handling,
        /// > data transfers, signature verification, etc...
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func contractCallMethod<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "contractCallLocalMethod" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Call a query function of a given smart contract, providing
        /// > function parameter inputs as needed.<br/>
        /// > This is performed locally on the particular node that the client is
        /// > communicating with. Executing the call locally is faster and less
        /// > costly, but imposes certain restrictions.
        /// > <p>
        /// > The call MUST NOT change the state of the contract instance. This also
        /// > precludes any expenditure or transfer of HBAR or other tokens.<br/>
        /// > The call SHALL NOT have a separate consensus timestamp.<br/>
        /// > The call SHALL NOT generate a record nor a receipt.<br/>
        /// > The response SHALL contain the output returned by the function call.<br/>
        /// > <p>
        /// > This is generally useful for calling accessor functions which read
        /// > (query) state without changes or side effects. Any contract call that
        /// > would use the `STATICCALL` opcode MAY be called via contract call local
        /// > with performance and cost benefits.
        /// > <p>
        /// > Unlike a ContractCall transaction, the node SHALL always consume the
        /// > _entire_ amount of offered "gas" in determining the fee for this query,
        /// > so accurate gas estimation is important.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Query` message.
        ///   - serializer: A serializer for `Proto_Query` messages.
        ///   - deserializer: A deserializer for `Proto_Response` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func contractCallLocalMethod<Result>(
            request: GRPCCore.ClientRequest<Proto_Query>,
            serializer: some GRPCCore.MessageSerializer<Proto_Query>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_Response>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "getContractInfo" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > A standard query to obtain detailed information for a smart contract.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Query` message.
        ///   - serializer: A serializer for `Proto_Query` messages.
        ///   - deserializer: A deserializer for `Proto_Response` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getContractInfo<Result>(
            request: GRPCCore.ClientRequest<Proto_Query>,
            serializer: some GRPCCore.MessageSerializer<Proto_Query>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_Response>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ContractGetBytecode" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > A standard query to read the current bytecode for a smart contract.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Query` message.
        ///   - serializer: A serializer for `Proto_Query` messages.
        ///   - deserializer: A deserializer for `Proto_Response` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func contractGetBytecode<Result>(
            request: GRPCCore.ClientRequest<Proto_Query>,
            serializer: some GRPCCore.MessageSerializer<Proto_Query>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_Response>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "getBySolidityID" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > A standard query to obtain account and contract identifiers for a smart
        /// > contract, given the Solidity identifier for that contract.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Query` message.
        ///   - serializer: A serializer for `Proto_Query` messages.
        ///   - deserializer: A deserializer for `Proto_Response` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getBySolidityID<Result>(
            request: GRPCCore.ClientRequest<Proto_Query>,
            serializer: some GRPCCore.MessageSerializer<Proto_Query>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_Response>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "getTxRecordByContractID" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > <blockquote>This query is no longer supported.</blockquote>
        /// > This query always returned an empty record list.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Query` message.
        ///   - serializer: A serializer for `Proto_Query` messages.
        ///   - deserializer: A deserializer for `Proto_Response` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getTxRecordByContractID<Result>(
            request: GRPCCore.ClientRequest<Proto_Query>,
            serializer: some GRPCCore.MessageSerializer<Proto_Query>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_Response>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "deleteContract" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Delete a smart contract, and transfer any remaining HBAR balance
        /// > to a designated account.
        /// > <p>
        /// > If this call succeeds then all subsequent calls to that smart
        /// > contract SHALL fail.<br/>
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteContract<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "systemDelete" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Delete a smart contract, as a system-initiated deletion, this
        /// > SHALL NOT transfer balances.
        /// > <blockquote>
        /// > This call is an administrative function of the Hedera network, and
        /// > SHALL require network administration authorization.<br/>
        /// > This transaction MUST be signed by one of the network administration
        /// > accounts (typically `0.0.2` through `0.0.59`, as defined in the
        /// > `api-permission.properties` file).
        /// > </blockquote>
        /// > If this call succeeds then all subsequent calls to that smart
        /// > contract SHALL fail.<br/>
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func systemDelete<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "systemUndelete" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Un-Delete a smart contract, returning it (mostly) to its state
        /// > prior to deletion.
        /// > <p>
        /// > The contract to be restored MUST have been deleted via `systemDelete`.
        /// > If the contract was deleted via `deleteContract`, it
        /// > SHALL NOT be recoverable.
        /// > <blockquote>
        /// > This call is an administrative function of the Hedera network, and
        /// > SHALL require network administration authorization.<br/>
        /// > This transaction MUST be signed by one of the network administration
        /// > accounts (typically `0.0.2` through `0.0.59`, as defined in the
        /// > `api-permission.properties` file).
        /// > </blockquote>
        /// > If this call succeeds then subsequent calls to that smart
        /// > contract MAY succeed.<br/>
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func systemUndelete<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "callEthereum" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Make an Ethereum transaction "call" with all data in Ethereum formats,
        /// > including the contract alias.
        /// > <p>
        /// > Call data MAY be in the transaction, or stored within a "File".<br/>
        /// > The caller MAY offer additional gas above what is offered in the call
        /// > data, but MAY be charged up to 80% of that value if the amount required
        /// > is less than this "floor" amount.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func callEthereum<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "proto.SmartContractService" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > The Hedera Smart Contract Service (HSCS) provides an interface to an EVM
    /// > compatible environment to create, store, manage, and execute smart contract
    /// > calls. Smart Contracts implement useful and often highly complex
    /// > interactions between individuals, systems, and the distributed ledger.
    public struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        public init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "createContract" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Create a new smart contract.
        /// > <p>
        /// > If this transaction succeeds, the `ContractID` for the new smart
        /// > contract SHALL be set in the transaction receipt.<br/>
        /// > The contract is defined by the initial bytecode (or `initcode`).
        /// > The `initcode` SHALL be provided either in a previously created file,
        /// > or in the transaction body itself for very small contracts.<br/>
        /// > As part of contract creation, the constructor defined for the new
        /// > smart contract SHALL run with the parameters provided in
        /// > the `constructorParameters` field.<br/>
        /// > The gas to "power" that constructor MUST be provided via the `gas`
        /// > field, and SHALL be charged to the payer for this transaction.<br/>
        /// > If the contract _constructor_ stores information, it is charged gas for
        /// > that storage. There is a separate fee in HBAR to maintain that storage
        /// > until the expiration, and that fee SHALL be added to this transaction
        /// > as part of the _transaction fee_, rather than gas.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func createContract<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_SmartContractService.Method.createContract.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "updateContract" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Modify a smart contract.<br/>
        /// > Any change other than updating the expiration time requires that the
        /// > contract be modifiable (has a valid `adminKey`) and that the
        /// > transaction be signed by the `adminKey`
        /// > <p>
        /// > Fields _not set_ on the request SHALL NOT be modified.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func updateContract<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_SmartContractService.Method.updateContract.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "contractCallMethod" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Call a function of a given smart contract, providing function parameter
        /// > inputs as needed.
        /// > <p>
        /// > Resource ("gas") charges SHALL include all relevant fees incurred by
        /// > the contract execution, including any storage required.<br/>
        /// > The total transaction fee SHALL incorporate all of the "gas" actually
        /// > consumed as well as the standard fees for transaction handling,
        /// > data transfers, signature verification, etc...
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func contractCallMethod<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_SmartContractService.Method.contractCallMethod.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "contractCallLocalMethod" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Call a query function of a given smart contract, providing
        /// > function parameter inputs as needed.<br/>
        /// > This is performed locally on the particular node that the client is
        /// > communicating with. Executing the call locally is faster and less
        /// > costly, but imposes certain restrictions.
        /// > <p>
        /// > The call MUST NOT change the state of the contract instance. This also
        /// > precludes any expenditure or transfer of HBAR or other tokens.<br/>
        /// > The call SHALL NOT have a separate consensus timestamp.<br/>
        /// > The call SHALL NOT generate a record nor a receipt.<br/>
        /// > The response SHALL contain the output returned by the function call.<br/>
        /// > <p>
        /// > This is generally useful for calling accessor functions which read
        /// > (query) state without changes or side effects. Any contract call that
        /// > would use the `STATICCALL` opcode MAY be called via contract call local
        /// > with performance and cost benefits.
        /// > <p>
        /// > Unlike a ContractCall transaction, the node SHALL always consume the
        /// > _entire_ amount of offered "gas" in determining the fee for this query,
        /// > so accurate gas estimation is important.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Query` message.
        ///   - serializer: A serializer for `Proto_Query` messages.
        ///   - deserializer: A deserializer for `Proto_Response` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func contractCallLocalMethod<Result>(
            request: GRPCCore.ClientRequest<Proto_Query>,
            serializer: some GRPCCore.MessageSerializer<Proto_Query>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_Response>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_SmartContractService.Method.contractCallLocalMethod.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "getContractInfo" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > A standard query to obtain detailed information for a smart contract.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Query` message.
        ///   - serializer: A serializer for `Proto_Query` messages.
        ///   - deserializer: A deserializer for `Proto_Response` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func getContractInfo<Result>(
            request: GRPCCore.ClientRequest<Proto_Query>,
            serializer: some GRPCCore.MessageSerializer<Proto_Query>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_Response>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_SmartContractService.Method.getContractInfo.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ContractGetBytecode" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > A standard query to read the current bytecode for a smart contract.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Query` message.
        ///   - serializer: A serializer for `Proto_Query` messages.
        ///   - deserializer: A deserializer for `Proto_Response` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func contractGetBytecode<Result>(
            request: GRPCCore.ClientRequest<Proto_Query>,
            serializer: some GRPCCore.MessageSerializer<Proto_Query>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_Response>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_SmartContractService.Method.ContractGetBytecode.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "getBySolidityID" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > A standard query to obtain account and contract identifiers for a smart
        /// > contract, given the Solidity identifier for that contract.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Query` message.
        ///   - serializer: A serializer for `Proto_Query` messages.
        ///   - deserializer: A deserializer for `Proto_Response` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func getBySolidityID<Result>(
            request: GRPCCore.ClientRequest<Proto_Query>,
            serializer: some GRPCCore.MessageSerializer<Proto_Query>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_Response>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_SmartContractService.Method.getBySolidityID.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "getTxRecordByContractID" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > <blockquote>This query is no longer supported.</blockquote>
        /// > This query always returned an empty record list.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Query` message.
        ///   - serializer: A serializer for `Proto_Query` messages.
        ///   - deserializer: A deserializer for `Proto_Response` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func getTxRecordByContractID<Result>(
            request: GRPCCore.ClientRequest<Proto_Query>,
            serializer: some GRPCCore.MessageSerializer<Proto_Query>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_Response>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_SmartContractService.Method.getTxRecordByContractID.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "deleteContract" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Delete a smart contract, and transfer any remaining HBAR balance
        /// > to a designated account.
        /// > <p>
        /// > If this call succeeds then all subsequent calls to that smart
        /// > contract SHALL fail.<br/>
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func deleteContract<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_SmartContractService.Method.deleteContract.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "systemDelete" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Delete a smart contract, as a system-initiated deletion, this
        /// > SHALL NOT transfer balances.
        /// > <blockquote>
        /// > This call is an administrative function of the Hedera network, and
        /// > SHALL require network administration authorization.<br/>
        /// > This transaction MUST be signed by one of the network administration
        /// > accounts (typically `0.0.2` through `0.0.59`, as defined in the
        /// > `api-permission.properties` file).
        /// > </blockquote>
        /// > If this call succeeds then all subsequent calls to that smart
        /// > contract SHALL fail.<br/>
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func systemDelete<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_SmartContractService.Method.systemDelete.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "systemUndelete" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Un-Delete a smart contract, returning it (mostly) to its state
        /// > prior to deletion.
        /// > <p>
        /// > The contract to be restored MUST have been deleted via `systemDelete`.
        /// > If the contract was deleted via `deleteContract`, it
        /// > SHALL NOT be recoverable.
        /// > <blockquote>
        /// > This call is an administrative function of the Hedera network, and
        /// > SHALL require network administration authorization.<br/>
        /// > This transaction MUST be signed by one of the network administration
        /// > accounts (typically `0.0.2` through `0.0.59`, as defined in the
        /// > `api-permission.properties` file).
        /// > </blockquote>
        /// > If this call succeeds then subsequent calls to that smart
        /// > contract MAY succeed.<br/>
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func systemUndelete<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_SmartContractService.Method.systemUndelete.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "callEthereum" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Make an Ethereum transaction "call" with all data in Ethereum formats,
        /// > including the contract alias.
        /// > <p>
        /// > Call data MAY be in the transaction, or stored within a "File".<br/>
        /// > The caller MAY offer additional gas above what is offered in the call
        /// > data, but MAY be charged up to 80% of that value if the amount required
        /// > is less than this "floor" amount.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func callEthereum<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_SmartContractService.Method.callEthereum.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
extension Proto_SmartContractService.ClientProtocol {
    /// Call the "createContract" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Create a new smart contract.
    /// > <p>
    /// > If this transaction succeeds, the `ContractID` for the new smart
    /// > contract SHALL be set in the transaction receipt.<br/>
    /// > The contract is defined by the initial bytecode (or `initcode`).
    /// > The `initcode` SHALL be provided either in a previously created file,
    /// > or in the transaction body itself for very small contracts.<br/>
    /// > As part of contract creation, the constructor defined for the new
    /// > smart contract SHALL run with the parameters provided in
    /// > the `constructorParameters` field.<br/>
    /// > The gas to "power" that constructor MUST be provided via the `gas`
    /// > field, and SHALL be charged to the payer for this transaction.<br/>
    /// > If the contract _constructor_ stores information, it is charged gas for
    /// > that storage. There is a separate fee in HBAR to maintain that storage
    /// > until the expiration, and that fee SHALL be added to this transaction
    /// > as part of the _transaction fee_, rather than gas.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Transaction` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createContract<Result>(
        request: GRPCCore.ClientRequest<Proto_Transaction>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.createContract(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Transaction>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_TransactionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "updateContract" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Modify a smart contract.<br/>
    /// > Any change other than updating the expiration time requires that the
    /// > contract be modifiable (has a valid `adminKey`) and that the
    /// > transaction be signed by the `adminKey`
    /// > <p>
    /// > Fields _not set_ on the request SHALL NOT be modified.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Transaction` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func updateContract<Result>(
        request: GRPCCore.ClientRequest<Proto_Transaction>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.updateContract(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Transaction>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_TransactionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "contractCallMethod" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Call a function of a given smart contract, providing function parameter
    /// > inputs as needed.
    /// > <p>
    /// > Resource ("gas") charges SHALL include all relevant fees incurred by
    /// > the contract execution, including any storage required.<br/>
    /// > The total transaction fee SHALL incorporate all of the "gas" actually
    /// > consumed as well as the standard fees for transaction handling,
    /// > data transfers, signature verification, etc...
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Transaction` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func contractCallMethod<Result>(
        request: GRPCCore.ClientRequest<Proto_Transaction>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.contractCallMethod(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Transaction>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_TransactionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "contractCallLocalMethod" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Call a query function of a given smart contract, providing
    /// > function parameter inputs as needed.<br/>
    /// > This is performed locally on the particular node that the client is
    /// > communicating with. Executing the call locally is faster and less
    /// > costly, but imposes certain restrictions.
    /// > <p>
    /// > The call MUST NOT change the state of the contract instance. This also
    /// > precludes any expenditure or transfer of HBAR or other tokens.<br/>
    /// > The call SHALL NOT have a separate consensus timestamp.<br/>
    /// > The call SHALL NOT generate a record nor a receipt.<br/>
    /// > The response SHALL contain the output returned by the function call.<br/>
    /// > <p>
    /// > This is generally useful for calling accessor functions which read
    /// > (query) state without changes or side effects. Any contract call that
    /// > would use the `STATICCALL` opcode MAY be called via contract call local
    /// > with performance and cost benefits.
    /// > <p>
    /// > Unlike a ContractCall transaction, the node SHALL always consume the
    /// > _entire_ amount of offered "gas" in determining the fee for this query,
    /// > so accurate gas estimation is important.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Query` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func contractCallLocalMethod<Result>(
        request: GRPCCore.ClientRequest<Proto_Query>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.contractCallLocalMethod(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Query>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Response>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "getContractInfo" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > A standard query to obtain detailed information for a smart contract.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Query` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getContractInfo<Result>(
        request: GRPCCore.ClientRequest<Proto_Query>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getContractInfo(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Query>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Response>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ContractGetBytecode" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > A standard query to read the current bytecode for a smart contract.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Query` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func contractGetBytecode<Result>(
        request: GRPCCore.ClientRequest<Proto_Query>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.contractGetBytecode(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Query>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Response>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "getBySolidityID" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > A standard query to obtain account and contract identifiers for a smart
    /// > contract, given the Solidity identifier for that contract.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Query` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getBySolidityID<Result>(
        request: GRPCCore.ClientRequest<Proto_Query>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getBySolidityID(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Query>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Response>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "getTxRecordByContractID" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > <blockquote>This query is no longer supported.</blockquote>
    /// > This query always returned an empty record list.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Query` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getTxRecordByContractID<Result>(
        request: GRPCCore.ClientRequest<Proto_Query>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getTxRecordByContractID(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Query>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Response>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "deleteContract" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Delete a smart contract, and transfer any remaining HBAR balance
    /// > to a designated account.
    /// > <p>
    /// > If this call succeeds then all subsequent calls to that smart
    /// > contract SHALL fail.<br/>
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Transaction` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteContract<Result>(
        request: GRPCCore.ClientRequest<Proto_Transaction>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteContract(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Transaction>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_TransactionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "systemDelete" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Delete a smart contract, as a system-initiated deletion, this
    /// > SHALL NOT transfer balances.
    /// > <blockquote>
    /// > This call is an administrative function of the Hedera network, and
    /// > SHALL require network administration authorization.<br/>
    /// > This transaction MUST be signed by one of the network administration
    /// > accounts (typically `0.0.2` through `0.0.59`, as defined in the
    /// > `api-permission.properties` file).
    /// > </blockquote>
    /// > If this call succeeds then all subsequent calls to that smart
    /// > contract SHALL fail.<br/>
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Transaction` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func systemDelete<Result>(
        request: GRPCCore.ClientRequest<Proto_Transaction>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.systemDelete(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Transaction>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_TransactionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "systemUndelete" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Un-Delete a smart contract, returning it (mostly) to its state
    /// > prior to deletion.
    /// > <p>
    /// > The contract to be restored MUST have been deleted via `systemDelete`.
    /// > If the contract was deleted via `deleteContract`, it
    /// > SHALL NOT be recoverable.
    /// > <blockquote>
    /// > This call is an administrative function of the Hedera network, and
    /// > SHALL require network administration authorization.<br/>
    /// > This transaction MUST be signed by one of the network administration
    /// > accounts (typically `0.0.2` through `0.0.59`, as defined in the
    /// > `api-permission.properties` file).
    /// > </blockquote>
    /// > If this call succeeds then subsequent calls to that smart
    /// > contract MAY succeed.<br/>
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Transaction` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func systemUndelete<Result>(
        request: GRPCCore.ClientRequest<Proto_Transaction>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.systemUndelete(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Transaction>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_TransactionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "callEthereum" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Make an Ethereum transaction "call" with all data in Ethereum formats,
    /// > including the contract alias.
    /// > <p>
    /// > Call data MAY be in the transaction, or stored within a "File".<br/>
    /// > The caller MAY offer additional gas above what is offered in the call
    /// > data, but MAY be charged up to 80% of that value if the amount required
    /// > is less than this "floor" amount.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Transaction` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func callEthereum<Result>(
        request: GRPCCore.ClientRequest<Proto_Transaction>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.callEthereum(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Transaction>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_TransactionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
extension Proto_SmartContractService.ClientProtocol {
    /// Call the "createContract" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Create a new smart contract.
    /// > <p>
    /// > If this transaction succeeds, the `ContractID` for the new smart
    /// > contract SHALL be set in the transaction receipt.<br/>
    /// > The contract is defined by the initial bytecode (or `initcode`).
    /// > The `initcode` SHALL be provided either in a previously created file,
    /// > or in the transaction body itself for very small contracts.<br/>
    /// > As part of contract creation, the constructor defined for the new
    /// > smart contract SHALL run with the parameters provided in
    /// > the `constructorParameters` field.<br/>
    /// > The gas to "power" that constructor MUST be provided via the `gas`
    /// > field, and SHALL be charged to the payer for this transaction.<br/>
    /// > If the contract _constructor_ stores information, it is charged gas for
    /// > that storage. There is a separate fee in HBAR to maintain that storage
    /// > until the expiration, and that fee SHALL be added to this transaction
    /// > as part of the _transaction fee_, rather than gas.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createContract<Result>(
        _ message: Proto_Transaction,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Transaction>(
            message: message,
            metadata: metadata
        )
        return try await self.createContract(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "updateContract" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Modify a smart contract.<br/>
    /// > Any change other than updating the expiration time requires that the
    /// > contract be modifiable (has a valid `adminKey`) and that the
    /// > transaction be signed by the `adminKey`
    /// > <p>
    /// > Fields _not set_ on the request SHALL NOT be modified.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func updateContract<Result>(
        _ message: Proto_Transaction,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Transaction>(
            message: message,
            metadata: metadata
        )
        return try await self.updateContract(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "contractCallMethod" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Call a function of a given smart contract, providing function parameter
    /// > inputs as needed.
    /// > <p>
    /// > Resource ("gas") charges SHALL include all relevant fees incurred by
    /// > the contract execution, including any storage required.<br/>
    /// > The total transaction fee SHALL incorporate all of the "gas" actually
    /// > consumed as well as the standard fees for transaction handling,
    /// > data transfers, signature verification, etc...
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func contractCallMethod<Result>(
        _ message: Proto_Transaction,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Transaction>(
            message: message,
            metadata: metadata
        )
        return try await self.contractCallMethod(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "contractCallLocalMethod" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Call a query function of a given smart contract, providing
    /// > function parameter inputs as needed.<br/>
    /// > This is performed locally on the particular node that the client is
    /// > communicating with. Executing the call locally is faster and less
    /// > costly, but imposes certain restrictions.
    /// > <p>
    /// > The call MUST NOT change the state of the contract instance. This also
    /// > precludes any expenditure or transfer of HBAR or other tokens.<br/>
    /// > The call SHALL NOT have a separate consensus timestamp.<br/>
    /// > The call SHALL NOT generate a record nor a receipt.<br/>
    /// > The response SHALL contain the output returned by the function call.<br/>
    /// > <p>
    /// > This is generally useful for calling accessor functions which read
    /// > (query) state without changes or side effects. Any contract call that
    /// > would use the `STATICCALL` opcode MAY be called via contract call local
    /// > with performance and cost benefits.
    /// > <p>
    /// > Unlike a ContractCall transaction, the node SHALL always consume the
    /// > _entire_ amount of offered "gas" in determining the fee for this query,
    /// > so accurate gas estimation is important.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func contractCallLocalMethod<Result>(
        _ message: Proto_Query,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Query>(
            message: message,
            metadata: metadata
        )
        return try await self.contractCallLocalMethod(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "getContractInfo" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > A standard query to obtain detailed information for a smart contract.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getContractInfo<Result>(
        _ message: Proto_Query,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Query>(
            message: message,
            metadata: metadata
        )
        return try await self.getContractInfo(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ContractGetBytecode" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > A standard query to read the current bytecode for a smart contract.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func contractGetBytecode<Result>(
        _ message: Proto_Query,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Query>(
            message: message,
            metadata: metadata
        )
        return try await self.contractGetBytecode(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "getBySolidityID" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > A standard query to obtain account and contract identifiers for a smart
    /// > contract, given the Solidity identifier for that contract.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getBySolidityID<Result>(
        _ message: Proto_Query,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Query>(
            message: message,
            metadata: metadata
        )
        return try await self.getBySolidityID(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "getTxRecordByContractID" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > <blockquote>This query is no longer supported.</blockquote>
    /// > This query always returned an empty record list.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getTxRecordByContractID<Result>(
        _ message: Proto_Query,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Query>(
            message: message,
            metadata: metadata
        )
        return try await self.getTxRecordByContractID(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "deleteContract" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Delete a smart contract, and transfer any remaining HBAR balance
    /// > to a designated account.
    /// > <p>
    /// > If this call succeeds then all subsequent calls to that smart
    /// > contract SHALL fail.<br/>
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteContract<Result>(
        _ message: Proto_Transaction,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Transaction>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteContract(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "systemDelete" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Delete a smart contract, as a system-initiated deletion, this
    /// > SHALL NOT transfer balances.
    /// > <blockquote>
    /// > This call is an administrative function of the Hedera network, and
    /// > SHALL require network administration authorization.<br/>
    /// > This transaction MUST be signed by one of the network administration
    /// > accounts (typically `0.0.2` through `0.0.59`, as defined in the
    /// > `api-permission.properties` file).
    /// > </blockquote>
    /// > If this call succeeds then all subsequent calls to that smart
    /// > contract SHALL fail.<br/>
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func systemDelete<Result>(
        _ message: Proto_Transaction,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Transaction>(
            message: message,
            metadata: metadata
        )
        return try await self.systemDelete(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "systemUndelete" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Un-Delete a smart contract, returning it (mostly) to its state
    /// > prior to deletion.
    /// > <p>
    /// > The contract to be restored MUST have been deleted via `systemDelete`.
    /// > If the contract was deleted via `deleteContract`, it
    /// > SHALL NOT be recoverable.
    /// > <blockquote>
    /// > This call is an administrative function of the Hedera network, and
    /// > SHALL require network administration authorization.<br/>
    /// > This transaction MUST be signed by one of the network administration
    /// > accounts (typically `0.0.2` through `0.0.59`, as defined in the
    /// > `api-permission.properties` file).
    /// > </blockquote>
    /// > If this call succeeds then subsequent calls to that smart
    /// > contract MAY succeed.<br/>
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func systemUndelete<Result>(
        _ message: Proto_Transaction,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Transaction>(
            message: message,
            metadata: metadata
        )
        return try await self.systemUndelete(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "callEthereum" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Make an Ethereum transaction "call" with all data in Ethereum formats,
    /// > including the contract alias.
    /// > <p>
    /// > Call data MAY be in the transaction, or stored within a "File".<br/>
    /// > The caller MAY offer additional gas above what is offered in the call
    /// > data, but MAY be charged up to 80% of that value if the amount required
    /// > is less than this "floor" amount.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func callEthereum<Result>(
        _ message: Proto_Transaction,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Transaction>(
            message: message,
            metadata: metadata
        )
        return try await self.callEthereum(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}