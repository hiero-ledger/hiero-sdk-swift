// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: services/auxiliary/hints/hints_preprocessing_vote.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

///*
/// # hinTS Aggregation Vote Transaction
///
/// ### Keywords
/// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
/// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
/// document are to be interpreted as described in
/// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
/// [RFC8174](https://www.ietf.org/rfc/rfc8174).

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
/// A transaction body to publish a node's vote for the results of
/// aggregating the hinTS keys for a specified construction id. The
/// node can either give their explicit aggregation results, or
/// delegate their vote to another node's results.
public struct Com_Hedera_Hapi_Services_Auxiliary_Hints_HintsPreprocessingVoteTransactionBody: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// The id of the hinTS construction this vote is for. Because
  /// the network only ever performs one construction a time, this
  /// is somewhat redundant, but included to detect any strange
  /// edge cases where a node is so far behind it votes on the wrong
  /// construction.
  public var constructionID: UInt64 = 0

  ///*
  /// The vote the node is casting for the aggregation of the hints
  /// in the given construction (which should be ongoing).
  public var vote: Com_Hedera_Hapi_Node_State_Hints_PreprocessingVote {
    get {return _vote ?? Com_Hedera_Hapi_Node_State_Hints_PreprocessingVote()}
    set {_vote = newValue}
  }
  /// Returns true if `vote` has been explicitly set.
  public var hasVote: Bool {return self._vote != nil}
  /// Clears the value of `vote`. Subsequent reads from it will return its default value.
  public mutating func clearVote() {self._vote = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _vote: Com_Hedera_Hapi_Node_State_Hints_PreprocessingVote? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "com.hedera.hapi.services.auxiliary.hints"

extension Com_Hedera_Hapi_Services_Auxiliary_Hints_HintsPreprocessingVoteTransactionBody: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".HintsPreprocessingVoteTransactionBody"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "construction_id"),
    2: .same(proto: "vote"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.constructionID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._vote) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.constructionID != 0 {
      try visitor.visitSingularUInt64Field(value: self.constructionID, fieldNumber: 1)
    }
    try { if let v = self._vote {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Hedera_Hapi_Services_Auxiliary_Hints_HintsPreprocessingVoteTransactionBody, rhs: Com_Hedera_Hapi_Services_Auxiliary_Hints_HintsPreprocessingVoteTransactionBody) -> Bool {
    if lhs.constructionID != rhs.constructionID {return false}
    if lhs._vote != rhs._vote {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
