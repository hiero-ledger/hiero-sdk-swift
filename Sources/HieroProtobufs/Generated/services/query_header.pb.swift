// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: services/query_header.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

///*
/// # Query Header
/// Messages that comprise a header sent with each query request.
///
/// ### Keywords
/// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
/// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
/// document are to be interpreted as described in
/// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
/// [RFC8174](https://www.ietf.org/rfc/rfc8174).

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
/// The type of query response.<br/>
///
/// This SHALL be answer-only as a default.<br/>
/// This value SHALL support an "estimated cost" type.<br/>
/// This value SHOULD support a "state proof" type, when available.
public enum Proto_ResponseType: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  ///*
  /// A response with the query answer.
  case answerOnly // = 0

  ///*
  /// A response with both the query answer and a state proof.
  case answerStateProof // = 1

  ///*
  /// A response with the estimated cost to answer the query.
  case costAnswer // = 2

  ///*
  /// A response with the estimated cost to answer and a state proof.
  case costAnswerStateProof // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .answerOnly
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .answerOnly
    case 1: self = .answerStateProof
    case 2: self = .costAnswer
    case 3: self = .costAnswerStateProof
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .answerOnly: return 0
    case .answerStateProof: return 1
    case .costAnswer: return 2
    case .costAnswerStateProof: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Proto_ResponseType] = [
    .answerOnly,
    .answerStateProof,
    .costAnswer,
    .costAnswerStateProof,
  ]

}

///*
/// A standard query header.<br/>
/// Each query from the client to the node must contain a QueryHeader, which
/// specifies the desired response type, and includes a payment transaction
/// that will compensate the network for responding to the query.
/// The payment may be blank if the query is free.
///
/// The payment transaction MUST be a `cryptoTransfer` from the payer account
/// to the account of the node where the query is submitted.<br/>
/// If the payment is sufficient, the network SHALL respond with the response
/// type requested.<br/>
/// If the response type is `COST_ANSWER` the payment MUST be unset.
/// A state proof SHALL be available for some types of information.<br/>
/// A state proof SHALL be available for a Record, but not a receipt, and the
/// response entry for each supported "get info" query.
public struct Proto_QueryHeader: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// A signed `CryptoTransferTransaction` to pay query fees.
  /// <p>
  /// This MUST transfer HBAR from the "payer" to the responding node account
  /// sufficient to pay the query fees.
  public var payment: Proto_Transaction {
    get {return _payment ?? Proto_Transaction()}
    set {_payment = newValue}
  }
  /// Returns true if `payment` has been explicitly set.
  public var hasPayment: Bool {return self._payment != nil}
  /// Clears the value of `payment`. Subsequent reads from it will return its default value.
  public mutating func clearPayment() {self._payment = nil}

  ///*
  /// A type of query response requested.
  public var responseType: Proto_ResponseType = .answerOnly

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _payment: Proto_Transaction? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "proto"

extension Proto_ResponseType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ANSWER_ONLY"),
    1: .same(proto: "ANSWER_STATE_PROOF"),
    2: .same(proto: "COST_ANSWER"),
    3: .same(proto: "COST_ANSWER_STATE_PROOF"),
  ]
}

extension Proto_QueryHeader: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".QueryHeader"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "payment"),
    2: .same(proto: "responseType"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._payment) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.responseType) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._payment {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.responseType != .answerOnly {
      try visitor.visitSingularEnumField(value: self.responseType, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_QueryHeader, rhs: Proto_QueryHeader) -> Bool {
    if lhs._payment != rhs._payment {return false}
    if lhs.responseType != rhs.responseType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
