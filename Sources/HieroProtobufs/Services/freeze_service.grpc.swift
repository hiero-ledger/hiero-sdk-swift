//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: freeze_service.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


///*
/// A service to manage network "freeze" events.
///
/// This service provides a facility to prepare for network upgrades, halt network processing,
/// perform network software upgrades, and automatically restart the network following an upgrade.
///
/// Usage: instantiate `Proto_FreezeServiceClient`, then call methods of this protocol to make API calls.
public protocol Proto_FreezeServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Proto_FreezeServiceClientInterceptorFactoryProtocol? { get }

  func freeze(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>
}

extension Proto_FreezeServiceClientProtocol {
  public var serviceName: String {
    return "proto.FreezeService"
  }

  ///*
  /// Freeze, cancel, or prepare a freeze.
  /// This single transaction performs all of the functions supported
  /// by the network freeze service. These functions include actions to
  /// prepare an upgrade, prepare a telemetry upgrade, freeze the network,
  /// freeze the network for upgrade, or abort a scheduled freeze.
  /// <p>
  /// The actual freeze action SHALL be determined by the `freeze_type` field
  /// of the `FreezeTransactionBody`.<br/>
  /// The transaction body MUST be a `FreezeTransactionBody`.
  ///
  /// - Parameters:
  ///   - request: Request to send to freeze.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func freeze(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(
      path: Proto_FreezeServiceClientMetadata.Methods.freeze.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makefreezeInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Proto_FreezeServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Proto_FreezeServiceNIOClient")
public final class Proto_FreezeServiceClient: Proto_FreezeServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Proto_FreezeServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Proto_FreezeServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the proto.FreezeService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Proto_FreezeServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Proto_FreezeServiceNIOClient: Proto_FreezeServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Proto_FreezeServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the proto.FreezeService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Proto_FreezeServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

///*
/// A service to manage network "freeze" events.
///
/// This service provides a facility to prepare for network upgrades, halt network processing,
/// perform network software upgrades, and automatically restart the network following an upgrade.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Proto_FreezeServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Proto_FreezeServiceClientInterceptorFactoryProtocol? { get }

  func makeFreezeCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Proto_FreezeServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Proto_FreezeServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: Proto_FreezeServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeFreezeCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeAsyncUnaryCall(
      path: Proto_FreezeServiceClientMetadata.Methods.freeze.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makefreezeInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Proto_FreezeServiceAsyncClientProtocol {
  public func freeze(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_TransactionResponse {
    return try await self.performAsyncUnaryCall(
      path: Proto_FreezeServiceClientMetadata.Methods.freeze.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makefreezeInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Proto_FreezeServiceAsyncClient: Proto_FreezeServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Proto_FreezeServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Proto_FreezeServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Proto_FreezeServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'freeze'.
  func makefreezeInterceptors() -> [ClientInterceptor<Proto_Transaction, Proto_TransactionResponse>]
}

public enum Proto_FreezeServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "FreezeService",
    fullName: "proto.FreezeService",
    methods: [
      Proto_FreezeServiceClientMetadata.Methods.freeze,
    ]
  )

  public enum Methods {
    public static let freeze = GRPCMethodDescriptor(
      name: "freeze",
      path: "/proto.FreezeService/freeze",
      type: GRPCCallType.unary
    )
  }
}

///*
/// A service to manage network "freeze" events.
///
/// This service provides a facility to prepare for network upgrades, halt network processing,
/// perform network software upgrades, and automatically restart the network following an upgrade.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Proto_FreezeServiceProvider: CallHandlerProvider {
  var interceptors: Proto_FreezeServiceServerInterceptorFactoryProtocol? { get }

  ///*
  /// Freeze, cancel, or prepare a freeze.
  /// This single transaction performs all of the functions supported
  /// by the network freeze service. These functions include actions to
  /// prepare an upgrade, prepare a telemetry upgrade, freeze the network,
  /// freeze the network for upgrade, or abort a scheduled freeze.
  /// <p>
  /// The actual freeze action SHALL be determined by the `freeze_type` field
  /// of the `FreezeTransactionBody`.<br/>
  /// The transaction body MUST be a `FreezeTransactionBody`.
  func freeze(request: Proto_Transaction, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_TransactionResponse>
}

extension Proto_FreezeServiceProvider {
  public var serviceName: Substring {
    return Proto_FreezeServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "freeze":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Transaction>(),
        responseSerializer: ProtobufSerializer<Proto_TransactionResponse>(),
        interceptors: self.interceptors?.makefreezeInterceptors() ?? [],
        userFunction: self.freeze(request:context:)
      )

    default:
      return nil
    }
  }
}

///*
/// A service to manage network "freeze" events.
///
/// This service provides a facility to prepare for network upgrades, halt network processing,
/// perform network software upgrades, and automatically restart the network following an upgrade.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Proto_FreezeServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Proto_FreezeServiceServerInterceptorFactoryProtocol? { get }

  ///*
  /// Freeze, cancel, or prepare a freeze.
  /// This single transaction performs all of the functions supported
  /// by the network freeze service. These functions include actions to
  /// prepare an upgrade, prepare a telemetry upgrade, freeze the network,
  /// freeze the network for upgrade, or abort a scheduled freeze.
  /// <p>
  /// The actual freeze action SHALL be determined by the `freeze_type` field
  /// of the `FreezeTransactionBody`.<br/>
  /// The transaction body MUST be a `FreezeTransactionBody`.
  func freeze(
    request: Proto_Transaction,
    context: GRPCAsyncServerCallContext
  ) async throws -> Proto_TransactionResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Proto_FreezeServiceAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Proto_FreezeServiceServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Proto_FreezeServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Proto_FreezeServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "freeze":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Transaction>(),
        responseSerializer: ProtobufSerializer<Proto_TransactionResponse>(),
        interceptors: self.interceptors?.makefreezeInterceptors() ?? [],
        wrapping: { try await self.freeze(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

public protocol Proto_FreezeServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'freeze'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makefreezeInterceptors() -> [ServerInterceptor<Proto_Transaction, Proto_TransactionResponse>]
}

public enum Proto_FreezeServiceServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "FreezeService",
    fullName: "proto.FreezeService",
    methods: [
      Proto_FreezeServiceServerMetadata.Methods.freeze,
    ]
  )

  public enum Methods {
    public static let freeze = GRPCMethodDescriptor(
      name: "freeze",
      path: "/proto.FreezeService/freeze",
      type: GRPCCallType.unary
    )
  }
}
