// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: crypto_transfer.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

///*
/// # Crypto Transfer
/// Transaction to transfer HBAR between accounts, or between accounts and
/// smart contracts.
///
/// ### Keywords
/// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
/// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
/// document are to be interpreted as described in
/// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
/// [RFC8174](https://www.ietf.org/rfc/rfc8174).

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
/// Transfer HBAR and/or other tokens among two or more accounts and/or smart
/// contracts.
///
/// Transfers of HBAR or fungible/common tokens in this transaction are
/// structured as a "double-entry" transfer list which debits one or more
/// accounts, and separately credits one or more accounts. Each such transfer
/// list may specify up to 10 individual credits or debits.<br/>
/// Transfers of non-fungible/unique tokens in this transaction are
/// structured as a "single-entry" transfer list, which both debits one account
/// and credits another account in a single entry.
///
/// At least one transfer MUST be present, this MAY be an HBAR transfer in
/// `transfers`, or MAY be a token transfer in `tokenTransfers`.<br/>
/// Either `transfers` or `tokenTransfers` MAY be unset, provided the other
/// is set and not empty.<br/>
/// If any one account with a debit in any transfer list holds insufficient
/// balance to complete the transfer, the entire transaction SHALL fail, and
/// all transfers SHALL NOT be completed.<br/>
/// If any one account that is _sending_ an individual non-fungible/unique (NFT)
/// token does not currently hold that unique NFT, the entire transaction SHALL
/// FAIL, and all transfers SHALL NOT be completed.
/// The transaction fee SHALL be charged for a transaction that fails due to
/// insufficient balance or not holding the NFT to be transferred.<br/>
/// Each account with any debit amounts in any transfer list MUST sign this
/// transaction.<br/>
/// Each account with any credit amounts in any transfer list that also has the
/// `receiverSigRequired` flag set MUST sign this transaction.
///
/// ### Block Stream Effects
/// All debits and credits completed by this transaction SHALL be included in
/// the transaction result transfer list.<br/>
/// Multiple fungible/common debits from one account, or credits to one account,
/// MAY be consolidated to a single debit or credit entry in the
/// transaction result.<br/>
/// Multiple non-fungible/unique transfers SHALL NOT be consolidated in the
/// transaction result.
public struct Proto_CryptoTransferTransactionBody: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// A list of HBAR transfers.
  /// <p>
  /// Each transfer in this list MUST be denominated in tinybar.
  public var transfers: Proto_TransferList {
    get {return _transfers ?? Proto_TransferList()}
    set {_transfers = newValue}
  }
  /// Returns true if `transfers` has been explicitly set.
  public var hasTransfers: Bool {return self._transfers != nil}
  /// Clears the value of `transfers`. Subsequent reads from it will return its default value.
  public mutating func clearTransfers() {self._transfers = nil}

  ///*
  /// One or more lists of token transfers.
  /// <p>
  /// This list MUST NOT contain more than 10 entries.<br/>
  /// If custom fees must be charged, the fee SHALL be assessed against the
  /// effective "payer" for this transaction.<br/>
  /// If the effective "payer" for this transaction lacks sufficient balance
  /// to pay custom fees assessed, the entire transaction SHALL fail with a
  /// response code `INSUFFICIENT_PAYER_BALANCE_FOR_CUSTOM_FEE`.
  public var tokenTransfers: [Proto_TokenTransferList] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _transfers: Proto_TransferList? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "proto"

extension Proto_CryptoTransferTransactionBody: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CryptoTransferTransactionBody"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "transfers"),
    2: .same(proto: "tokenTransfers"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._transfers) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.tokenTransfers) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._transfers {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.tokenTransfers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tokenTransfers, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_CryptoTransferTransactionBody, rhs: Proto_CryptoTransferTransactionBody) -> Bool {
    if lhs._transfers != rhs._transfers {return false}
    if lhs.tokenTransfers != rhs.tokenTransfers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
