// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: services/file_append.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

///*
/// # File Append
/// A transaction body message to append data to a "file" in state.
///
/// ### Keywords
/// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
/// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
/// document are to be interpreted as described in
/// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
/// [RFC8174](https://www.ietf.org/rfc/rfc8174).

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
/// A transaction body for an `appendContent` transaction.<br/>
/// This transaction body provides a mechanism to append content to a "file" in
/// network state. Hedera transactions are limited in size, but there are many
/// uses for in-state byte arrays (e.g. smart contract bytecode) which require
/// more than may fit within a single transaction. The `appendFile` transaction
/// exists to support these requirements. The typical pattern is to create a
/// file, append more data until the full content is stored, verify the file is
/// correct, then update the file entry with any final metadata changes (e.g.
/// adding threshold keys and removing the initial upload key).
///
/// Each append transaction MUST remain within the total transaction size limit
/// for the network (typically 6144 bytes).<br/>
/// The total size of a file MUST remain within the maximum file size limit for
/// the network (typically 1048576 bytes).
///
/// #### Signature Requirements
/// Append transactions MUST have signatures from _all_ keys in the `KeyList`
/// assigned to the `keys` field of the file.<br/>
/// See the [File Service](#FileService) specification for a detailed
/// explanation of the signature requirements for all file transactions.
///
/// ### Block Stream Effects
/// None
public struct Proto_FileAppendTransactionBody: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// A file identifier.<br/>
  /// This identifies the file to which the `contents` will be appended.
  /// <p>
  /// This field is REQUIRED.<br/>
  /// The identified file MUST exist.<br/>
  /// The identified file MUST NOT be larger than the current maximum file
  /// size limit.<br/>
  /// The identified file MUST NOT be deleted.<br/>
  /// The identified file MUST NOT be immutable.
  public var fileID: Proto_FileID {
    get {return _fileID ?? Proto_FileID()}
    set {_fileID = newValue}
  }
  /// Returns true if `fileID` has been explicitly set.
  public var hasFileID: Bool {return self._fileID != nil}
  /// Clears the value of `fileID`. Subsequent reads from it will return its default value.
  public mutating func clearFileID() {self._fileID = nil}

  ///*
  /// An array of bytes to append.<br/>
  /// <p>
  /// This content SHALL be appended to the identified file if this
  /// transaction succeeds.<br/>
  /// This field is REQUIRED.<br/>
  /// This field MUST NOT be empty.
  public var contents: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _fileID: Proto_FileID? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "proto"

extension Proto_FileAppendTransactionBody: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FileAppendTransactionBody"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "fileID"),
    4: .same(proto: "contents"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularMessageField(value: &self._fileID) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.contents) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._fileID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.contents.isEmpty {
      try visitor.visitSingularBytesField(value: self.contents, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_FileAppendTransactionBody, rhs: Proto_FileAppendTransactionBody) -> Bool {
    if lhs._fileID != rhs._fileID {return false}
    if lhs.contents != rhs.contents {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
