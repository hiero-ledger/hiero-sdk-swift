// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: services/crypto_update.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

///*
/// # Crypto Update
/// Modify a single account.
///
/// ### Keywords
/// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
/// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
/// document are to be interpreted as described in
/// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
/// [RFC8174](https://www.ietf.org/rfc/rfc8174).

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
/// Modify the current state of an account.
///
/// ### Requirements
/// - The `key` for this account MUST sign all account update transactions.
/// - If the `key` field is set for this transaction, then _both_ the current
///   `key` and the new `key` MUST sign this transaction, for security and to
///   prevent setting the `key` field to an invalid value.
/// - If the `auto_renew_account` field is set for this transaction, the account
///   identified in that field MUST sign this transaction.
/// - Fields set to non-default values in this transaction SHALL be updated on
///   success. Fields not set to non-default values SHALL NOT be
///   updated on success.
/// - All fields that may be modified in this transaction SHALL have a
///   default value of unset (a.k.a. `null`).
///
/// ### Block Stream Effects
/// None
public struct Proto_CryptoUpdateTransactionBody: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// An account identifier.<br/>
  /// This identifies the account which is to be modified in this transaction.
  /// <p>
  /// This field is REQUIRED.
  public var accountIdtoUpdate: Proto_AccountID {
    get {return _storage._accountIdtoUpdate ?? Proto_AccountID()}
    set {_uniqueStorage()._accountIdtoUpdate = newValue}
  }
  /// Returns true if `accountIdtoUpdate` has been explicitly set.
  public var hasAccountIdtoUpdate: Bool {return _storage._accountIdtoUpdate != nil}
  /// Clears the value of `accountIdtoUpdate`. Subsequent reads from it will return its default value.
  public mutating func clearAccountIdtoUpdate() {_uniqueStorage()._accountIdtoUpdate = nil}

  ///*
  /// An account key.<br/>
  /// This may be a "primitive" key (a singly cryptographic key), or a
  /// composite key.
  /// <p>
  /// If set, this key MUST be a valid key.<br/>
  /// If set, the previous key and new key MUST both sign this transaction.
  public var key: Proto_Key {
    get {return _storage._key ?? Proto_Key()}
    set {_uniqueStorage()._key = newValue}
  }
  /// Returns true if `key` has been explicitly set.
  public var hasKey: Bool {return _storage._key != nil}
  /// Clears the value of `key`. Subsequent reads from it will return its default value.
  public mutating func clearKey() {_uniqueStorage()._key = nil}

  ///*
  /// Removed in favor of the `staked_id` oneOf.<br/>
  /// An account identifier for a "proxy" account. This account's HBAR are
  /// staked to a node selected by the proxy account.
  ///
  /// NOTE: This field was marked as deprecated in the .proto file.
  public var proxyAccountID: Proto_AccountID {
    get {return _storage._proxyAccountID ?? Proto_AccountID()}
    set {_uniqueStorage()._proxyAccountID = newValue}
  }
  /// Returns true if `proxyAccountID` has been explicitly set.
  public var hasProxyAccountID: Bool {return _storage._proxyAccountID != nil}
  /// Clears the value of `proxyAccountID`. Subsequent reads from it will return its default value.
  public mutating func clearProxyAccountID() {_uniqueStorage()._proxyAccountID = nil}

  ///*
  /// Removed prior to the first available history.<br/>
  /// A fraction to split staking rewards between this account and the proxy
  /// account.
  ///
  /// NOTE: This field was marked as deprecated in the .proto file.
  public var proxyFraction: Int32 {
    get {return _storage._proxyFraction}
    set {_uniqueStorage()._proxyFraction = newValue}
  }

  /// This entire oneOf is deprecated, and the concept is not implemented.
  public var sendRecordThresholdField: OneOf_SendRecordThresholdField? {
    get {return _storage._sendRecordThresholdField}
    set {_uniqueStorage()._sendRecordThresholdField = newValue}
  }

  ///*
  /// Removed prior to the first available history, and may be related
  /// to an early design dead-end.<br/>
  /// The new threshold amount (in tinybars) for which an account record is
  /// created for any send/withdraw transaction
  ///
  /// NOTE: This field was marked as deprecated in the .proto file.
  public var sendRecordThreshold: UInt64 {
    get {
      if case .sendRecordThreshold(let v)? = _storage._sendRecordThresholdField {return v}
      return 0
    }
    set {_uniqueStorage()._sendRecordThresholdField = .sendRecordThreshold(newValue)}
  }

  ///*
  /// Removed prior to the first available history, and may be related
  /// to an early design dead-end.<br/>
  /// The new threshold amount (in tinybars) for which an account record is
  /// created for any send/withdraw transaction
  ///
  /// NOTE: This field was marked as deprecated in the .proto file.
  public var sendRecordThresholdWrapper: SwiftProtobuf.Google_Protobuf_UInt64Value {
    get {
      if case .sendRecordThresholdWrapper(let v)? = _storage._sendRecordThresholdField {return v}
      return SwiftProtobuf.Google_Protobuf_UInt64Value()
    }
    set {_uniqueStorage()._sendRecordThresholdField = .sendRecordThresholdWrapper(newValue)}
  }

  /// This entire oneOf is deprecated, and the concept is not implemented.
  public var receiveRecordThresholdField: OneOf_ReceiveRecordThresholdField? {
    get {return _storage._receiveRecordThresholdField}
    set {_uniqueStorage()._receiveRecordThresholdField = newValue}
  }

  ///*
  /// Removed prior to the first available history, and may be related
  /// to an early design dead-end.<br/>
  /// The new threshold amount (in tinybars) for which an account record is
  /// created for any receive/deposit transaction.
  ///
  /// NOTE: This field was marked as deprecated in the .proto file.
  public var receiveRecordThreshold: UInt64 {
    get {
      if case .receiveRecordThreshold(let v)? = _storage._receiveRecordThresholdField {return v}
      return 0
    }
    set {_uniqueStorage()._receiveRecordThresholdField = .receiveRecordThreshold(newValue)}
  }

  ///*
  /// Removed prior to the first available history, and may be related
  /// to an early design dead-end.<br/>
  /// The new threshold amount (in tinybars) for which an account record is
  /// created for any receive/deposit transaction.
  ///
  /// NOTE: This field was marked as deprecated in the .proto file.
  public var receiveRecordThresholdWrapper: SwiftProtobuf.Google_Protobuf_UInt64Value {
    get {
      if case .receiveRecordThresholdWrapper(let v)? = _storage._receiveRecordThresholdField {return v}
      return SwiftProtobuf.Google_Protobuf_UInt64Value()
    }
    set {_uniqueStorage()._receiveRecordThresholdField = .receiveRecordThresholdWrapper(newValue)}
  }

  ///*
  /// A duration to extend account expiration.<br/>
  /// An amount of time, in seconds, to extend the expiration date for this
  /// account when _automatically_ renewed.
  /// <p>
  /// This duration MUST be between the current configured minimum and maximum
  /// values defined for the network.<br/>
  /// This duration SHALL be applied only when _automatically_ extending the
  /// account expiration.
  public var autoRenewPeriod: Proto_Duration {
    get {return _storage._autoRenewPeriod ?? Proto_Duration()}
    set {_uniqueStorage()._autoRenewPeriod = newValue}
  }
  /// Returns true if `autoRenewPeriod` has been explicitly set.
  public var hasAutoRenewPeriod: Bool {return _storage._autoRenewPeriod != nil}
  /// Clears the value of `autoRenewPeriod`. Subsequent reads from it will return its default value.
  public mutating func clearAutoRenewPeriod() {_uniqueStorage()._autoRenewPeriod = nil}

  ///*
  /// A new account expiration time, in seconds since the epoch.
  /// <p>
  /// For this purpose, `epoch` SHALL be the UNIX epoch with 0
  /// at `1970-01-01T00:00:00.000Z`.<br/>
  /// If set, this value MUST be later than the current consensus time.<br/>
  /// If set, this value MUST be earlier than the current consensus time
  /// extended by the current maximum expiration time configured for the
  /// network.
  public var expirationTime: Proto_Timestamp {
    get {return _storage._expirationTime ?? Proto_Timestamp()}
    set {_uniqueStorage()._expirationTime = newValue}
  }
  /// Returns true if `expirationTime` has been explicitly set.
  public var hasExpirationTime: Bool {return _storage._expirationTime != nil}
  /// Clears the value of `expirationTime`. Subsequent reads from it will return its default value.
  public mutating func clearExpirationTime() {_uniqueStorage()._expirationTime = nil}

  public var receiverSigRequiredField: OneOf_ReceiverSigRequiredField? {
    get {return _storage._receiverSigRequiredField}
    set {_uniqueStorage()._receiverSigRequiredField = newValue}
  }

  ///*
  /// Removed to distinguish between unset and a default value.<br/>
  /// Do NOT use this field to set a false value because the server cannot
  /// distinguish from the default value. Use receiverSigRequiredWrapper
  /// field for this purpose.
  ///
  /// NOTE: This field was marked as deprecated in the .proto file.
  public var receiverSigRequired: Bool {
    get {
      if case .receiverSigRequired(let v)? = _storage._receiverSigRequiredField {return v}
      return false
    }
    set {_uniqueStorage()._receiverSigRequiredField = .receiverSigRequired(newValue)}
  }

  ///*
  /// A flag indicating the account holder must authorize all incoming
  /// token transfers.
  /// <p>
  /// If this flag is set then any transaction that would result in adding
  /// hbar or other tokens to this account balance MUST be signed by the
  /// identifying key of this account (that is, the `key` field).
  public var receiverSigRequiredWrapper: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {
      if case .receiverSigRequiredWrapper(let v)? = _storage._receiverSigRequiredField {return v}
      return SwiftProtobuf.Google_Protobuf_BoolValue()
    }
    set {_uniqueStorage()._receiverSigRequiredField = .receiverSigRequiredWrapper(newValue)}
  }

  ///*
  /// A short description of this Account.
  /// <p>
  /// This value, if set, MUST NOT exceed `transaction.maxMemoUtf8Bytes`
  /// (default 100) bytes when encoded as UTF-8.
  public var memo: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._memo ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._memo = newValue}
  }
  /// Returns true if `memo` has been explicitly set.
  public var hasMemo: Bool {return _storage._memo != nil}
  /// Clears the value of `memo`. Subsequent reads from it will return its default value.
  public mutating func clearMemo() {_uniqueStorage()._memo = nil}

  ///*
  /// A maximum number of tokens that can be auto-associated
  /// with this account.<br/>
  /// By default this value is 0 for all accounts except for automatically
  /// created accounts (i.e smart contracts) which default to -1.
  /// <p>
  /// If this value is `0`, then this account MUST manually associate to
  /// a token before holding or transacting in that token.<br/>
  /// This value MAY also be `-1` to indicate no limit.<br/>
  /// If set, this value MUST NOT be less than `-1`.<br/>
  public var maxAutomaticTokenAssociations: SwiftProtobuf.Google_Protobuf_Int32Value {
    get {return _storage._maxAutomaticTokenAssociations ?? SwiftProtobuf.Google_Protobuf_Int32Value()}
    set {_uniqueStorage()._maxAutomaticTokenAssociations = newValue}
  }
  /// Returns true if `maxAutomaticTokenAssociations` has been explicitly set.
  public var hasMaxAutomaticTokenAssociations: Bool {return _storage._maxAutomaticTokenAssociations != nil}
  /// Clears the value of `maxAutomaticTokenAssociations`. Subsequent reads from it will return its default value.
  public mutating func clearMaxAutomaticTokenAssociations() {_uniqueStorage()._maxAutomaticTokenAssociations = nil}

  public var stakedID: OneOf_StakedID? {
    get {return _storage._stakedID}
    set {_uniqueStorage()._stakedID = newValue}
  }

  ///*
  /// ID of the account to which this account is staking its balances.
  /// <p>
  /// If this account is not currently staking its balances, then this
  /// field, if set, MUST be the sentinel value of `0.0.0`.
  public var stakedAccountID: Proto_AccountID {
    get {
      if case .stakedAccountID(let v)? = _storage._stakedID {return v}
      return Proto_AccountID()
    }
    set {_uniqueStorage()._stakedID = .stakedAccountID(newValue)}
  }

  ///*
  /// ID of the node this account is staked to.
  /// <p>
  /// If this account is not currently staking its balances, then this
  /// field, if set, SHALL be the sentinel value of `-1`.<br/>
  /// Wallet software SHOULD surface staking issues to users and provide a
  /// simple mechanism to update staking to a new node ID in the event the
  /// prior staked node ID ceases to be valid.
  public var stakedNodeID: Int64 {
    get {
      if case .stakedNodeID(let v)? = _storage._stakedID {return v}
      return 0
    }
    set {_uniqueStorage()._stakedID = .stakedNodeID(newValue)}
  }

  ///*
  /// A boolean indicating that this account has chosen to decline rewards for
  /// staking its balances.
  /// <p>
  /// This account MAY still stake its balances, but SHALL NOT receive reward
  /// payments for doing so, if this value is set, and `true`.
  public var declineReward: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _storage._declineReward ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_uniqueStorage()._declineReward = newValue}
  }
  /// Returns true if `declineReward` has been explicitly set.
  public var hasDeclineReward: Bool {return _storage._declineReward != nil}
  /// Clears the value of `declineReward`. Subsequent reads from it will return its default value.
  public mutating func clearDeclineReward() {_uniqueStorage()._declineReward = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// This entire oneOf is deprecated, and the concept is not implemented.
  public enum OneOf_SendRecordThresholdField: Equatable, Sendable {
    ///*
    /// Removed prior to the first available history, and may be related
    /// to an early design dead-end.<br/>
    /// The new threshold amount (in tinybars) for which an account record is
    /// created for any send/withdraw transaction
    ///
    /// NOTE: This field was marked as deprecated in the .proto file.
    case sendRecordThreshold(UInt64)
    ///*
    /// Removed prior to the first available history, and may be related
    /// to an early design dead-end.<br/>
    /// The new threshold amount (in tinybars) for which an account record is
    /// created for any send/withdraw transaction
    ///
    /// NOTE: This field was marked as deprecated in the .proto file.
    case sendRecordThresholdWrapper(SwiftProtobuf.Google_Protobuf_UInt64Value)

  }

  /// This entire oneOf is deprecated, and the concept is not implemented.
  public enum OneOf_ReceiveRecordThresholdField: Equatable, Sendable {
    ///*
    /// Removed prior to the first available history, and may be related
    /// to an early design dead-end.<br/>
    /// The new threshold amount (in tinybars) for which an account record is
    /// created for any receive/deposit transaction.
    ///
    /// NOTE: This field was marked as deprecated in the .proto file.
    case receiveRecordThreshold(UInt64)
    ///*
    /// Removed prior to the first available history, and may be related
    /// to an early design dead-end.<br/>
    /// The new threshold amount (in tinybars) for which an account record is
    /// created for any receive/deposit transaction.
    ///
    /// NOTE: This field was marked as deprecated in the .proto file.
    case receiveRecordThresholdWrapper(SwiftProtobuf.Google_Protobuf_UInt64Value)

  }

  public enum OneOf_ReceiverSigRequiredField: Equatable, Sendable {
    ///*
    /// Removed to distinguish between unset and a default value.<br/>
    /// Do NOT use this field to set a false value because the server cannot
    /// distinguish from the default value. Use receiverSigRequiredWrapper
    /// field for this purpose.
    ///
    /// NOTE: This field was marked as deprecated in the .proto file.
    case receiverSigRequired(Bool)
    ///*
    /// A flag indicating the account holder must authorize all incoming
    /// token transfers.
    /// <p>
    /// If this flag is set then any transaction that would result in adding
    /// hbar or other tokens to this account balance MUST be signed by the
    /// identifying key of this account (that is, the `key` field).
    case receiverSigRequiredWrapper(SwiftProtobuf.Google_Protobuf_BoolValue)

  }

  public enum OneOf_StakedID: Equatable, Sendable {
    ///*
    /// ID of the account to which this account is staking its balances.
    /// <p>
    /// If this account is not currently staking its balances, then this
    /// field, if set, MUST be the sentinel value of `0.0.0`.
    case stakedAccountID(Proto_AccountID)
    ///*
    /// ID of the node this account is staked to.
    /// <p>
    /// If this account is not currently staking its balances, then this
    /// field, if set, SHALL be the sentinel value of `-1`.<br/>
    /// Wallet software SHOULD surface staking issues to users and provide a
    /// simple mechanism to update staking to a new node ID in the event the
    /// prior staked node ID ceases to be valid.
    case stakedNodeID(Int64)

  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "proto"

extension Proto_CryptoUpdateTransactionBody: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CryptoUpdateTransactionBody"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "accountIDToUpdate"),
    3: .same(proto: "key"),
    4: .same(proto: "proxyAccountID"),
    5: .same(proto: "proxyFraction"),
    6: .same(proto: "sendRecordThreshold"),
    11: .same(proto: "sendRecordThresholdWrapper"),
    7: .same(proto: "receiveRecordThreshold"),
    12: .same(proto: "receiveRecordThresholdWrapper"),
    8: .same(proto: "autoRenewPeriod"),
    9: .same(proto: "expirationTime"),
    10: .same(proto: "receiverSigRequired"),
    13: .same(proto: "receiverSigRequiredWrapper"),
    14: .same(proto: "memo"),
    15: .standard(proto: "max_automatic_token_associations"),
    16: .standard(proto: "staked_account_id"),
    17: .standard(proto: "staked_node_id"),
    18: .standard(proto: "decline_reward"),
  ]

  fileprivate class _StorageClass {
    var _accountIdtoUpdate: Proto_AccountID? = nil
    var _key: Proto_Key? = nil
    var _proxyAccountID: Proto_AccountID? = nil
    var _proxyFraction: Int32 = 0
    var _sendRecordThresholdField: Proto_CryptoUpdateTransactionBody.OneOf_SendRecordThresholdField?
    var _receiveRecordThresholdField: Proto_CryptoUpdateTransactionBody.OneOf_ReceiveRecordThresholdField?
    var _autoRenewPeriod: Proto_Duration? = nil
    var _expirationTime: Proto_Timestamp? = nil
    var _receiverSigRequiredField: Proto_CryptoUpdateTransactionBody.OneOf_ReceiverSigRequiredField?
    var _memo: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _maxAutomaticTokenAssociations: SwiftProtobuf.Google_Protobuf_Int32Value? = nil
    var _stakedID: Proto_CryptoUpdateTransactionBody.OneOf_StakedID?
    var _declineReward: SwiftProtobuf.Google_Protobuf_BoolValue? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _accountIdtoUpdate = source._accountIdtoUpdate
      _key = source._key
      _proxyAccountID = source._proxyAccountID
      _proxyFraction = source._proxyFraction
      _sendRecordThresholdField = source._sendRecordThresholdField
      _receiveRecordThresholdField = source._receiveRecordThresholdField
      _autoRenewPeriod = source._autoRenewPeriod
      _expirationTime = source._expirationTime
      _receiverSigRequiredField = source._receiverSigRequiredField
      _memo = source._memo
      _maxAutomaticTokenAssociations = source._maxAutomaticTokenAssociations
      _stakedID = source._stakedID
      _declineReward = source._declineReward
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._accountIdtoUpdate) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._key) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._proxyAccountID) }()
        case 5: try { try decoder.decodeSingularInt32Field(value: &_storage._proxyFraction) }()
        case 6: try {
          var v: UInt64?
          try decoder.decodeSingularUInt64Field(value: &v)
          if let v = v {
            if _storage._sendRecordThresholdField != nil {try decoder.handleConflictingOneOf()}
            _storage._sendRecordThresholdField = .sendRecordThreshold(v)
          }
        }()
        case 7: try {
          var v: UInt64?
          try decoder.decodeSingularUInt64Field(value: &v)
          if let v = v {
            if _storage._receiveRecordThresholdField != nil {try decoder.handleConflictingOneOf()}
            _storage._receiveRecordThresholdField = .receiveRecordThreshold(v)
          }
        }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._autoRenewPeriod) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._expirationTime) }()
        case 10: try {
          var v: Bool?
          try decoder.decodeSingularBoolField(value: &v)
          if let v = v {
            if _storage._receiverSigRequiredField != nil {try decoder.handleConflictingOneOf()}
            _storage._receiverSigRequiredField = .receiverSigRequired(v)
          }
        }()
        case 11: try {
          var v: SwiftProtobuf.Google_Protobuf_UInt64Value?
          var hadOneofValue = false
          if let current = _storage._sendRecordThresholdField {
            hadOneofValue = true
            if case .sendRecordThresholdWrapper(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._sendRecordThresholdField = .sendRecordThresholdWrapper(v)
          }
        }()
        case 12: try {
          var v: SwiftProtobuf.Google_Protobuf_UInt64Value?
          var hadOneofValue = false
          if let current = _storage._receiveRecordThresholdField {
            hadOneofValue = true
            if case .receiveRecordThresholdWrapper(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._receiveRecordThresholdField = .receiveRecordThresholdWrapper(v)
          }
        }()
        case 13: try {
          var v: SwiftProtobuf.Google_Protobuf_BoolValue?
          var hadOneofValue = false
          if let current = _storage._receiverSigRequiredField {
            hadOneofValue = true
            if case .receiverSigRequiredWrapper(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._receiverSigRequiredField = .receiverSigRequiredWrapper(v)
          }
        }()
        case 14: try { try decoder.decodeSingularMessageField(value: &_storage._memo) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._maxAutomaticTokenAssociations) }()
        case 16: try {
          var v: Proto_AccountID?
          var hadOneofValue = false
          if let current = _storage._stakedID {
            hadOneofValue = true
            if case .stakedAccountID(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._stakedID = .stakedAccountID(v)
          }
        }()
        case 17: try {
          var v: Int64?
          try decoder.decodeSingularInt64Field(value: &v)
          if let v = v {
            if _storage._stakedID != nil {try decoder.handleConflictingOneOf()}
            _storage._stakedID = .stakedNodeID(v)
          }
        }()
        case 18: try { try decoder.decodeSingularMessageField(value: &_storage._declineReward) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._accountIdtoUpdate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._key {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._proxyAccountID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      if _storage._proxyFraction != 0 {
        try visitor.visitSingularInt32Field(value: _storage._proxyFraction, fieldNumber: 5)
      }
      try { if case .sendRecordThreshold(let v)? = _storage._sendRecordThresholdField {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 6)
      } }()
      try { if case .receiveRecordThreshold(let v)? = _storage._receiveRecordThresholdField {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._autoRenewPeriod {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._expirationTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      try { if case .receiverSigRequired(let v)? = _storage._receiverSigRequiredField {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 10)
      } }()
      try { if case .sendRecordThresholdWrapper(let v)? = _storage._sendRecordThresholdField {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
      try { if case .receiveRecordThresholdWrapper(let v)? = _storage._receiveRecordThresholdField {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
      try { if case .receiverSigRequiredWrapper(let v)? = _storage._receiverSigRequiredField {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._memo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._maxAutomaticTokenAssociations {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      } }()
      switch _storage._stakedID {
      case .stakedAccountID?: try {
        guard case .stakedAccountID(let v)? = _storage._stakedID else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      }()
      case .stakedNodeID?: try {
        guard case .stakedNodeID(let v)? = _storage._stakedID else { preconditionFailure() }
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 17)
      }()
      case nil: break
      }
      try { if let v = _storage._declineReward {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_CryptoUpdateTransactionBody, rhs: Proto_CryptoUpdateTransactionBody) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._accountIdtoUpdate != rhs_storage._accountIdtoUpdate {return false}
        if _storage._key != rhs_storage._key {return false}
        if _storage._proxyAccountID != rhs_storage._proxyAccountID {return false}
        if _storage._proxyFraction != rhs_storage._proxyFraction {return false}
        if _storage._sendRecordThresholdField != rhs_storage._sendRecordThresholdField {return false}
        if _storage._receiveRecordThresholdField != rhs_storage._receiveRecordThresholdField {return false}
        if _storage._autoRenewPeriod != rhs_storage._autoRenewPeriod {return false}
        if _storage._expirationTime != rhs_storage._expirationTime {return false}
        if _storage._receiverSigRequiredField != rhs_storage._receiverSigRequiredField {return false}
        if _storage._memo != rhs_storage._memo {return false}
        if _storage._maxAutomaticTokenAssociations != rhs_storage._maxAutomaticTokenAssociations {return false}
        if _storage._stakedID != rhs_storage._stakedID {return false}
        if _storage._declineReward != rhs_storage._declineReward {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
