// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: crypto_approve_allowance.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

///*
/// # Approve Allowance
/// This transaction body provides a mechanism to add "allowance" entries
/// for an account. These allowances enable one account to spend or transfer
/// token balances (for fungible/common tokens), individual tokens (for
/// non-fungible/unique tokens), or all non-fungible tokens owned by the
/// account, now or in the future (if `approved_for_all` is set).
///
/// ### Keywords
/// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
/// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
/// document are to be interpreted as described in
/// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
/// [RFC8174](https://www.ietf.org/rfc/rfc8174).

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
/// Create ("Approve") allowances for one account to transfer tokens owned
/// by a different account.<br/>
/// An allowance permits a "spender" account to independently transfer tokens
/// owned by a separate "owner" account. Each such allowance permits spending
/// any amount, up to a specified limit, for fungible/common tokens; a single
/// specified non-fungible/unique token, or all non-fungible/unique tokens
/// of a particular token type held by the "owner" account.
///
/// If the "owner" account is not specified for any allowance in this
/// transaction (the `owner` field is not set), the `payer` account for this
/// transaction SHALL be owner for that allowance.<br/>
/// Each `owner` account specified in any allowance approved in this
/// transaction MUST sign this transaction.<br/>
/// If the `amount` field for any fungible/common allowance in this
/// transaction is `0`, then that allowance SHOULD match an existing,
/// previously approved, allowance which SHALL be removed.<br/>
/// There are three lists in this message. Each list MAY be empty, but
/// _at least one_ list MUST contain _at least one_ entry.
///
/// Example for the `payer` rule.<br/>
///  - Given an account `0.0.X` that pays for this transaction, and owner
///    is not specified in an allowance of `200` HBAR to spender account
///    `0.0.Y`. At consensus the spender account `0.0.Y` will have a new
///    allowance to spend `200` HBAR from the balance of account `0.0.X`.
///
/// ### Block Stream Effects
/// None
public struct Proto_CryptoApproveAllowanceTransactionBody: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// List of hbar allowances approved by the account owner.
  /// <p>
  /// This list MAY be empty, provided at least one other list is
  /// not empty.
  public var cryptoAllowances: [Proto_CryptoAllowance] = []

  ///*
  /// List of non-fungible token allowances approved by the account owner.
  /// <p>
  /// This list MAY be empty, provided at least one other list is
  /// not empty.
  public var nftAllowances: [Proto_NftAllowance] = []

  ///*
  /// List of fungible token allowances approved by the account owner.
  /// <p>
  /// This list MAY be empty, provided at least one other list is
  /// not empty.
  public var tokenAllowances: [Proto_TokenAllowance] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///*
/// An approved allowance of hbar transfers.
/// This message specifies one allowance for a single, unique, combination
/// of owner, spender, and amount.
///
/// If `owner` is not set, the effective `owner` SHALL be the `payer` for the
/// enclosing transaction.<br/>
/// The `spender` MUST be specified and MUST be a valid account.<br/>
/// The `amount` MUST be a whole number, and SHOULD be greater than `0` unless
/// this allowance is intended to _remove_ a previously approved allowance.
public struct Proto_CryptoAllowance: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// An owner account identifier.<br/>
  /// This is the account identifier of the account granting an allowance
  /// for the `spender` to transfer tokens held by this account.
  public var owner: Proto_AccountID {
    get {return _owner ?? Proto_AccountID()}
    set {_owner = newValue}
  }
  /// Returns true if `owner` has been explicitly set.
  public var hasOwner: Bool {return self._owner != nil}
  /// Clears the value of `owner`. Subsequent reads from it will return its default value.
  public mutating func clearOwner() {self._owner = nil}

  ///*
  /// A spender account identifier.<br/>
  /// This is the account identifier of the account permitted to transfer
  /// tokens held by the `owner`.
  public var spender: Proto_AccountID {
    get {return _spender ?? Proto_AccountID()}
    set {_spender = newValue}
  }
  /// Returns true if `spender` has been explicitly set.
  public var hasSpender: Bool {return self._spender != nil}
  /// Clears the value of `spender`. Subsequent reads from it will return its default value.
  public mutating func clearSpender() {self._spender = nil}

  ///*
  /// An amount of tinybar (10<sup>-8</sup> HBAR).<br/>
  /// This is the amount of HBAR held by the `owner` that the
  /// `spender` is permitted to transfer.
  /// <p>
  /// This value MUST be a whole number.<br/>
  /// This value MUST be greater than 0 to create a new allowance.<br/>
  /// This value MAY be exactly `0` to _remove_ an existing allowance.<br/>
  public var amount: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _owner: Proto_AccountID? = nil
  fileprivate var _spender: Proto_AccountID? = nil
}

///*
/// An approved allowance of non-fungible tokens.<br/>
/// This type of allowance may permit transfers for one or more individual
/// unique tokens, or may permit transfers for all unique tokens of the
/// specified type.
///
/// If `owner` is not set, the effective `owner` SHALL be the `payer` for the
/// enclosing transaction.<br/>
/// The `spender` MUST be specified and MUST be a valid account.<br/>
/// If `approve_for_all` is set, then `serial_numbers` SHOULD be empty
/// and SHALL be ignored.
/// If `approve_for_all` is unset, then `serial_numbers` MUST NOT be empty.
public struct Proto_NftAllowance: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// A token identifier.<br/>
  /// This identifies the type of token the `spender` is permitted to
  /// transfer from the `owner`.
  /// <p>
  /// The identified token type MUST be a non-fungible/unique token.
  public var tokenID: Proto_TokenID {
    get {return _tokenID ?? Proto_TokenID()}
    set {_tokenID = newValue}
  }
  /// Returns true if `tokenID` has been explicitly set.
  public var hasTokenID: Bool {return self._tokenID != nil}
  /// Clears the value of `tokenID`. Subsequent reads from it will return its default value.
  public mutating func clearTokenID() {self._tokenID = nil}

  ///*
  /// An owner account identifier.<br/>
  /// This is the account identifier of the account granting an allowance
  /// for the `spender` to transfer tokens held by this account.
  public var owner: Proto_AccountID {
    get {return _owner ?? Proto_AccountID()}
    set {_owner = newValue}
  }
  /// Returns true if `owner` has been explicitly set.
  public var hasOwner: Bool {return self._owner != nil}
  /// Clears the value of `owner`. Subsequent reads from it will return its default value.
  public mutating func clearOwner() {self._owner = nil}

  ///*
  /// A spender account identifier.<br/>
  /// This is the account identifier of the account permitted to transfer
  /// tokens held by the `owner`.
  public var spender: Proto_AccountID {
    get {return _spender ?? Proto_AccountID()}
    set {_spender = newValue}
  }
  /// Returns true if `spender` has been explicitly set.
  public var hasSpender: Bool {return self._spender != nil}
  /// Clears the value of `spender`. Subsequent reads from it will return its default value.
  public mutating func clearSpender() {self._spender = nil}

  ///*
  /// A list of token serial numbers.<br/>
  /// The list of serial numbers that the spender is permitted to transfer.
  /// <p>
  /// The `owner` MUST currently hold each token identified in this list.
  public var serialNumbers: [Int64] = []

  ///*
  /// A flag indicating this allowance applies to all tokens of the
  /// specified (non-fungible/unique) type.
  /// <p>
  /// If true, the `spender` SHALL be permitted to transfer any or all
  /// of the `owner`'s tokens of the specified token type.
  /// This SHALL apply not only to currently owned tokens, but to all
  /// such tokens acquired in the future, unless the
  /// allowance is `delete`d.
  public var approvedForAll: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _approvedForAll ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_approvedForAll = newValue}
  }
  /// Returns true if `approvedForAll` has been explicitly set.
  public var hasApprovedForAll: Bool {return self._approvedForAll != nil}
  /// Clears the value of `approvedForAll`. Subsequent reads from it will return its default value.
  public mutating func clearApprovedForAll() {self._approvedForAll = nil}

  ///*
  /// A spender-owner account identifier.<br/>
  /// This account identifier identifies a `spender` for whom an existing
  /// `approved_for_all` allowance was previously created. This enables
  /// an account with such broad access to grant allowances to transfer
  /// individual tokens from the original owner without involving that
  /// original owner.
  /// <p>
  /// If this is set, the account identified MUST sign this transaction, but
  /// the `owner` account MAY NOT sign this transaction.<br/>
  /// If this is set, there MUST exist an active `approved_for_all`
  /// allowance from the `owner` for the `delegating_spender` to transfer
  /// all tokens of the type identified by the `tokenId` field.<br/>
  /// If this value is set, the `approved_for_all` flag MUST be `false`.
  public var delegatingSpender: Proto_AccountID {
    get {return _delegatingSpender ?? Proto_AccountID()}
    set {_delegatingSpender = newValue}
  }
  /// Returns true if `delegatingSpender` has been explicitly set.
  public var hasDelegatingSpender: Bool {return self._delegatingSpender != nil}
  /// Clears the value of `delegatingSpender`. Subsequent reads from it will return its default value.
  public mutating func clearDelegatingSpender() {self._delegatingSpender = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _tokenID: Proto_TokenID? = nil
  fileprivate var _owner: Proto_AccountID? = nil
  fileprivate var _spender: Proto_AccountID? = nil
  fileprivate var _approvedForAll: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
  fileprivate var _delegatingSpender: Proto_AccountID? = nil
}

///*
/// An approved allowance of fungible/common token transfers.
/// This message specifies one allowance for a single, unique, combination
/// of token, owner, spender, and amount.
///
/// If `owner` is not set, the effective `owner` SHALL be the `payer` for the
/// enclosing transaction.<br/>
/// The `tokenId` MUST be specified and MUST be a valid
/// fungible/common token type.<br/>
/// The `spender` MUST be specified and MUST be a valid account.<br/>
/// The `amount` MUST be a whole number, and SHOULD be greater than `0` unless
/// this allowance is intended to _remove_ a previously approved allowance.
public struct Proto_TokenAllowance: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// A token identifier.<br/>
  /// This identifies the type of token the `spender` is permitted to
  /// transfer from the `owner`.
  /// <p>
  /// The identified token type MUST be a fungible/common token.
  public var tokenID: Proto_TokenID {
    get {return _tokenID ?? Proto_TokenID()}
    set {_tokenID = newValue}
  }
  /// Returns true if `tokenID` has been explicitly set.
  public var hasTokenID: Bool {return self._tokenID != nil}
  /// Clears the value of `tokenID`. Subsequent reads from it will return its default value.
  public mutating func clearTokenID() {self._tokenID = nil}

  ///*
  /// An owner account identifier.<br/>
  /// This is the account identifier of the account granting an allowance
  /// for the `spender` to transfer tokens held by this account.
  public var owner: Proto_AccountID {
    get {return _owner ?? Proto_AccountID()}
    set {_owner = newValue}
  }
  /// Returns true if `owner` has been explicitly set.
  public var hasOwner: Bool {return self._owner != nil}
  /// Clears the value of `owner`. Subsequent reads from it will return its default value.
  public mutating func clearOwner() {self._owner = nil}

  ///*
  /// A spender account identifier.<br/>
  /// This is the account identifier of the account permitted to transfer
  /// tokens held by the `owner`.
  public var spender: Proto_AccountID {
    get {return _spender ?? Proto_AccountID()}
    set {_spender = newValue}
  }
  /// Returns true if `spender` has been explicitly set.
  public var hasSpender: Bool {return self._spender != nil}
  /// Clears the value of `spender`. Subsequent reads from it will return its default value.
  public mutating func clearSpender() {self._spender = nil}

  ///*
  /// An amount of fractional tokens (10<sup>-decimals</sup> tokens).<br/>
  /// This is the amount of tokens held by the `owner` that the
  /// `spender` is permitted to transfer.
  /// <p>
  /// This value MUST be a whole number.<br/>
  /// This value MUST be greater than 0 to create a new allowance.<br/>
  /// This value MAY be exactly `0` to _remove_ an existing allowance.<br/>
  public var amount: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _tokenID: Proto_TokenID? = nil
  fileprivate var _owner: Proto_AccountID? = nil
  fileprivate var _spender: Proto_AccountID? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "proto"

extension Proto_CryptoApproveAllowanceTransactionBody: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CryptoApproveAllowanceTransactionBody"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cryptoAllowances"),
    2: .same(proto: "nftAllowances"),
    3: .same(proto: "tokenAllowances"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.cryptoAllowances) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.nftAllowances) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.tokenAllowances) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.cryptoAllowances.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.cryptoAllowances, fieldNumber: 1)
    }
    if !self.nftAllowances.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.nftAllowances, fieldNumber: 2)
    }
    if !self.tokenAllowances.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tokenAllowances, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_CryptoApproveAllowanceTransactionBody, rhs: Proto_CryptoApproveAllowanceTransactionBody) -> Bool {
    if lhs.cryptoAllowances != rhs.cryptoAllowances {return false}
    if lhs.nftAllowances != rhs.nftAllowances {return false}
    if lhs.tokenAllowances != rhs.tokenAllowances {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_CryptoAllowance: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CryptoAllowance"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "owner"),
    2: .same(proto: "spender"),
    3: .same(proto: "amount"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._owner) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._spender) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.amount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._owner {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._spender {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if self.amount != 0 {
      try visitor.visitSingularInt64Field(value: self.amount, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_CryptoAllowance, rhs: Proto_CryptoAllowance) -> Bool {
    if lhs._owner != rhs._owner {return false}
    if lhs._spender != rhs._spender {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_NftAllowance: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".NftAllowance"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tokenId"),
    2: .same(proto: "owner"),
    3: .same(proto: "spender"),
    4: .standard(proto: "serial_numbers"),
    5: .standard(proto: "approved_for_all"),
    6: .standard(proto: "delegating_spender"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._tokenID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._owner) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._spender) }()
      case 4: try { try decoder.decodeRepeatedInt64Field(value: &self.serialNumbers) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._approvedForAll) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._delegatingSpender) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._tokenID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._owner {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._spender {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.serialNumbers.isEmpty {
      try visitor.visitPackedInt64Field(value: self.serialNumbers, fieldNumber: 4)
    }
    try { if let v = self._approvedForAll {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._delegatingSpender {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_NftAllowance, rhs: Proto_NftAllowance) -> Bool {
    if lhs._tokenID != rhs._tokenID {return false}
    if lhs._owner != rhs._owner {return false}
    if lhs._spender != rhs._spender {return false}
    if lhs.serialNumbers != rhs.serialNumbers {return false}
    if lhs._approvedForAll != rhs._approvedForAll {return false}
    if lhs._delegatingSpender != rhs._delegatingSpender {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_TokenAllowance: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TokenAllowance"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tokenId"),
    2: .same(proto: "owner"),
    3: .same(proto: "spender"),
    4: .same(proto: "amount"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._tokenID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._owner) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._spender) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.amount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._tokenID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._owner {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._spender {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if self.amount != 0 {
      try visitor.visitSingularInt64Field(value: self.amount, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_TokenAllowance, rhs: Proto_TokenAllowance) -> Bool {
    if lhs._tokenID != rhs._tokenID {return false}
    if lhs._owner != rhs._owner {return false}
    if lhs._spender != rhs._spender {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
