///*
/// # Address Book Service API
/// GRPC service definitions for the Hedera Address Book Service (HABS).
///
/// ### Keywords
/// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
/// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
/// document are to be interpreted as described in
/// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
/// [RFC8174](https://www.ietf.org/rfc/rfc8174).

// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: services/address_book_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf

// MARK: - proto.AddressBookService

/// Namespace containing generated types for the "proto.AddressBookService" service.
public enum Proto_AddressBookService {
    /// Service descriptor for the "proto.AddressBookService" service.
    public static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.AddressBookService")
    /// Namespace for method metadata.
    public enum Method {
        /// Namespace for "createNode" metadata.
        public enum createNode {
            /// Request type for "createNode".
            public typealias Input = Proto_Transaction
            /// Response type for "createNode".
            public typealias Output = Proto_TransactionResponse
            /// Descriptor for "createNode".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.AddressBookService"),
                method: "createNode"
            )
        }
        /// Namespace for "deleteNode" metadata.
        public enum deleteNode {
            /// Request type for "deleteNode".
            public typealias Input = Proto_Transaction
            /// Response type for "deleteNode".
            public typealias Output = Proto_TransactionResponse
            /// Descriptor for "deleteNode".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.AddressBookService"),
                method: "deleteNode"
            )
        }
        /// Namespace for "updateNode" metadata.
        public enum updateNode {
            /// Request type for "updateNode".
            public typealias Input = Proto_Transaction
            /// Response type for "updateNode".
            public typealias Output = Proto_TransactionResponse
            /// Descriptor for "updateNode".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.AddressBookService"),
                method: "updateNode"
            )
        }
        /// Descriptors for all methods in the "proto.AddressBookService" service.
        public static let descriptors: [GRPCCore.MethodDescriptor] = [
            createNode.descriptor,
            deleteNode.descriptor,
            updateNode.descriptor
        ]
    }
}

extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "proto.AddressBookService" service.
    public static let proto_AddressBookService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.AddressBookService")
}

// MARK: proto.AddressBookService (server)

extension Proto_AddressBookService {
    /// Streaming variant of the service protocol for the "proto.AddressBookService" service.
    ///
    /// This protocol is the lowest-level of the service protocols generated for this service
    /// giving you the most flexibility over the implementation of your service. This comes at
    /// the cost of more verbose and less strict APIs. Each RPC requires you to implement it in
    /// terms of a request stream and response stream. Where only a single request or response
    /// message is expected, you are responsible for enforcing this invariant is maintained.
    ///
    /// Where possible, prefer using the stricter, less-verbose ``ServiceProtocol``
    /// or ``SimpleServiceProtocol`` instead.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > The Address Book service provides the ability for Hedera network node
    /// > administrators to add, update, and remove consensus nodes. This addition,
    /// > update, or removal of a consensus node requires governing council approval,
    /// > but each node operator may update their own operational attributes without
    /// > additional approval, reducing overhead for routine operations.
    /// > 
    /// > Most operations are `privileged operations` and require governing council
    /// > approval.
    /// > 
    /// > ### For a node creation transaction.
    /// > - The node operator SHALL create a `createNode` transaction.
    /// >    - The node operator MUST sign this transaction with the `Key`
    /// >      set as the `admin_key` for the new `Node`.
    /// >    - The node operator SHALL deliver the signed transaction to the Hedera
    /// >      council representative.
    /// >    - The Hedera council representative SHALL arrange for council members to
    /// >      review and sign the transaction.
    /// >    - Once sufficient council members have signed the transaction, the
    /// >      Hedera council representative SHALL submit the transaction to the
    /// >      network.
    /// > - Upon receipt of a valid and signed node creation transaction the network
    /// >   software SHALL
    /// >    - Validate the threshold signature for the Hedera governing council
    /// >    - Validate the signature of the `Key` provided as the new `admin_key`
    /// >      for the `Node`.
    /// >    - Create the new node in state, this new node SHALL NOT be active in the
    /// >      network at this time.
    /// >    - When executing the next `freeze` transaction with `freeze_type` set to
    /// >      `PREPARE_UPGRADE`, update network configuration and bring the
    /// >      new node to an active status within the network. The node to be added
    /// >      SHALL be active in the network following this upgrade.
    /// > 
    /// > ### For a node deletion transaction.
    /// > - The node operator or Hedera council representative SHALL create a
    /// >   `deleteNode` transaction.
    /// >    - If the node operator creates the transaction
    /// >       - The node operator MUST sign this transaction with the `Key`
    /// >         set as the `admin_key` for the existing `Node`.
    /// >       - The node operator SHALL deliver the signed transaction to the Hedera
    /// >         council representative.
    /// >    - The Hedera council representative SHALL arrange for council members to
    /// >      review and sign the transaction.
    /// >    - Once sufficient council members have signed the transaction, the
    /// >      Hedera council representative SHALL submit the transaction to the
    /// >      network.
    /// > - Upon receipt of a valid and signed node deletion transaction the network
    /// >   software SHALL
    /// >    - Validate the signature for the Hedera governing council
    /// >    - Remove the existing node from network state. The node SHALL still
    /// >      be active in the network at this time.
    /// >    - When executing the next `freeze` transaction with `freeze_type` set to
    /// >      `PREPARE_UPGRADE`, update network configuration and remove the
    /// >      node to be deleted from the network. The node to be deleted SHALL NOT
    /// >      be active in the network following this upgrade.
    /// > 
    /// > ### For a node update transaction.
    /// > - The node operator SHALL create an `updateNode` transaction.
    /// >    - The node operator MUST sign this transaction with the active `key`
    /// >      assigned as the `admin_key`.
    /// >    - The node operator SHALL submit the transaction to the
    /// >      network.  Hedera council approval SHALL NOT be sought for this
    /// >      transaction
    /// > - Upon receipt of a valid and signed node update transaction the network
    /// >   software SHALL
    /// >    - If the transaction modifies the value of the "node account",
    /// >       - Validate the signature of the active `key` for the account
    /// >         assigned as the _current_ "node account".
    /// >       - Validate the signature of the active `key` for the account to be
    /// >         assigned as the _new_ "node account".
    /// >    - Modify the node information held in network state with the changes
    /// >      requested in the update transaction. The node changes SHALL NOT be
    /// >      applied to network configuration, and SHALL NOT affect network
    /// >      operation at this time.
    /// >    - When executing the next `freeze` transaction with `freeze_type` set to
    /// >      `PREPARE_UPGRADE`, update network configuration according to the
    /// >      modified information in network state. The requested changes SHALL
    /// >      affect network operation following this upgrade.
    public protocol StreamingServiceProtocol: GRPCCore.RegistrableRPCService {
        /// Handle the "createNode" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > A transaction to create a new consensus node in the network
        /// > address book.
        /// > <p>
        /// > This transaction, once complete, SHALL add a new consensus node to the
        /// > network state.<br/>
        /// > The new consensus node SHALL remain in state, but SHALL NOT participate
        /// > in network consensus until the network updates the network configuration.
        /// > <p>
        /// > Hedera governing council authorization is REQUIRED for this transaction.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Transaction` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_TransactionResponse` messages.
        func createNode(
            request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse>

        /// Handle the "deleteNode" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > A transaction to remove a consensus node from the network address
        /// > book.
        /// > <p>
        /// > This transaction, once complete, SHALL remove the identified consensus
        /// > node from the network state.
        /// > <p>
        /// > Hedera governing council authorization is REQUIRED for this transaction.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Transaction` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_TransactionResponse` messages.
        func deleteNode(
            request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse>

        /// Handle the "updateNode" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > A transaction to update an existing consensus node from the network
        /// > address book.
        /// > <p>
        /// > This transaction, once complete, SHALL modify the identified consensus
        /// > node state as requested.
        /// > <p>
        /// > This transaction is authorized by the node operator
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Transaction` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_TransactionResponse` messages.
        func updateNode(
            request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse>
    }

    /// Service protocol for the "proto.AddressBookService" service.
    ///
    /// This protocol is higher level than ``StreamingServiceProtocol`` but lower level than
    /// the ``SimpleServiceProtocol``, it provides access to request and response metadata and
    /// trailing response metadata. If you don't need these then consider using
    /// the ``SimpleServiceProtocol``. If you need fine grained control over your RPCs then
    /// use ``StreamingServiceProtocol``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > The Address Book service provides the ability for Hedera network node
    /// > administrators to add, update, and remove consensus nodes. This addition,
    /// > update, or removal of a consensus node requires governing council approval,
    /// > but each node operator may update their own operational attributes without
    /// > additional approval, reducing overhead for routine operations.
    /// > 
    /// > Most operations are `privileged operations` and require governing council
    /// > approval.
    /// > 
    /// > ### For a node creation transaction.
    /// > - The node operator SHALL create a `createNode` transaction.
    /// >    - The node operator MUST sign this transaction with the `Key`
    /// >      set as the `admin_key` for the new `Node`.
    /// >    - The node operator SHALL deliver the signed transaction to the Hedera
    /// >      council representative.
    /// >    - The Hedera council representative SHALL arrange for council members to
    /// >      review and sign the transaction.
    /// >    - Once sufficient council members have signed the transaction, the
    /// >      Hedera council representative SHALL submit the transaction to the
    /// >      network.
    /// > - Upon receipt of a valid and signed node creation transaction the network
    /// >   software SHALL
    /// >    - Validate the threshold signature for the Hedera governing council
    /// >    - Validate the signature of the `Key` provided as the new `admin_key`
    /// >      for the `Node`.
    /// >    - Create the new node in state, this new node SHALL NOT be active in the
    /// >      network at this time.
    /// >    - When executing the next `freeze` transaction with `freeze_type` set to
    /// >      `PREPARE_UPGRADE`, update network configuration and bring the
    /// >      new node to an active status within the network. The node to be added
    /// >      SHALL be active in the network following this upgrade.
    /// > 
    /// > ### For a node deletion transaction.
    /// > - The node operator or Hedera council representative SHALL create a
    /// >   `deleteNode` transaction.
    /// >    - If the node operator creates the transaction
    /// >       - The node operator MUST sign this transaction with the `Key`
    /// >         set as the `admin_key` for the existing `Node`.
    /// >       - The node operator SHALL deliver the signed transaction to the Hedera
    /// >         council representative.
    /// >    - The Hedera council representative SHALL arrange for council members to
    /// >      review and sign the transaction.
    /// >    - Once sufficient council members have signed the transaction, the
    /// >      Hedera council representative SHALL submit the transaction to the
    /// >      network.
    /// > - Upon receipt of a valid and signed node deletion transaction the network
    /// >   software SHALL
    /// >    - Validate the signature for the Hedera governing council
    /// >    - Remove the existing node from network state. The node SHALL still
    /// >      be active in the network at this time.
    /// >    - When executing the next `freeze` transaction with `freeze_type` set to
    /// >      `PREPARE_UPGRADE`, update network configuration and remove the
    /// >      node to be deleted from the network. The node to be deleted SHALL NOT
    /// >      be active in the network following this upgrade.
    /// > 
    /// > ### For a node update transaction.
    /// > - The node operator SHALL create an `updateNode` transaction.
    /// >    - The node operator MUST sign this transaction with the active `key`
    /// >      assigned as the `admin_key`.
    /// >    - The node operator SHALL submit the transaction to the
    /// >      network.  Hedera council approval SHALL NOT be sought for this
    /// >      transaction
    /// > - Upon receipt of a valid and signed node update transaction the network
    /// >   software SHALL
    /// >    - If the transaction modifies the value of the "node account",
    /// >       - Validate the signature of the active `key` for the account
    /// >         assigned as the _current_ "node account".
    /// >       - Validate the signature of the active `key` for the account to be
    /// >         assigned as the _new_ "node account".
    /// >    - Modify the node information held in network state with the changes
    /// >      requested in the update transaction. The node changes SHALL NOT be
    /// >      applied to network configuration, and SHALL NOT affect network
    /// >      operation at this time.
    /// >    - When executing the next `freeze` transaction with `freeze_type` set to
    /// >      `PREPARE_UPGRADE`, update network configuration according to the
    /// >      modified information in network state. The requested changes SHALL
    /// >      affect network operation following this upgrade.
    public protocol ServiceProtocol: Proto_AddressBookService.StreamingServiceProtocol {
        /// Handle the "createNode" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > A transaction to create a new consensus node in the network
        /// > address book.
        /// > <p>
        /// > This transaction, once complete, SHALL add a new consensus node to the
        /// > network state.<br/>
        /// > The new consensus node SHALL remain in state, but SHALL NOT participate
        /// > in network consensus until the network updates the network configuration.
        /// > <p>
        /// > Hedera governing council authorization is REQUIRED for this transaction.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_TransactionResponse` message.
        func createNode(
            request: GRPCCore.ServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse>

        /// Handle the "deleteNode" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > A transaction to remove a consensus node from the network address
        /// > book.
        /// > <p>
        /// > This transaction, once complete, SHALL remove the identified consensus
        /// > node from the network state.
        /// > <p>
        /// > Hedera governing council authorization is REQUIRED for this transaction.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_TransactionResponse` message.
        func deleteNode(
            request: GRPCCore.ServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse>

        /// Handle the "updateNode" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > A transaction to update an existing consensus node from the network
        /// > address book.
        /// > <p>
        /// > This transaction, once complete, SHALL modify the identified consensus
        /// > node state as requested.
        /// > <p>
        /// > This transaction is authorized by the node operator
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_TransactionResponse` message.
        func updateNode(
            request: GRPCCore.ServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse>
    }

    /// Simple service protocol for the "proto.AddressBookService" service.
    ///
    /// This is the highest level protocol for the service. The API is the easiest to use but
    /// doesn't provide access to request or response metadata. If you need access to these
    /// then use ``ServiceProtocol`` instead.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > The Address Book service provides the ability for Hedera network node
    /// > administrators to add, update, and remove consensus nodes. This addition,
    /// > update, or removal of a consensus node requires governing council approval,
    /// > but each node operator may update their own operational attributes without
    /// > additional approval, reducing overhead for routine operations.
    /// > 
    /// > Most operations are `privileged operations` and require governing council
    /// > approval.
    /// > 
    /// > ### For a node creation transaction.
    /// > - The node operator SHALL create a `createNode` transaction.
    /// >    - The node operator MUST sign this transaction with the `Key`
    /// >      set as the `admin_key` for the new `Node`.
    /// >    - The node operator SHALL deliver the signed transaction to the Hedera
    /// >      council representative.
    /// >    - The Hedera council representative SHALL arrange for council members to
    /// >      review and sign the transaction.
    /// >    - Once sufficient council members have signed the transaction, the
    /// >      Hedera council representative SHALL submit the transaction to the
    /// >      network.
    /// > - Upon receipt of a valid and signed node creation transaction the network
    /// >   software SHALL
    /// >    - Validate the threshold signature for the Hedera governing council
    /// >    - Validate the signature of the `Key` provided as the new `admin_key`
    /// >      for the `Node`.
    /// >    - Create the new node in state, this new node SHALL NOT be active in the
    /// >      network at this time.
    /// >    - When executing the next `freeze` transaction with `freeze_type` set to
    /// >      `PREPARE_UPGRADE`, update network configuration and bring the
    /// >      new node to an active status within the network. The node to be added
    /// >      SHALL be active in the network following this upgrade.
    /// > 
    /// > ### For a node deletion transaction.
    /// > - The node operator or Hedera council representative SHALL create a
    /// >   `deleteNode` transaction.
    /// >    - If the node operator creates the transaction
    /// >       - The node operator MUST sign this transaction with the `Key`
    /// >         set as the `admin_key` for the existing `Node`.
    /// >       - The node operator SHALL deliver the signed transaction to the Hedera
    /// >         council representative.
    /// >    - The Hedera council representative SHALL arrange for council members to
    /// >      review and sign the transaction.
    /// >    - Once sufficient council members have signed the transaction, the
    /// >      Hedera council representative SHALL submit the transaction to the
    /// >      network.
    /// > - Upon receipt of a valid and signed node deletion transaction the network
    /// >   software SHALL
    /// >    - Validate the signature for the Hedera governing council
    /// >    - Remove the existing node from network state. The node SHALL still
    /// >      be active in the network at this time.
    /// >    - When executing the next `freeze` transaction with `freeze_type` set to
    /// >      `PREPARE_UPGRADE`, update network configuration and remove the
    /// >      node to be deleted from the network. The node to be deleted SHALL NOT
    /// >      be active in the network following this upgrade.
    /// > 
    /// > ### For a node update transaction.
    /// > - The node operator SHALL create an `updateNode` transaction.
    /// >    - The node operator MUST sign this transaction with the active `key`
    /// >      assigned as the `admin_key`.
    /// >    - The node operator SHALL submit the transaction to the
    /// >      network.  Hedera council approval SHALL NOT be sought for this
    /// >      transaction
    /// > - Upon receipt of a valid and signed node update transaction the network
    /// >   software SHALL
    /// >    - If the transaction modifies the value of the "node account",
    /// >       - Validate the signature of the active `key` for the account
    /// >         assigned as the _current_ "node account".
    /// >       - Validate the signature of the active `key` for the account to be
    /// >         assigned as the _new_ "node account".
    /// >    - Modify the node information held in network state with the changes
    /// >      requested in the update transaction. The node changes SHALL NOT be
    /// >      applied to network configuration, and SHALL NOT affect network
    /// >      operation at this time.
    /// >    - When executing the next `freeze` transaction with `freeze_type` set to
    /// >      `PREPARE_UPGRADE`, update network configuration according to the
    /// >      modified information in network state. The requested changes SHALL
    /// >      affect network operation following this upgrade.
    public protocol SimpleServiceProtocol: Proto_AddressBookService.ServiceProtocol {
        /// Handle the "createNode" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > A transaction to create a new consensus node in the network
        /// > address book.
        /// > <p>
        /// > This transaction, once complete, SHALL add a new consensus node to the
        /// > network state.<br/>
        /// > The new consensus node SHALL remain in state, but SHALL NOT participate
        /// > in network consensus until the network updates the network configuration.
        /// > <p>
        /// > Hedera governing council authorization is REQUIRED for this transaction.
        ///
        /// - Parameters:
        ///   - request: A `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_TransactionResponse` to respond with.
        func createNode(
            request: Proto_Transaction,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_TransactionResponse

        /// Handle the "deleteNode" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > A transaction to remove a consensus node from the network address
        /// > book.
        /// > <p>
        /// > This transaction, once complete, SHALL remove the identified consensus
        /// > node from the network state.
        /// > <p>
        /// > Hedera governing council authorization is REQUIRED for this transaction.
        ///
        /// - Parameters:
        ///   - request: A `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_TransactionResponse` to respond with.
        func deleteNode(
            request: Proto_Transaction,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_TransactionResponse

        /// Handle the "updateNode" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > A transaction to update an existing consensus node from the network
        /// > address book.
        /// > <p>
        /// > This transaction, once complete, SHALL modify the identified consensus
        /// > node state as requested.
        /// > <p>
        /// > This transaction is authorized by the node operator
        ///
        /// - Parameters:
        ///   - request: A `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_TransactionResponse` to respond with.
        func updateNode(
            request: Proto_Transaction,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_TransactionResponse
    }
}

// Default implementation of 'registerMethods(with:)'.
extension Proto_AddressBookService.StreamingServiceProtocol {
    public func registerMethods<Transport>(with router: inout GRPCCore.RPCRouter<Transport>) where Transport: GRPCCore.ServerTransport {
        router.registerHandler(
            forMethod: Proto_AddressBookService.Method.createNode.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Transaction>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_TransactionResponse>(),
            handler: { request, context in
                try await self.createNode(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_AddressBookService.Method.deleteNode.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Transaction>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_TransactionResponse>(),
            handler: { request, context in
                try await self.deleteNode(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_AddressBookService.Method.updateNode.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Transaction>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_TransactionResponse>(),
            handler: { request, context in
                try await self.updateNode(
                    request: request,
                    context: context
                )
            }
        )
    }
}

// Default implementation of streaming methods from 'StreamingServiceProtocol'.
extension Proto_AddressBookService.ServiceProtocol {
    public func createNode(
        request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse> {
        let response = try await self.createNode(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func deleteNode(
        request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse> {
        let response = try await self.deleteNode(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func updateNode(
        request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse> {
        let response = try await self.updateNode(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }
}

// Default implementation of methods from 'ServiceProtocol'.
extension Proto_AddressBookService.SimpleServiceProtocol {
    public func createNode(
        request: GRPCCore.ServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse> {
        return GRPCCore.ServerResponse<Proto_TransactionResponse>(
            message: try await self.createNode(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func deleteNode(
        request: GRPCCore.ServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse> {
        return GRPCCore.ServerResponse<Proto_TransactionResponse>(
            message: try await self.deleteNode(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func updateNode(
        request: GRPCCore.ServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse> {
        return GRPCCore.ServerResponse<Proto_TransactionResponse>(
            message: try await self.updateNode(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }
}

// MARK: proto.AddressBookService (client)

extension Proto_AddressBookService {
    /// Generated client protocol for the "proto.AddressBookService" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > The Address Book service provides the ability for Hedera network node
    /// > administrators to add, update, and remove consensus nodes. This addition,
    /// > update, or removal of a consensus node requires governing council approval,
    /// > but each node operator may update their own operational attributes without
    /// > additional approval, reducing overhead for routine operations.
    /// > 
    /// > Most operations are `privileged operations` and require governing council
    /// > approval.
    /// > 
    /// > ### For a node creation transaction.
    /// > - The node operator SHALL create a `createNode` transaction.
    /// >    - The node operator MUST sign this transaction with the `Key`
    /// >      set as the `admin_key` for the new `Node`.
    /// >    - The node operator SHALL deliver the signed transaction to the Hedera
    /// >      council representative.
    /// >    - The Hedera council representative SHALL arrange for council members to
    /// >      review and sign the transaction.
    /// >    - Once sufficient council members have signed the transaction, the
    /// >      Hedera council representative SHALL submit the transaction to the
    /// >      network.
    /// > - Upon receipt of a valid and signed node creation transaction the network
    /// >   software SHALL
    /// >    - Validate the threshold signature for the Hedera governing council
    /// >    - Validate the signature of the `Key` provided as the new `admin_key`
    /// >      for the `Node`.
    /// >    - Create the new node in state, this new node SHALL NOT be active in the
    /// >      network at this time.
    /// >    - When executing the next `freeze` transaction with `freeze_type` set to
    /// >      `PREPARE_UPGRADE`, update network configuration and bring the
    /// >      new node to an active status within the network. The node to be added
    /// >      SHALL be active in the network following this upgrade.
    /// > 
    /// > ### For a node deletion transaction.
    /// > - The node operator or Hedera council representative SHALL create a
    /// >   `deleteNode` transaction.
    /// >    - If the node operator creates the transaction
    /// >       - The node operator MUST sign this transaction with the `Key`
    /// >         set as the `admin_key` for the existing `Node`.
    /// >       - The node operator SHALL deliver the signed transaction to the Hedera
    /// >         council representative.
    /// >    - The Hedera council representative SHALL arrange for council members to
    /// >      review and sign the transaction.
    /// >    - Once sufficient council members have signed the transaction, the
    /// >      Hedera council representative SHALL submit the transaction to the
    /// >      network.
    /// > - Upon receipt of a valid and signed node deletion transaction the network
    /// >   software SHALL
    /// >    - Validate the signature for the Hedera governing council
    /// >    - Remove the existing node from network state. The node SHALL still
    /// >      be active in the network at this time.
    /// >    - When executing the next `freeze` transaction with `freeze_type` set to
    /// >      `PREPARE_UPGRADE`, update network configuration and remove the
    /// >      node to be deleted from the network. The node to be deleted SHALL NOT
    /// >      be active in the network following this upgrade.
    /// > 
    /// > ### For a node update transaction.
    /// > - The node operator SHALL create an `updateNode` transaction.
    /// >    - The node operator MUST sign this transaction with the active `key`
    /// >      assigned as the `admin_key`.
    /// >    - The node operator SHALL submit the transaction to the
    /// >      network.  Hedera council approval SHALL NOT be sought for this
    /// >      transaction
    /// > - Upon receipt of a valid and signed node update transaction the network
    /// >   software SHALL
    /// >    - If the transaction modifies the value of the "node account",
    /// >       - Validate the signature of the active `key` for the account
    /// >         assigned as the _current_ "node account".
    /// >       - Validate the signature of the active `key` for the account to be
    /// >         assigned as the _new_ "node account".
    /// >    - Modify the node information held in network state with the changes
    /// >      requested in the update transaction. The node changes SHALL NOT be
    /// >      applied to network configuration, and SHALL NOT affect network
    /// >      operation at this time.
    /// >    - When executing the next `freeze` transaction with `freeze_type` set to
    /// >      `PREPARE_UPGRADE`, update network configuration according to the
    /// >      modified information in network state. The requested changes SHALL
    /// >      affect network operation following this upgrade.
    public protocol ClientProtocol: Sendable {
        /// Call the "createNode" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > A transaction to create a new consensus node in the network
        /// > address book.
        /// > <p>
        /// > This transaction, once complete, SHALL add a new consensus node to the
        /// > network state.<br/>
        /// > The new consensus node SHALL remain in state, but SHALL NOT participate
        /// > in network consensus until the network updates the network configuration.
        /// > <p>
        /// > Hedera governing council authorization is REQUIRED for this transaction.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func createNode<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "deleteNode" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > A transaction to remove a consensus node from the network address
        /// > book.
        /// > <p>
        /// > This transaction, once complete, SHALL remove the identified consensus
        /// > node from the network state.
        /// > <p>
        /// > Hedera governing council authorization is REQUIRED for this transaction.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteNode<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "updateNode" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > A transaction to update an existing consensus node from the network
        /// > address book.
        /// > <p>
        /// > This transaction, once complete, SHALL modify the identified consensus
        /// > node state as requested.
        /// > <p>
        /// > This transaction is authorized by the node operator
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func updateNode<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "proto.AddressBookService" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > The Address Book service provides the ability for Hedera network node
    /// > administrators to add, update, and remove consensus nodes. This addition,
    /// > update, or removal of a consensus node requires governing council approval,
    /// > but each node operator may update their own operational attributes without
    /// > additional approval, reducing overhead for routine operations.
    /// > 
    /// > Most operations are `privileged operations` and require governing council
    /// > approval.
    /// > 
    /// > ### For a node creation transaction.
    /// > - The node operator SHALL create a `createNode` transaction.
    /// >    - The node operator MUST sign this transaction with the `Key`
    /// >      set as the `admin_key` for the new `Node`.
    /// >    - The node operator SHALL deliver the signed transaction to the Hedera
    /// >      council representative.
    /// >    - The Hedera council representative SHALL arrange for council members to
    /// >      review and sign the transaction.
    /// >    - Once sufficient council members have signed the transaction, the
    /// >      Hedera council representative SHALL submit the transaction to the
    /// >      network.
    /// > - Upon receipt of a valid and signed node creation transaction the network
    /// >   software SHALL
    /// >    - Validate the threshold signature for the Hedera governing council
    /// >    - Validate the signature of the `Key` provided as the new `admin_key`
    /// >      for the `Node`.
    /// >    - Create the new node in state, this new node SHALL NOT be active in the
    /// >      network at this time.
    /// >    - When executing the next `freeze` transaction with `freeze_type` set to
    /// >      `PREPARE_UPGRADE`, update network configuration and bring the
    /// >      new node to an active status within the network. The node to be added
    /// >      SHALL be active in the network following this upgrade.
    /// > 
    /// > ### For a node deletion transaction.
    /// > - The node operator or Hedera council representative SHALL create a
    /// >   `deleteNode` transaction.
    /// >    - If the node operator creates the transaction
    /// >       - The node operator MUST sign this transaction with the `Key`
    /// >         set as the `admin_key` for the existing `Node`.
    /// >       - The node operator SHALL deliver the signed transaction to the Hedera
    /// >         council representative.
    /// >    - The Hedera council representative SHALL arrange for council members to
    /// >      review and sign the transaction.
    /// >    - Once sufficient council members have signed the transaction, the
    /// >      Hedera council representative SHALL submit the transaction to the
    /// >      network.
    /// > - Upon receipt of a valid and signed node deletion transaction the network
    /// >   software SHALL
    /// >    - Validate the signature for the Hedera governing council
    /// >    - Remove the existing node from network state. The node SHALL still
    /// >      be active in the network at this time.
    /// >    - When executing the next `freeze` transaction with `freeze_type` set to
    /// >      `PREPARE_UPGRADE`, update network configuration and remove the
    /// >      node to be deleted from the network. The node to be deleted SHALL NOT
    /// >      be active in the network following this upgrade.
    /// > 
    /// > ### For a node update transaction.
    /// > - The node operator SHALL create an `updateNode` transaction.
    /// >    - The node operator MUST sign this transaction with the active `key`
    /// >      assigned as the `admin_key`.
    /// >    - The node operator SHALL submit the transaction to the
    /// >      network.  Hedera council approval SHALL NOT be sought for this
    /// >      transaction
    /// > - Upon receipt of a valid and signed node update transaction the network
    /// >   software SHALL
    /// >    - If the transaction modifies the value of the "node account",
    /// >       - Validate the signature of the active `key` for the account
    /// >         assigned as the _current_ "node account".
    /// >       - Validate the signature of the active `key` for the account to be
    /// >         assigned as the _new_ "node account".
    /// >    - Modify the node information held in network state with the changes
    /// >      requested in the update transaction. The node changes SHALL NOT be
    /// >      applied to network configuration, and SHALL NOT affect network
    /// >      operation at this time.
    /// >    - When executing the next `freeze` transaction with `freeze_type` set to
    /// >      `PREPARE_UPGRADE`, update network configuration according to the
    /// >      modified information in network state. The requested changes SHALL
    /// >      affect network operation following this upgrade.
    public struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        public init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "createNode" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > A transaction to create a new consensus node in the network
        /// > address book.
        /// > <p>
        /// > This transaction, once complete, SHALL add a new consensus node to the
        /// > network state.<br/>
        /// > The new consensus node SHALL remain in state, but SHALL NOT participate
        /// > in network consensus until the network updates the network configuration.
        /// > <p>
        /// > Hedera governing council authorization is REQUIRED for this transaction.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func createNode<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_AddressBookService.Method.createNode.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "deleteNode" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > A transaction to remove a consensus node from the network address
        /// > book.
        /// > <p>
        /// > This transaction, once complete, SHALL remove the identified consensus
        /// > node from the network state.
        /// > <p>
        /// > Hedera governing council authorization is REQUIRED for this transaction.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func deleteNode<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_AddressBookService.Method.deleteNode.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "updateNode" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > A transaction to update an existing consensus node from the network
        /// > address book.
        /// > <p>
        /// > This transaction, once complete, SHALL modify the identified consensus
        /// > node state as requested.
        /// > <p>
        /// > This transaction is authorized by the node operator
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func updateNode<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_AddressBookService.Method.updateNode.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
extension Proto_AddressBookService.ClientProtocol {
    /// Call the "createNode" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > A transaction to create a new consensus node in the network
    /// > address book.
    /// > <p>
    /// > This transaction, once complete, SHALL add a new consensus node to the
    /// > network state.<br/>
    /// > The new consensus node SHALL remain in state, but SHALL NOT participate
    /// > in network consensus until the network updates the network configuration.
    /// > <p>
    /// > Hedera governing council authorization is REQUIRED for this transaction.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Transaction` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createNode<Result>(
        request: GRPCCore.ClientRequest<Proto_Transaction>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.createNode(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Transaction>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_TransactionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "deleteNode" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > A transaction to remove a consensus node from the network address
    /// > book.
    /// > <p>
    /// > This transaction, once complete, SHALL remove the identified consensus
    /// > node from the network state.
    /// > <p>
    /// > Hedera governing council authorization is REQUIRED for this transaction.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Transaction` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteNode<Result>(
        request: GRPCCore.ClientRequest<Proto_Transaction>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteNode(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Transaction>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_TransactionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "updateNode" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > A transaction to update an existing consensus node from the network
    /// > address book.
    /// > <p>
    /// > This transaction, once complete, SHALL modify the identified consensus
    /// > node state as requested.
    /// > <p>
    /// > This transaction is authorized by the node operator
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Transaction` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func updateNode<Result>(
        request: GRPCCore.ClientRequest<Proto_Transaction>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.updateNode(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Transaction>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_TransactionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
extension Proto_AddressBookService.ClientProtocol {
    /// Call the "createNode" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > A transaction to create a new consensus node in the network
    /// > address book.
    /// > <p>
    /// > This transaction, once complete, SHALL add a new consensus node to the
    /// > network state.<br/>
    /// > The new consensus node SHALL remain in state, but SHALL NOT participate
    /// > in network consensus until the network updates the network configuration.
    /// > <p>
    /// > Hedera governing council authorization is REQUIRED for this transaction.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createNode<Result>(
        _ message: Proto_Transaction,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Transaction>(
            message: message,
            metadata: metadata
        )
        return try await self.createNode(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "deleteNode" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > A transaction to remove a consensus node from the network address
    /// > book.
    /// > <p>
    /// > This transaction, once complete, SHALL remove the identified consensus
    /// > node from the network state.
    /// > <p>
    /// > Hedera governing council authorization is REQUIRED for this transaction.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteNode<Result>(
        _ message: Proto_Transaction,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Transaction>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteNode(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "updateNode" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > A transaction to update an existing consensus node from the network
    /// > address book.
    /// > <p>
    /// > This transaction, once complete, SHALL modify the identified consensus
    /// > node state as requested.
    /// > <p>
    /// > This transaction is authorized by the node operator
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func updateNode<Result>(
        _ message: Proto_Transaction,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Transaction>(
            message: message,
            metadata: metadata
        )
        return try await self.updateNode(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}