// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: services/token_update.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

///*
/// # Token Update
/// Modify the characteristics of an existing token. Most changes require that
/// the transaction be signed by an `admin_key`, and if that key is not valid
/// the only change permitted is to extend the token expiration.
///
/// ### Keywords
/// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
/// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
/// document are to be interpreted as described in
/// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
/// [RFC8174](https://www.ietf.org/rfc/rfc8174).

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
/// Update an existing token.
///
/// This transaction SHALL NOT update any field that is not set.<br/>
/// Most changes MUST be signed by the current `admin_key` of the token. If the
/// token does not currently have a valid `admin_key`, then this transaction
/// MUST NOT set any value other than `expiry` or a non-admin key.<br/>
/// If the `treasury` is set to a new account, the new account MUST sign this
/// transaction.<br/>
/// If the `treasury` is set to a new account for a _non-fungible/unique_ token,
/// The current treasury MUST NOT hold any tokens, or the network configuration
/// property `tokens.nfts.useTreasuryWildcards` MUST be set.
///
/// #### Requirements for Keys
/// Any of the key values may be changed, even without an admin key, but the
/// key to be changed MUST have an existing valid key assigned, and both the
/// current key and the new key MUST sign the transaction.<br/>
/// A key value MAY be set to an empty `KeyList`. In this case the existing
/// key MUST sign this transaction, but the new value is not a valid key, and the
/// update SHALL effectively remove the existing key.
///
/// ### Block Stream Effects
/// None
public struct Proto_TokenUpdateTransactionBody: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// A token identifier.
  /// <p>
  /// This SHALL identify the token type to delete.<br/>
  /// The identified token MUST exist, and MUST NOT be deleted.<br/>
  /// If any field other than `expiry` is set, the identified token MUST
  /// have a valid `admin_key`.
  public var token: Proto_TokenID {
    get {return _storage._token ?? Proto_TokenID()}
    set {_uniqueStorage()._token = newValue}
  }
  /// Returns true if `token` has been explicitly set.
  public var hasToken: Bool {return _storage._token != nil}
  /// Clears the value of `token`. Subsequent reads from it will return its default value.
  public mutating func clearToken() {_uniqueStorage()._token = nil}

  ///*
  /// A new symbol to use for the token.
  /// <p>
  /// This value, if set, MUST NOT exceed 100 bytes when encoded as UTF-8.<br/>
  /// This value, if set, MUST NOT contain the Unicode NUL codepoint.
  public var symbol: String {
    get {return _storage._symbol}
    set {_uniqueStorage()._symbol = newValue}
  }

  ///*
  /// A new name for the token.<br/>
  /// This is generally the "full name" displayed in wallet software.
  /// <p>
  /// This value, if set, MUST NOT exceed 100 bytes when encoded as UTF-8.<br/>
  /// This value, if set, MUST NOT contain the Unicode NUL codepoint.
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  ///*
  /// A new treasury account identifier.
  /// <p>
  /// If set,
  /// - The identified account SHALL be designated the "treasury" for the
  ///   token, and all tokens "minted" SHALL be delivered to that account
  ///   following this transaction.<br/>
  /// - The identified account MUST exist, MUST NOT be expired, MUST NOT be
  ///   deleted, and SHOULD have a non-zero HBAR balance.<br/>
  /// - The identified account SHALL be associated to this token.
  /// - The full balance of this token held by the prior treasury account
  ///   SHALL be transferred to the new treasury account, if the token type
  ///   is fungible/common.
  /// - If the token type is non-fungible/unique, the previous treasury
  ///   account MUST NOT hold any tokens of this type.
  /// - The new treasury account key MUST sign this transaction.
  public var treasury: Proto_AccountID {
    get {return _storage._treasury ?? Proto_AccountID()}
    set {_uniqueStorage()._treasury = newValue}
  }
  /// Returns true if `treasury` has been explicitly set.
  public var hasTreasury: Bool {return _storage._treasury != nil}
  /// Clears the value of `treasury`. Subsequent reads from it will return its default value.
  public mutating func clearTreasury() {_uniqueStorage()._treasury = nil}

  ///*
  /// An Hedera key for token administration.
  /// <p>
  /// This key, if set, SHALL have administrative authority for this token and
  /// MAY authorize token update and/or token delete transactions.<br/>
  /// If this key is set to an empty `KeyList`, this token SHALL be
  /// immutable thereafter, except for expiration and renewal.<br/>
  /// If set, this key MUST be a valid key or an empty `KeyList`.<br/>
  /// If set to a valid key, the previous key and new key MUST both
  /// sign this transaction.
  public var adminKey: Proto_Key {
    get {return _storage._adminKey ?? Proto_Key()}
    set {_uniqueStorage()._adminKey = newValue}
  }
  /// Returns true if `adminKey` has been explicitly set.
  public var hasAdminKey: Bool {return _storage._adminKey != nil}
  /// Clears the value of `adminKey`. Subsequent reads from it will return its default value.
  public mutating func clearAdminKey() {_uniqueStorage()._adminKey = nil}

  ///*
  /// An Hedera key for managing account KYC.
  /// <p>
  /// This key, if set, SHALL have KYC authority for this token and
  /// MAY authorize transactions to grant or revoke KYC for accounts.<br/>
  /// If this key is not set, or is an empty `KeyList`, KYC status for this
  /// token SHALL NOT be granted or revoked for any account.<br/>
  /// If this key is removed after granting KYC, those grants SHALL remain
  /// and cannot be revoked.<br/>
  /// If set, this key MUST be a valid key or an empty `KeyList`.<br/>
  /// If set to a valid key, the previous key and new key MUST both
  /// sign this transaction.
  public var kycKey: Proto_Key {
    get {return _storage._kycKey ?? Proto_Key()}
    set {_uniqueStorage()._kycKey = newValue}
  }
  /// Returns true if `kycKey` has been explicitly set.
  public var hasKycKey: Bool {return _storage._kycKey != nil}
  /// Clears the value of `kycKey`. Subsequent reads from it will return its default value.
  public mutating func clearKycKey() {_uniqueStorage()._kycKey = nil}

  ///*
  /// An Hedera key for managing asset "freeze".
  /// <p>
  /// This key, if set, SHALL have "freeze" authority for this token and
  /// MAY authorize transactions to freeze or unfreeze accounts
  /// with respect to this token.<br/>
  /// If this key is set to an empty `KeyList`, this token
  /// SHALL NOT be frozen or unfrozen for any account.<br/>
  /// If this key is removed after freezing accounts, those accounts
  /// SHALL remain frozen and cannot be unfrozen.<br/>
  /// If set, this key MUST be a valid key or an empty `KeyList`.<br/>
  /// If set to a valid key, the previous key and new key MUST both
  /// sign this transaction.
  public var freezeKey: Proto_Key {
    get {return _storage._freezeKey ?? Proto_Key()}
    set {_uniqueStorage()._freezeKey = newValue}
  }
  /// Returns true if `freezeKey` has been explicitly set.
  public var hasFreezeKey: Bool {return _storage._freezeKey != nil}
  /// Clears the value of `freezeKey`. Subsequent reads from it will return its default value.
  public mutating func clearFreezeKey() {_uniqueStorage()._freezeKey = nil}

  ///*
  /// An Hedera key for wiping tokens from accounts.
  /// <p>
  /// This key, if set, SHALL have "wipe" authority for this token and
  /// MAY authorize transactions to "wipe" any amount of this token from
  /// any account, effectively burning the tokens "wiped".<br/>
  /// If this key is set to an empty `KeyList`, it SHALL NOT be
  /// possible to "wipe" this token from an account.<br/>
  /// If set, this key MUST be a valid key or an empty `KeyList`.<br/>
  /// If set to a valid key, the previous key and new key MUST both
  /// sign this transaction.
  public var wipeKey: Proto_Key {
    get {return _storage._wipeKey ?? Proto_Key()}
    set {_uniqueStorage()._wipeKey = newValue}
  }
  /// Returns true if `wipeKey` has been explicitly set.
  public var hasWipeKey: Bool {return _storage._wipeKey != nil}
  /// Clears the value of `wipeKey`. Subsequent reads from it will return its default value.
  public mutating func clearWipeKey() {_uniqueStorage()._wipeKey = nil}

  ///*
  /// An Hedera key for "minting" and "burning" tokens.
  /// <p>
  /// This key, if set, MAY authorize transactions to "mint" new tokens to
  /// be delivered to the token treasury or "burn" tokens held by the
  /// token treasury.<br/>
  /// If this key is set to an empty `KeyList`, it SHALL NOT be
  /// possible to change the supply of tokens and neither "mint" nor "burn"
  /// transactions SHALL be permitted.<br/>
  /// If set, this key MUST be a valid key or an empty `KeyList`.<br/>
  /// If set to a valid key, the previous key and new key MUST both
  /// sign this transaction.
  public var supplyKey: Proto_Key {
    get {return _storage._supplyKey ?? Proto_Key()}
    set {_uniqueStorage()._supplyKey = newValue}
  }
  /// Returns true if `supplyKey` has been explicitly set.
  public var hasSupplyKey: Bool {return _storage._supplyKey != nil}
  /// Clears the value of `supplyKey`. Subsequent reads from it will return its default value.
  public mutating func clearSupplyKey() {_uniqueStorage()._supplyKey = nil}

  ///*
  /// An identifier for the account to be charged renewal fees at the token's
  /// expiry to extend the lifetime of the token.
  /// <p>
  /// If this value is set for the identified token, the token lifetime SHALL
  /// be extended by the _smallest_ of the following at expiration:
  /// <ul>
  ///   <li>The current `autoRenewPeriod` duration.</li>
  ///   <li>The maximum duration that this account has funds to purchase.</li>
  ///   <li>The configured MAX_AUTORENEW_PERIOD at the time of automatic
  ///       renewal.</li>
  /// </ul>
  /// If this account's HBAR balance is `0` when the token must be
  /// renewed, then the token SHALL be expired, and MAY be subsequently
  /// removed from state.<br/>
  /// If this value is set, the referenced account MUST sign this
  /// transaction.
  /// <p>
  /// <blockquote>Note<blockquote>
  /// It is not currently possible to remove an automatic renewal account.
  /// Once set, it can only be replaced by a valid account.
  /// </blockquote></blockquote>
  public var autoRenewAccount: Proto_AccountID {
    get {return _storage._autoRenewAccount ?? Proto_AccountID()}
    set {_uniqueStorage()._autoRenewAccount = newValue}
  }
  /// Returns true if `autoRenewAccount` has been explicitly set.
  public var hasAutoRenewAccount: Bool {return _storage._autoRenewAccount != nil}
  /// Clears the value of `autoRenewAccount`. Subsequent reads from it will return its default value.
  public mutating func clearAutoRenewAccount() {_uniqueStorage()._autoRenewAccount = nil}

  ///*
  /// A duration between token automatic renewals.<br/>
  /// All entities in state may be charged "rent" occasionally (typically
  /// every 90 days) to prevent unnecessary growth of the ledger. This value
  /// sets the interval between such events for this token.
  /// <p>
  /// If set, this value MUST be greater than the configured
  /// `MIN_AUTORENEW_PERIOD`.<br/>
  /// If set, this value MUST be less than the configured
  /// `MAX_AUTORENEW_PERIOD`.
  public var autoRenewPeriod: Proto_Duration {
    get {return _storage._autoRenewPeriod ?? Proto_Duration()}
    set {_uniqueStorage()._autoRenewPeriod = newValue}
  }
  /// Returns true if `autoRenewPeriod` has been explicitly set.
  public var hasAutoRenewPeriod: Bool {return _storage._autoRenewPeriod != nil}
  /// Clears the value of `autoRenewPeriod`. Subsequent reads from it will return its default value.
  public mutating func clearAutoRenewPeriod() {_uniqueStorage()._autoRenewPeriod = nil}

  ///*
  /// An expiration timestamp.
  /// <p>
  /// If this value is set, the automatic renewal account is not set for the
  /// identified token, and token expiration is enabled in network
  /// configuration, this token SHALL expire when the consensus time exceeds
  /// this value, and MAY be subsequently removed from the network state.<br/>
  /// If `autoRenewAccount` is set or the `auto_renew_account_id` is set for
  /// the identified token, the token SHALL be subject to automatic renewal
  /// when the consensus time exceeds this value.
  public var expiry: Proto_Timestamp {
    get {return _storage._expiry ?? Proto_Timestamp()}
    set {_uniqueStorage()._expiry = newValue}
  }
  /// Returns true if `expiry` has been explicitly set.
  public var hasExpiry: Bool {return _storage._expiry != nil}
  /// Clears the value of `expiry`. Subsequent reads from it will return its default value.
  public mutating func clearExpiry() {_uniqueStorage()._expiry = nil}

  ///*
  /// A short description for this token.
  /// <p>
  /// This value, if set, MUST NOT exceed `transaction.maxMemoUtf8Bytes`
  /// (default 100) bytes when encoded as UTF-8.
  public var memo: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._memo ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._memo = newValue}
  }
  /// Returns true if `memo` has been explicitly set.
  public var hasMemo: Bool {return _storage._memo != nil}
  /// Clears the value of `memo`. Subsequent reads from it will return its default value.
  public mutating func clearMemo() {_uniqueStorage()._memo = nil}

  ///*
  /// An Hedera key for managing the token custom fee schedule.
  /// <p>
  /// This key, if set, MAY authorize transactions to modify the
  /// `custom_fees` for this token.<br/>
  /// If this key is set to an empty `KeyList`, the `custom_fees`
  /// for this token SHALL NOT be modified.<br/>
  /// If set, this key MUST be a valid key or an empty `KeyList`.<br/>
  /// If set to a valid key, the previous key and new key MUST both
  /// sign this transaction.
  public var feeScheduleKey: Proto_Key {
    get {return _storage._feeScheduleKey ?? Proto_Key()}
    set {_uniqueStorage()._feeScheduleKey = newValue}
  }
  /// Returns true if `feeScheduleKey` has been explicitly set.
  public var hasFeeScheduleKey: Bool {return _storage._feeScheduleKey != nil}
  /// Clears the value of `feeScheduleKey`. Subsequent reads from it will return its default value.
  public mutating func clearFeeScheduleKey() {_uniqueStorage()._feeScheduleKey = nil}

  ///*
  /// An Hedera key for managing token "pause".
  /// <p>
  /// This key, if set, SHALL have "pause" authority for this token and
  /// MAY authorize transactions to pause or unpause this token.<br/>
  /// If this key is set to an empty `KeyList`, this token
  /// SHALL NOT be paused or unpaused.<br/>
  /// If this key is removed while the token is paused, the token cannot
  /// be unpaused and SHALL remain paused.<br/>
  /// If set, this key MUST be a valid key or an empty `KeyList`.<br/>
  /// If set to a valid key, the previous key and new key MUST both
  /// sign this transaction.
  public var pauseKey: Proto_Key {
    get {return _storage._pauseKey ?? Proto_Key()}
    set {_uniqueStorage()._pauseKey = newValue}
  }
  /// Returns true if `pauseKey` has been explicitly set.
  public var hasPauseKey: Bool {return _storage._pauseKey != nil}
  /// Clears the value of `pauseKey`. Subsequent reads from it will return its default value.
  public mutating func clearPauseKey() {_uniqueStorage()._pauseKey = nil}

  ///*
  /// Token "Metadata".
  /// <p>
  /// The value, if set, MUST NOT exceed 100 bytes.<br/>
  /// <dl><dt>Examples</dt>
  ///   <dd>hcs://1/0.0.4896575</dd>
  ///   <dd>ipfs://bafkreifd7tcjjuwxxf4qkaibkj62pj4mhfuud7plwrc3pfoygt55al6syi</dd>
  /// </dl>
  public var metadata: SwiftProtobuf.Google_Protobuf_BytesValue {
    get {return _storage._metadata ?? SwiftProtobuf.Google_Protobuf_BytesValue()}
    set {_uniqueStorage()._metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  public var hasMetadata: Bool {return _storage._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  public mutating func clearMetadata() {_uniqueStorage()._metadata = nil}

  ///*
  /// An Hedera key for managing the token `metadata`.
  /// <p>
  /// This key, if set, MAY authorize transactions to modify the
  /// `metadata` for this token.<br/>
  /// If this key is set to an empty `KeyList`, the `metadata`
  /// for this token SHALL NOT be modified.<br/>
  /// If set, this key MUST be a valid key or an empty `KeyList`.<br/>
  /// If set to a valid key, the previous key and new key MUST both
  /// sign this transaction.
  public var metadataKey: Proto_Key {
    get {return _storage._metadataKey ?? Proto_Key()}
    set {_uniqueStorage()._metadataKey = newValue}
  }
  /// Returns true if `metadataKey` has been explicitly set.
  public var hasMetadataKey: Bool {return _storage._metadataKey != nil}
  /// Clears the value of `metadataKey`. Subsequent reads from it will return its default value.
  public mutating func clearMetadataKey() {_uniqueStorage()._metadataKey = nil}

  ///*
  /// Set a key validation mode.<br/>
  /// Any key may be updated by a transaction signed by the token `admin_key`.
  /// Each role key may _also_ sign a transaction to update that key.
  /// If a role key signs an update to change that role key both old
  /// and new key must sign the transaction, _unless_ this field is set
  /// to `NO_VALIDATION`, in which case the _new_ key is not required to
  /// sign the transaction (the existing key is still required).<br/>
  /// The primary intent for this field is to allow a role key (e.g. a
  /// `pause_key`) holder to "remove" that key from the token by signing
  /// a transaction to set that role key to an empty `KeyList`.
  /// <p>
  /// If set to `FULL_VALIDATION`, either the `admin_key` or _both_ current
  /// and new key MUST sign this transaction to update a "key" field for the
  /// identified token.<br/>
  /// If set to `NO_VALIDATION`, either the `admin_key` or the current
  /// key MUST sign this transaction to update a "key" field for the
  /// identified token.<br/>
  /// This field SHALL be treated as `FULL_VALIDATION` if not set.
  public var keyVerificationMode: Proto_TokenKeyValidation {
    get {return _storage._keyVerificationMode}
    set {_uniqueStorage()._keyVerificationMode = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "proto"

extension Proto_TokenUpdateTransactionBody: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TokenUpdateTransactionBody"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
    2: .same(proto: "symbol"),
    3: .same(proto: "name"),
    4: .same(proto: "treasury"),
    5: .same(proto: "adminKey"),
    6: .same(proto: "kycKey"),
    7: .same(proto: "freezeKey"),
    8: .same(proto: "wipeKey"),
    9: .same(proto: "supplyKey"),
    10: .same(proto: "autoRenewAccount"),
    11: .same(proto: "autoRenewPeriod"),
    12: .same(proto: "expiry"),
    13: .same(proto: "memo"),
    14: .standard(proto: "fee_schedule_key"),
    15: .standard(proto: "pause_key"),
    16: .same(proto: "metadata"),
    17: .standard(proto: "metadata_key"),
    18: .standard(proto: "key_verification_mode"),
  ]

  fileprivate class _StorageClass {
    var _token: Proto_TokenID? = nil
    var _symbol: String = String()
    var _name: String = String()
    var _treasury: Proto_AccountID? = nil
    var _adminKey: Proto_Key? = nil
    var _kycKey: Proto_Key? = nil
    var _freezeKey: Proto_Key? = nil
    var _wipeKey: Proto_Key? = nil
    var _supplyKey: Proto_Key? = nil
    var _autoRenewAccount: Proto_AccountID? = nil
    var _autoRenewPeriod: Proto_Duration? = nil
    var _expiry: Proto_Timestamp? = nil
    var _memo: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _feeScheduleKey: Proto_Key? = nil
    var _pauseKey: Proto_Key? = nil
    var _metadata: SwiftProtobuf.Google_Protobuf_BytesValue? = nil
    var _metadataKey: Proto_Key? = nil
    var _keyVerificationMode: Proto_TokenKeyValidation = .fullValidation

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _token = source._token
      _symbol = source._symbol
      _name = source._name
      _treasury = source._treasury
      _adminKey = source._adminKey
      _kycKey = source._kycKey
      _freezeKey = source._freezeKey
      _wipeKey = source._wipeKey
      _supplyKey = source._supplyKey
      _autoRenewAccount = source._autoRenewAccount
      _autoRenewPeriod = source._autoRenewPeriod
      _expiry = source._expiry
      _memo = source._memo
      _feeScheduleKey = source._feeScheduleKey
      _pauseKey = source._pauseKey
      _metadata = source._metadata
      _metadataKey = source._metadataKey
      _keyVerificationMode = source._keyVerificationMode
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._token) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._symbol) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._treasury) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._adminKey) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._kycKey) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._freezeKey) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._wipeKey) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._supplyKey) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._autoRenewAccount) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._autoRenewPeriod) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._expiry) }()
        case 13: try { try decoder.decodeSingularMessageField(value: &_storage._memo) }()
        case 14: try { try decoder.decodeSingularMessageField(value: &_storage._feeScheduleKey) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._pauseKey) }()
        case 16: try { try decoder.decodeSingularMessageField(value: &_storage._metadata) }()
        case 17: try { try decoder.decodeSingularMessageField(value: &_storage._metadataKey) }()
        case 18: try { try decoder.decodeSingularEnumField(value: &_storage._keyVerificationMode) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._token {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      if !_storage._symbol.isEmpty {
        try visitor.visitSingularStringField(value: _storage._symbol, fieldNumber: 2)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 3)
      }
      try { if let v = _storage._treasury {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._adminKey {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._kycKey {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._freezeKey {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._wipeKey {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._supplyKey {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._autoRenewAccount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._autoRenewPeriod {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._expiry {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._memo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._feeScheduleKey {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._pauseKey {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._metadataKey {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      } }()
      if _storage._keyVerificationMode != .fullValidation {
        try visitor.visitSingularEnumField(value: _storage._keyVerificationMode, fieldNumber: 18)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_TokenUpdateTransactionBody, rhs: Proto_TokenUpdateTransactionBody) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._token != rhs_storage._token {return false}
        if _storage._symbol != rhs_storage._symbol {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._treasury != rhs_storage._treasury {return false}
        if _storage._adminKey != rhs_storage._adminKey {return false}
        if _storage._kycKey != rhs_storage._kycKey {return false}
        if _storage._freezeKey != rhs_storage._freezeKey {return false}
        if _storage._wipeKey != rhs_storage._wipeKey {return false}
        if _storage._supplyKey != rhs_storage._supplyKey {return false}
        if _storage._autoRenewAccount != rhs_storage._autoRenewAccount {return false}
        if _storage._autoRenewPeriod != rhs_storage._autoRenewPeriod {return false}
        if _storage._expiry != rhs_storage._expiry {return false}
        if _storage._memo != rhs_storage._memo {return false}
        if _storage._feeScheduleKey != rhs_storage._feeScheduleKey {return false}
        if _storage._pauseKey != rhs_storage._pauseKey {return false}
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._metadataKey != rhs_storage._metadataKey {return false}
        if _storage._keyVerificationMode != rhs_storage._keyVerificationMode {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
