// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: services/crypto_delete_allowance.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

///*
/// # Crypto Delete Allowance
/// Delete one or more NFT allowances that permit transfer of tokens from
/// an "owner" account by a different, "spender", account.
///
/// ### Keywords
/// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
/// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
/// document are to be interpreted as described in
/// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
/// [RFC8174](https://www.ietf.org/rfc/rfc8174).

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
/// Delete one or more allowances.<br/>
/// Given one or more, previously approved, allowances for non-fungible/unique
/// tokens to be transferred by a spending account from an owning account;
/// this transaction removes a specified set of those allowances.
///
/// The owner account for each listed allowance MUST sign this transaction.<br/>
/// Allowances for HBAR cannot be removed with this transaction. The owner
/// account MUST submit a new `cryptoApproveAllowance` transaction with the
/// amount set to `0` to "remove" that allowance.<br/>
/// Allowances for fungible/common tokens cannot be removed with this
/// transaction. The owner account MUST submit a new `cryptoApproveAllowance`
/// transaction with the amount set to `0` to "remove" that allowance.<br/>
///
/// ### Block Stream Effects
/// None
public struct Proto_CryptoDeleteAllowanceTransactionBody: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// List of non-fungible/unique token allowances to remove.
  /// <p>
  /// This list MUST NOT be empty.
  public var nftAllowances: [Proto_NftRemoveAllowance] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///*
/// A single allowance for one non-fungible/unique token.
/// This is specific to removal, and the allowance is identified for that
/// specific purpose.
///
/// All fields in this message are REQUIRED.
/// The `serial_numbers` list MUST NOT be empty.
/// The combination of field values in this message MUST match existing
/// allowances for one or more individual non-fungible/unique tokens.
///
/// ### Removing an allowance that is `approve_for_all`
/// To remove an allowance that has set the `approve_for_all` flag, the
/// `owner` account must first _approve_ a **new** allowance for a specific
/// serial number using a `cryptoApproveAllowance`, and then, if desired,
/// that newly approved allowance to a specific serial number may be
/// deleted in a separate `cryptoDeleteAllowance` transaction.
public struct Proto_NftRemoveAllowance: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// A token identifier.
  /// <p>
  /// This MUST be a valid token identifier for a non-fungible/unique
  /// token type.
  public var tokenID: Proto_TokenID {
    get {return _tokenID ?? Proto_TokenID()}
    set {_tokenID = newValue}
  }
  /// Returns true if `tokenID` has been explicitly set.
  public var hasTokenID: Bool {return self._tokenID != nil}
  /// Clears the value of `tokenID`. Subsequent reads from it will return its default value.
  public mutating func clearTokenID() {self._tokenID = nil}

  ///*
  /// An `owner` account identifier.
  /// <p>
  /// This account MUST sign the transaction containing this message.
  public var owner: Proto_AccountID {
    get {return _owner ?? Proto_AccountID()}
    set {_owner = newValue}
  }
  /// Returns true if `owner` has been explicitly set.
  public var hasOwner: Bool {return self._owner != nil}
  /// Clears the value of `owner`. Subsequent reads from it will return its default value.
  public mutating func clearOwner() {self._owner = nil}

  ///*
  /// The list of serial numbers to remove allowances from.
  /// <p>
  /// This list MUST NOT be empty.
  public var serialNumbers: [Int64] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _tokenID: Proto_TokenID? = nil
  fileprivate var _owner: Proto_AccountID? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "proto"

extension Proto_CryptoDeleteAllowanceTransactionBody: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CryptoDeleteAllowanceTransactionBody"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "nftAllowances"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.nftAllowances) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.nftAllowances.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.nftAllowances, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_CryptoDeleteAllowanceTransactionBody, rhs: Proto_CryptoDeleteAllowanceTransactionBody) -> Bool {
    if lhs.nftAllowances != rhs.nftAllowances {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_NftRemoveAllowance: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".NftRemoveAllowance"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "token_id"),
    2: .same(proto: "owner"),
    3: .standard(proto: "serial_numbers"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._tokenID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._owner) }()
      case 3: try { try decoder.decodeRepeatedInt64Field(value: &self.serialNumbers) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._tokenID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._owner {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.serialNumbers.isEmpty {
      try visitor.visitPackedInt64Field(value: self.serialNumbers, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_NftRemoveAllowance, rhs: Proto_NftRemoveAllowance) -> Bool {
    if lhs._tokenID != rhs._tokenID {return false}
    if lhs._owner != rhs._owner {return false}
    if lhs.serialNumbers != rhs.serialNumbers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
