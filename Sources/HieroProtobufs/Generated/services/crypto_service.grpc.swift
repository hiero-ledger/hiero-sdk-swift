//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: services/crypto_service.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


///*
/// Transactions and queries for the Hedera Crypto Service.
///
/// Usage: instantiate `Proto_CryptoServiceClient`, then call methods of this protocol to make API calls.
public protocol Proto_CryptoServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Proto_CryptoServiceClientInterceptorFactoryProtocol? { get }

  func createAccount(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func updateAccount(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func cryptoTransfer(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func cryptoDelete(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func approveAllowances(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func deleteAllowances(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func addLiveHash(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func deleteLiveHash(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func getLiveHash(
    _ request: Proto_Query,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Query, Proto_Response>

  func getAccountRecords(
    _ request: Proto_Query,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Query, Proto_Response>

  func cryptoGetBalance(
    _ request: Proto_Query,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Query, Proto_Response>

  func getAccountInfo(
    _ request: Proto_Query,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Query, Proto_Response>

  func getTransactionReceipts(
    _ request: Proto_Query,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Query, Proto_Response>

  func getTxRecordByTxID(
    _ request: Proto_Query,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Query, Proto_Response>
}

extension Proto_CryptoServiceClientProtocol {
  public var serviceName: String {
    return "proto.CryptoService"
  }

  ///*
  /// Create a new account by submitting the transaction
  ///
  /// - Parameters:
  ///   - request: Request to send to createAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createAccount(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.createAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makecreateAccountInterceptors() ?? []
    )
  }

  ///*
  /// Update an account by submitting the transaction
  ///
  /// - Parameters:
  ///   - request: Request to send to updateAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateAccount(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.updateAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeupdateAccountInterceptors() ?? []
    )
  }

  ///*
  /// Initiate a transfer by submitting the transaction
  ///
  /// - Parameters:
  ///   - request: Request to send to cryptoTransfer.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func cryptoTransfer(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.cryptoTransfer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makecryptoTransferInterceptors() ?? []
    )
  }

  ///*
  /// Delete an account by submitting the transaction
  ///
  /// - Parameters:
  ///   - request: Request to send to cryptoDelete.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func cryptoDelete(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.cryptoDelete.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makecryptoDeleteInterceptors() ?? []
    )
  }

  ///*
  /// Add one or more approved allowances for spenders to transfer the paying
  /// account's hbar or tokens.
  ///
  /// - Parameters:
  ///   - request: Request to send to approveAllowances.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func approveAllowances(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.approveAllowances.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeapproveAllowancesInterceptors() ?? []
    )
  }

  ///*
  /// Delete one or more of the specific approved NFT serial numbers on an
  /// owner account.
  ///
  /// - Parameters:
  ///   - request: Request to send to deleteAllowances.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteAllowances(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.deleteAllowances.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makedeleteAllowancesInterceptors() ?? []
    )
  }

  ///*
  /// Add a livehash
  /// <blockquote>Important<blockquote>
  /// This transaction is obsolete, not supported, and SHALL fail with a
  /// pre-check result of `NOT_SUPPORTED`.</blockquote></blockquote>
  ///
  /// - Parameters:
  ///   - request: Request to send to addLiveHash.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func addLiveHash(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.addLiveHash.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeaddLiveHashInterceptors() ?? []
    )
  }

  ///*
  /// Delete a livehash
  /// <blockquote>Important<blockquote>
  /// This transaction is obsolete, not supported, and SHALL fail with a
  /// pre-check result of `NOT_SUPPORTED`.</blockquote></blockquote>
  ///
  /// - Parameters:
  ///   - request: Request to send to deleteLiveHash.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteLiveHash(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.deleteLiveHash.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makedeleteLiveHashInterceptors() ?? []
    )
  }

  ///*
  /// Retrieve a livehash for an account
  /// <blockquote>Important<blockquote>
  /// This query is obsolete, not supported, and SHALL fail with a pre-check
  /// result of `NOT_SUPPORTED`.</blockquote></blockquote>
  ///
  /// - Parameters:
  ///   - request: Request to send to getLiveHash.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getLiveHash(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Query, Proto_Response> {
    return self.makeUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.getLiveHash.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetLiveHashInterceptors() ?? []
    )
  }

  ///*
  /// Return all transactions in the last 180s of consensus time for which
  /// the given account was the effective payer **and** network property
  /// `ledger.keepRecordsInState` was `true`.
  ///
  /// - Parameters:
  ///   - request: Request to send to getAccountRecords.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getAccountRecords(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Query, Proto_Response> {
    return self.makeUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.getAccountRecords.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetAccountRecordsInterceptors() ?? []
    )
  }

  ///*
  /// Retrieve the balance of an account
  ///
  /// - Parameters:
  ///   - request: Request to send to cryptoGetBalance.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func cryptoGetBalance(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Query, Proto_Response> {
    return self.makeUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.cryptoGetBalance.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makecryptoGetBalanceInterceptors() ?? []
    )
  }

  ///*
  /// Retrieve the metadata of an account
  ///
  /// - Parameters:
  ///   - request: Request to send to getAccountInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getAccountInfo(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Query, Proto_Response> {
    return self.makeUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.getAccountInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetAccountInfoInterceptors() ?? []
    )
  }

  ///*
  /// Retrieve the latest receipt for a transaction that is either awaiting
  /// consensus, or reached consensus in the last 180 seconds
  ///
  /// - Parameters:
  ///   - request: Request to send to getTransactionReceipts.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getTransactionReceipts(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Query, Proto_Response> {
    return self.makeUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.getTransactionReceipts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetTransactionReceiptsInterceptors() ?? []
    )
  }

  ///*
  /// Retrieve the record of a transaction that is either awaiting consensus,
  /// or reached consensus in the last 180 seconds
  ///
  /// - Parameters:
  ///   - request: Request to send to getTxRecordByTxID.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getTxRecordByTxID(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Query, Proto_Response> {
    return self.makeUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.getTxRecordByTxID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetTxRecordByTxIDInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Proto_CryptoServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Proto_CryptoServiceNIOClient")
public final class Proto_CryptoServiceClient: Proto_CryptoServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Proto_CryptoServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Proto_CryptoServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the proto.CryptoService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Proto_CryptoServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Proto_CryptoServiceNIOClient: Proto_CryptoServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Proto_CryptoServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the proto.CryptoService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Proto_CryptoServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

///*
/// Transactions and queries for the Hedera Crypto Service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Proto_CryptoServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Proto_CryptoServiceClientInterceptorFactoryProtocol? { get }

  func makeCreateAccountCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func makeUpdateAccountCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func makeCryptoTransferCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func makeCryptoDeleteCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func makeApproveAllowancesCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func makeDeleteAllowancesCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func makeAddLiveHashCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func makeDeleteLiveHashCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func makeGetLiveHashCall(
    _ request: Proto_Query,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Query, Proto_Response>

  func makeGetAccountRecordsCall(
    _ request: Proto_Query,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Query, Proto_Response>

  func makeCryptoGetBalanceCall(
    _ request: Proto_Query,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Query, Proto_Response>

  func makeGetAccountInfoCall(
    _ request: Proto_Query,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Query, Proto_Response>

  func makeGetTransactionReceiptsCall(
    _ request: Proto_Query,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Query, Proto_Response>

  func makeGetTxRecordByTxIDCall(
    _ request: Proto_Query,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Query, Proto_Response>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Proto_CryptoServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Proto_CryptoServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: Proto_CryptoServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeCreateAccountCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeAsyncUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.createAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makecreateAccountInterceptors() ?? []
    )
  }

  public func makeUpdateAccountCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeAsyncUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.updateAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeupdateAccountInterceptors() ?? []
    )
  }

  public func makeCryptoTransferCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeAsyncUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.cryptoTransfer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makecryptoTransferInterceptors() ?? []
    )
  }

  public func makeCryptoDeleteCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeAsyncUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.cryptoDelete.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makecryptoDeleteInterceptors() ?? []
    )
  }

  public func makeApproveAllowancesCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeAsyncUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.approveAllowances.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeapproveAllowancesInterceptors() ?? []
    )
  }

  public func makeDeleteAllowancesCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeAsyncUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.deleteAllowances.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makedeleteAllowancesInterceptors() ?? []
    )
  }

  public func makeAddLiveHashCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeAsyncUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.addLiveHash.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeaddLiveHashInterceptors() ?? []
    )
  }

  public func makeDeleteLiveHashCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeAsyncUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.deleteLiveHash.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makedeleteLiveHashInterceptors() ?? []
    )
  }

  public func makeGetLiveHashCall(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Query, Proto_Response> {
    return self.makeAsyncUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.getLiveHash.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetLiveHashInterceptors() ?? []
    )
  }

  public func makeGetAccountRecordsCall(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Query, Proto_Response> {
    return self.makeAsyncUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.getAccountRecords.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetAccountRecordsInterceptors() ?? []
    )
  }

  public func makeCryptoGetBalanceCall(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Query, Proto_Response> {
    return self.makeAsyncUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.cryptoGetBalance.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makecryptoGetBalanceInterceptors() ?? []
    )
  }

  public func makeGetAccountInfoCall(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Query, Proto_Response> {
    return self.makeAsyncUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.getAccountInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetAccountInfoInterceptors() ?? []
    )
  }

  public func makeGetTransactionReceiptsCall(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Query, Proto_Response> {
    return self.makeAsyncUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.getTransactionReceipts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetTransactionReceiptsInterceptors() ?? []
    )
  }

  public func makeGetTxRecordByTxIDCall(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Query, Proto_Response> {
    return self.makeAsyncUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.getTxRecordByTxID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetTxRecordByTxIDInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Proto_CryptoServiceAsyncClientProtocol {
  public func createAccount(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_TransactionResponse {
    return try await self.performAsyncUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.createAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makecreateAccountInterceptors() ?? []
    )
  }

  public func updateAccount(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_TransactionResponse {
    return try await self.performAsyncUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.updateAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeupdateAccountInterceptors() ?? []
    )
  }

  public func cryptoTransfer(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_TransactionResponse {
    return try await self.performAsyncUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.cryptoTransfer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makecryptoTransferInterceptors() ?? []
    )
  }

  public func cryptoDelete(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_TransactionResponse {
    return try await self.performAsyncUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.cryptoDelete.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makecryptoDeleteInterceptors() ?? []
    )
  }

  public func approveAllowances(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_TransactionResponse {
    return try await self.performAsyncUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.approveAllowances.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeapproveAllowancesInterceptors() ?? []
    )
  }

  public func deleteAllowances(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_TransactionResponse {
    return try await self.performAsyncUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.deleteAllowances.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makedeleteAllowancesInterceptors() ?? []
    )
  }

  public func addLiveHash(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_TransactionResponse {
    return try await self.performAsyncUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.addLiveHash.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeaddLiveHashInterceptors() ?? []
    )
  }

  public func deleteLiveHash(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_TransactionResponse {
    return try await self.performAsyncUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.deleteLiveHash.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makedeleteLiveHashInterceptors() ?? []
    )
  }

  public func getLiveHash(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_Response {
    return try await self.performAsyncUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.getLiveHash.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetLiveHashInterceptors() ?? []
    )
  }

  public func getAccountRecords(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_Response {
    return try await self.performAsyncUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.getAccountRecords.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetAccountRecordsInterceptors() ?? []
    )
  }

  public func cryptoGetBalance(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_Response {
    return try await self.performAsyncUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.cryptoGetBalance.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makecryptoGetBalanceInterceptors() ?? []
    )
  }

  public func getAccountInfo(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_Response {
    return try await self.performAsyncUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.getAccountInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetAccountInfoInterceptors() ?? []
    )
  }

  public func getTransactionReceipts(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_Response {
    return try await self.performAsyncUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.getTransactionReceipts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetTransactionReceiptsInterceptors() ?? []
    )
  }

  public func getTxRecordByTxID(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_Response {
    return try await self.performAsyncUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.getTxRecordByTxID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetTxRecordByTxIDInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Proto_CryptoServiceAsyncClient: Proto_CryptoServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Proto_CryptoServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Proto_CryptoServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Proto_CryptoServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'createAccount'.
  func makecreateAccountInterceptors() -> [ClientInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when invoking 'updateAccount'.
  func makeupdateAccountInterceptors() -> [ClientInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when invoking 'cryptoTransfer'.
  func makecryptoTransferInterceptors() -> [ClientInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when invoking 'cryptoDelete'.
  func makecryptoDeleteInterceptors() -> [ClientInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when invoking 'approveAllowances'.
  func makeapproveAllowancesInterceptors() -> [ClientInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when invoking 'deleteAllowances'.
  func makedeleteAllowancesInterceptors() -> [ClientInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when invoking 'addLiveHash'.
  func makeaddLiveHashInterceptors() -> [ClientInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when invoking 'deleteLiveHash'.
  func makedeleteLiveHashInterceptors() -> [ClientInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when invoking 'getLiveHash'.
  func makegetLiveHashInterceptors() -> [ClientInterceptor<Proto_Query, Proto_Response>]

  /// - Returns: Interceptors to use when invoking 'getAccountRecords'.
  func makegetAccountRecordsInterceptors() -> [ClientInterceptor<Proto_Query, Proto_Response>]

  /// - Returns: Interceptors to use when invoking 'cryptoGetBalance'.
  func makecryptoGetBalanceInterceptors() -> [ClientInterceptor<Proto_Query, Proto_Response>]

  /// - Returns: Interceptors to use when invoking 'getAccountInfo'.
  func makegetAccountInfoInterceptors() -> [ClientInterceptor<Proto_Query, Proto_Response>]

  /// - Returns: Interceptors to use when invoking 'getTransactionReceipts'.
  func makegetTransactionReceiptsInterceptors() -> [ClientInterceptor<Proto_Query, Proto_Response>]

  /// - Returns: Interceptors to use when invoking 'getTxRecordByTxID'.
  func makegetTxRecordByTxIDInterceptors() -> [ClientInterceptor<Proto_Query, Proto_Response>]
}

public enum Proto_CryptoServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "CryptoService",
    fullName: "proto.CryptoService",
    methods: [
      Proto_CryptoServiceClientMetadata.Methods.createAccount,
      Proto_CryptoServiceClientMetadata.Methods.updateAccount,
      Proto_CryptoServiceClientMetadata.Methods.cryptoTransfer,
      Proto_CryptoServiceClientMetadata.Methods.cryptoDelete,
      Proto_CryptoServiceClientMetadata.Methods.approveAllowances,
      Proto_CryptoServiceClientMetadata.Methods.deleteAllowances,
      Proto_CryptoServiceClientMetadata.Methods.addLiveHash,
      Proto_CryptoServiceClientMetadata.Methods.deleteLiveHash,
      Proto_CryptoServiceClientMetadata.Methods.getLiveHash,
      Proto_CryptoServiceClientMetadata.Methods.getAccountRecords,
      Proto_CryptoServiceClientMetadata.Methods.cryptoGetBalance,
      Proto_CryptoServiceClientMetadata.Methods.getAccountInfo,
      Proto_CryptoServiceClientMetadata.Methods.getTransactionReceipts,
      Proto_CryptoServiceClientMetadata.Methods.getTxRecordByTxID,
    ]
  )

  public enum Methods {
    public static let createAccount = GRPCMethodDescriptor(
      name: "createAccount",
      path: "/proto.CryptoService/createAccount",
      type: GRPCCallType.unary
    )

    public static let updateAccount = GRPCMethodDescriptor(
      name: "updateAccount",
      path: "/proto.CryptoService/updateAccount",
      type: GRPCCallType.unary
    )

    public static let cryptoTransfer = GRPCMethodDescriptor(
      name: "cryptoTransfer",
      path: "/proto.CryptoService/cryptoTransfer",
      type: GRPCCallType.unary
    )

    public static let cryptoDelete = GRPCMethodDescriptor(
      name: "cryptoDelete",
      path: "/proto.CryptoService/cryptoDelete",
      type: GRPCCallType.unary
    )

    public static let approveAllowances = GRPCMethodDescriptor(
      name: "approveAllowances",
      path: "/proto.CryptoService/approveAllowances",
      type: GRPCCallType.unary
    )

    public static let deleteAllowances = GRPCMethodDescriptor(
      name: "deleteAllowances",
      path: "/proto.CryptoService/deleteAllowances",
      type: GRPCCallType.unary
    )

    public static let addLiveHash = GRPCMethodDescriptor(
      name: "addLiveHash",
      path: "/proto.CryptoService/addLiveHash",
      type: GRPCCallType.unary
    )

    public static let deleteLiveHash = GRPCMethodDescriptor(
      name: "deleteLiveHash",
      path: "/proto.CryptoService/deleteLiveHash",
      type: GRPCCallType.unary
    )

    public static let getLiveHash = GRPCMethodDescriptor(
      name: "getLiveHash",
      path: "/proto.CryptoService/getLiveHash",
      type: GRPCCallType.unary
    )

    public static let getAccountRecords = GRPCMethodDescriptor(
      name: "getAccountRecords",
      path: "/proto.CryptoService/getAccountRecords",
      type: GRPCCallType.unary
    )

    public static let cryptoGetBalance = GRPCMethodDescriptor(
      name: "cryptoGetBalance",
      path: "/proto.CryptoService/cryptoGetBalance",
      type: GRPCCallType.unary
    )

    public static let getAccountInfo = GRPCMethodDescriptor(
      name: "getAccountInfo",
      path: "/proto.CryptoService/getAccountInfo",
      type: GRPCCallType.unary
    )

    public static let getTransactionReceipts = GRPCMethodDescriptor(
      name: "getTransactionReceipts",
      path: "/proto.CryptoService/getTransactionReceipts",
      type: GRPCCallType.unary
    )

    public static let getTxRecordByTxID = GRPCMethodDescriptor(
      name: "getTxRecordByTxID",
      path: "/proto.CryptoService/getTxRecordByTxID",
      type: GRPCCallType.unary
    )
  }
}

///*
/// Transactions and queries for the Hedera Crypto Service.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Proto_CryptoServiceProvider: CallHandlerProvider {
  var interceptors: Proto_CryptoServiceServerInterceptorFactoryProtocol? { get }

  ///*
  /// Create a new account by submitting the transaction
  func createAccount(request: Proto_Transaction, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_TransactionResponse>

  ///*
  /// Update an account by submitting the transaction
  func updateAccount(request: Proto_Transaction, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_TransactionResponse>

  ///*
  /// Initiate a transfer by submitting the transaction
  func cryptoTransfer(request: Proto_Transaction, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_TransactionResponse>

  ///*
  /// Delete an account by submitting the transaction
  func cryptoDelete(request: Proto_Transaction, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_TransactionResponse>

  ///*
  /// Add one or more approved allowances for spenders to transfer the paying
  /// account's hbar or tokens.
  func approveAllowances(request: Proto_Transaction, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_TransactionResponse>

  ///*
  /// Delete one or more of the specific approved NFT serial numbers on an
  /// owner account.
  func deleteAllowances(request: Proto_Transaction, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_TransactionResponse>

  ///*
  /// Add a livehash
  /// <blockquote>Important<blockquote>
  /// This transaction is obsolete, not supported, and SHALL fail with a
  /// pre-check result of `NOT_SUPPORTED`.</blockquote></blockquote>
  func addLiveHash(request: Proto_Transaction, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_TransactionResponse>

  ///*
  /// Delete a livehash
  /// <blockquote>Important<blockquote>
  /// This transaction is obsolete, not supported, and SHALL fail with a
  /// pre-check result of `NOT_SUPPORTED`.</blockquote></blockquote>
  func deleteLiveHash(request: Proto_Transaction, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_TransactionResponse>

  ///*
  /// Retrieve a livehash for an account
  /// <blockquote>Important<blockquote>
  /// This query is obsolete, not supported, and SHALL fail with a pre-check
  /// result of `NOT_SUPPORTED`.</blockquote></blockquote>
  func getLiveHash(request: Proto_Query, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_Response>

  ///*
  /// Return all transactions in the last 180s of consensus time for which
  /// the given account was the effective payer **and** network property
  /// `ledger.keepRecordsInState` was `true`.
  func getAccountRecords(request: Proto_Query, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_Response>

  ///*
  /// Retrieve the balance of an account
  func cryptoGetBalance(request: Proto_Query, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_Response>

  ///*
  /// Retrieve the metadata of an account
  func getAccountInfo(request: Proto_Query, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_Response>

  ///*
  /// Retrieve the latest receipt for a transaction that is either awaiting
  /// consensus, or reached consensus in the last 180 seconds
  func getTransactionReceipts(request: Proto_Query, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_Response>

  ///*
  /// Retrieve the record of a transaction that is either awaiting consensus,
  /// or reached consensus in the last 180 seconds
  func getTxRecordByTxID(request: Proto_Query, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_Response>
}

extension Proto_CryptoServiceProvider {
  public var serviceName: Substring {
    return Proto_CryptoServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "createAccount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Transaction>(),
        responseSerializer: ProtobufSerializer<Proto_TransactionResponse>(),
        interceptors: self.interceptors?.makecreateAccountInterceptors() ?? [],
        userFunction: self.createAccount(request:context:)
      )

    case "updateAccount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Transaction>(),
        responseSerializer: ProtobufSerializer<Proto_TransactionResponse>(),
        interceptors: self.interceptors?.makeupdateAccountInterceptors() ?? [],
        userFunction: self.updateAccount(request:context:)
      )

    case "cryptoTransfer":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Transaction>(),
        responseSerializer: ProtobufSerializer<Proto_TransactionResponse>(),
        interceptors: self.interceptors?.makecryptoTransferInterceptors() ?? [],
        userFunction: self.cryptoTransfer(request:context:)
      )

    case "cryptoDelete":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Transaction>(),
        responseSerializer: ProtobufSerializer<Proto_TransactionResponse>(),
        interceptors: self.interceptors?.makecryptoDeleteInterceptors() ?? [],
        userFunction: self.cryptoDelete(request:context:)
      )

    case "approveAllowances":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Transaction>(),
        responseSerializer: ProtobufSerializer<Proto_TransactionResponse>(),
        interceptors: self.interceptors?.makeapproveAllowancesInterceptors() ?? [],
        userFunction: self.approveAllowances(request:context:)
      )

    case "deleteAllowances":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Transaction>(),
        responseSerializer: ProtobufSerializer<Proto_TransactionResponse>(),
        interceptors: self.interceptors?.makedeleteAllowancesInterceptors() ?? [],
        userFunction: self.deleteAllowances(request:context:)
      )

    case "addLiveHash":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Transaction>(),
        responseSerializer: ProtobufSerializer<Proto_TransactionResponse>(),
        interceptors: self.interceptors?.makeaddLiveHashInterceptors() ?? [],
        userFunction: self.addLiveHash(request:context:)
      )

    case "deleteLiveHash":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Transaction>(),
        responseSerializer: ProtobufSerializer<Proto_TransactionResponse>(),
        interceptors: self.interceptors?.makedeleteLiveHashInterceptors() ?? [],
        userFunction: self.deleteLiveHash(request:context:)
      )

    case "getLiveHash":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Query>(),
        responseSerializer: ProtobufSerializer<Proto_Response>(),
        interceptors: self.interceptors?.makegetLiveHashInterceptors() ?? [],
        userFunction: self.getLiveHash(request:context:)
      )

    case "getAccountRecords":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Query>(),
        responseSerializer: ProtobufSerializer<Proto_Response>(),
        interceptors: self.interceptors?.makegetAccountRecordsInterceptors() ?? [],
        userFunction: self.getAccountRecords(request:context:)
      )

    case "cryptoGetBalance":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Query>(),
        responseSerializer: ProtobufSerializer<Proto_Response>(),
        interceptors: self.interceptors?.makecryptoGetBalanceInterceptors() ?? [],
        userFunction: self.cryptoGetBalance(request:context:)
      )

    case "getAccountInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Query>(),
        responseSerializer: ProtobufSerializer<Proto_Response>(),
        interceptors: self.interceptors?.makegetAccountInfoInterceptors() ?? [],
        userFunction: self.getAccountInfo(request:context:)
      )

    case "getTransactionReceipts":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Query>(),
        responseSerializer: ProtobufSerializer<Proto_Response>(),
        interceptors: self.interceptors?.makegetTransactionReceiptsInterceptors() ?? [],
        userFunction: self.getTransactionReceipts(request:context:)
      )

    case "getTxRecordByTxID":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Query>(),
        responseSerializer: ProtobufSerializer<Proto_Response>(),
        interceptors: self.interceptors?.makegetTxRecordByTxIDInterceptors() ?? [],
        userFunction: self.getTxRecordByTxID(request:context:)
      )

    default:
      return nil
    }
  }
}

///*
/// Transactions and queries for the Hedera Crypto Service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Proto_CryptoServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Proto_CryptoServiceServerInterceptorFactoryProtocol? { get }

  ///*
  /// Create a new account by submitting the transaction
  func createAccount(
    request: Proto_Transaction,
    context: GRPCAsyncServerCallContext
  ) async throws -> Proto_TransactionResponse

  ///*
  /// Update an account by submitting the transaction
  func updateAccount(
    request: Proto_Transaction,
    context: GRPCAsyncServerCallContext
  ) async throws -> Proto_TransactionResponse

  ///*
  /// Initiate a transfer by submitting the transaction
  func cryptoTransfer(
    request: Proto_Transaction,
    context: GRPCAsyncServerCallContext
  ) async throws -> Proto_TransactionResponse

  ///*
  /// Delete an account by submitting the transaction
  func cryptoDelete(
    request: Proto_Transaction,
    context: GRPCAsyncServerCallContext
  ) async throws -> Proto_TransactionResponse

  ///*
  /// Add one or more approved allowances for spenders to transfer the paying
  /// account's hbar or tokens.
  func approveAllowances(
    request: Proto_Transaction,
    context: GRPCAsyncServerCallContext
  ) async throws -> Proto_TransactionResponse

  ///*
  /// Delete one or more of the specific approved NFT serial numbers on an
  /// owner account.
  func deleteAllowances(
    request: Proto_Transaction,
    context: GRPCAsyncServerCallContext
  ) async throws -> Proto_TransactionResponse

  ///*
  /// Add a livehash
  /// <blockquote>Important<blockquote>
  /// This transaction is obsolete, not supported, and SHALL fail with a
  /// pre-check result of `NOT_SUPPORTED`.</blockquote></blockquote>
  func addLiveHash(
    request: Proto_Transaction,
    context: GRPCAsyncServerCallContext
  ) async throws -> Proto_TransactionResponse

  ///*
  /// Delete a livehash
  /// <blockquote>Important<blockquote>
  /// This transaction is obsolete, not supported, and SHALL fail with a
  /// pre-check result of `NOT_SUPPORTED`.</blockquote></blockquote>
  func deleteLiveHash(
    request: Proto_Transaction,
    context: GRPCAsyncServerCallContext
  ) async throws -> Proto_TransactionResponse

  ///*
  /// Retrieve a livehash for an account
  /// <blockquote>Important<blockquote>
  /// This query is obsolete, not supported, and SHALL fail with a pre-check
  /// result of `NOT_SUPPORTED`.</blockquote></blockquote>
  func getLiveHash(
    request: Proto_Query,
    context: GRPCAsyncServerCallContext
  ) async throws -> Proto_Response

  ///*
  /// Return all transactions in the last 180s of consensus time for which
  /// the given account was the effective payer **and** network property
  /// `ledger.keepRecordsInState` was `true`.
  func getAccountRecords(
    request: Proto_Query,
    context: GRPCAsyncServerCallContext
  ) async throws -> Proto_Response

  ///*
  /// Retrieve the balance of an account
  func cryptoGetBalance(
    request: Proto_Query,
    context: GRPCAsyncServerCallContext
  ) async throws -> Proto_Response

  ///*
  /// Retrieve the metadata of an account
  func getAccountInfo(
    request: Proto_Query,
    context: GRPCAsyncServerCallContext
  ) async throws -> Proto_Response

  ///*
  /// Retrieve the latest receipt for a transaction that is either awaiting
  /// consensus, or reached consensus in the last 180 seconds
  func getTransactionReceipts(
    request: Proto_Query,
    context: GRPCAsyncServerCallContext
  ) async throws -> Proto_Response

  ///*
  /// Retrieve the record of a transaction that is either awaiting consensus,
  /// or reached consensus in the last 180 seconds
  func getTxRecordByTxID(
    request: Proto_Query,
    context: GRPCAsyncServerCallContext
  ) async throws -> Proto_Response
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Proto_CryptoServiceAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Proto_CryptoServiceServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Proto_CryptoServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Proto_CryptoServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "createAccount":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Transaction>(),
        responseSerializer: ProtobufSerializer<Proto_TransactionResponse>(),
        interceptors: self.interceptors?.makecreateAccountInterceptors() ?? [],
        wrapping: { try await self.createAccount(request: $0, context: $1) }
      )

    case "updateAccount":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Transaction>(),
        responseSerializer: ProtobufSerializer<Proto_TransactionResponse>(),
        interceptors: self.interceptors?.makeupdateAccountInterceptors() ?? [],
        wrapping: { try await self.updateAccount(request: $0, context: $1) }
      )

    case "cryptoTransfer":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Transaction>(),
        responseSerializer: ProtobufSerializer<Proto_TransactionResponse>(),
        interceptors: self.interceptors?.makecryptoTransferInterceptors() ?? [],
        wrapping: { try await self.cryptoTransfer(request: $0, context: $1) }
      )

    case "cryptoDelete":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Transaction>(),
        responseSerializer: ProtobufSerializer<Proto_TransactionResponse>(),
        interceptors: self.interceptors?.makecryptoDeleteInterceptors() ?? [],
        wrapping: { try await self.cryptoDelete(request: $0, context: $1) }
      )

    case "approveAllowances":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Transaction>(),
        responseSerializer: ProtobufSerializer<Proto_TransactionResponse>(),
        interceptors: self.interceptors?.makeapproveAllowancesInterceptors() ?? [],
        wrapping: { try await self.approveAllowances(request: $0, context: $1) }
      )

    case "deleteAllowances":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Transaction>(),
        responseSerializer: ProtobufSerializer<Proto_TransactionResponse>(),
        interceptors: self.interceptors?.makedeleteAllowancesInterceptors() ?? [],
        wrapping: { try await self.deleteAllowances(request: $0, context: $1) }
      )

    case "addLiveHash":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Transaction>(),
        responseSerializer: ProtobufSerializer<Proto_TransactionResponse>(),
        interceptors: self.interceptors?.makeaddLiveHashInterceptors() ?? [],
        wrapping: { try await self.addLiveHash(request: $0, context: $1) }
      )

    case "deleteLiveHash":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Transaction>(),
        responseSerializer: ProtobufSerializer<Proto_TransactionResponse>(),
        interceptors: self.interceptors?.makedeleteLiveHashInterceptors() ?? [],
        wrapping: { try await self.deleteLiveHash(request: $0, context: $1) }
      )

    case "getLiveHash":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Query>(),
        responseSerializer: ProtobufSerializer<Proto_Response>(),
        interceptors: self.interceptors?.makegetLiveHashInterceptors() ?? [],
        wrapping: { try await self.getLiveHash(request: $0, context: $1) }
      )

    case "getAccountRecords":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Query>(),
        responseSerializer: ProtobufSerializer<Proto_Response>(),
        interceptors: self.interceptors?.makegetAccountRecordsInterceptors() ?? [],
        wrapping: { try await self.getAccountRecords(request: $0, context: $1) }
      )

    case "cryptoGetBalance":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Query>(),
        responseSerializer: ProtobufSerializer<Proto_Response>(),
        interceptors: self.interceptors?.makecryptoGetBalanceInterceptors() ?? [],
        wrapping: { try await self.cryptoGetBalance(request: $0, context: $1) }
      )

    case "getAccountInfo":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Query>(),
        responseSerializer: ProtobufSerializer<Proto_Response>(),
        interceptors: self.interceptors?.makegetAccountInfoInterceptors() ?? [],
        wrapping: { try await self.getAccountInfo(request: $0, context: $1) }
      )

    case "getTransactionReceipts":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Query>(),
        responseSerializer: ProtobufSerializer<Proto_Response>(),
        interceptors: self.interceptors?.makegetTransactionReceiptsInterceptors() ?? [],
        wrapping: { try await self.getTransactionReceipts(request: $0, context: $1) }
      )

    case "getTxRecordByTxID":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Query>(),
        responseSerializer: ProtobufSerializer<Proto_Response>(),
        interceptors: self.interceptors?.makegetTxRecordByTxIDInterceptors() ?? [],
        wrapping: { try await self.getTxRecordByTxID(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

public protocol Proto_CryptoServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'createAccount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makecreateAccountInterceptors() -> [ServerInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when handling 'updateAccount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeupdateAccountInterceptors() -> [ServerInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when handling 'cryptoTransfer'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makecryptoTransferInterceptors() -> [ServerInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when handling 'cryptoDelete'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makecryptoDeleteInterceptors() -> [ServerInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when handling 'approveAllowances'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeapproveAllowancesInterceptors() -> [ServerInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when handling 'deleteAllowances'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makedeleteAllowancesInterceptors() -> [ServerInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when handling 'addLiveHash'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeaddLiveHashInterceptors() -> [ServerInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when handling 'deleteLiveHash'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makedeleteLiveHashInterceptors() -> [ServerInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when handling 'getLiveHash'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makegetLiveHashInterceptors() -> [ServerInterceptor<Proto_Query, Proto_Response>]

  /// - Returns: Interceptors to use when handling 'getAccountRecords'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makegetAccountRecordsInterceptors() -> [ServerInterceptor<Proto_Query, Proto_Response>]

  /// - Returns: Interceptors to use when handling 'cryptoGetBalance'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makecryptoGetBalanceInterceptors() -> [ServerInterceptor<Proto_Query, Proto_Response>]

  /// - Returns: Interceptors to use when handling 'getAccountInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makegetAccountInfoInterceptors() -> [ServerInterceptor<Proto_Query, Proto_Response>]

  /// - Returns: Interceptors to use when handling 'getTransactionReceipts'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makegetTransactionReceiptsInterceptors() -> [ServerInterceptor<Proto_Query, Proto_Response>]

  /// - Returns: Interceptors to use when handling 'getTxRecordByTxID'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makegetTxRecordByTxIDInterceptors() -> [ServerInterceptor<Proto_Query, Proto_Response>]
}

public enum Proto_CryptoServiceServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "CryptoService",
    fullName: "proto.CryptoService",
    methods: [
      Proto_CryptoServiceServerMetadata.Methods.createAccount,
      Proto_CryptoServiceServerMetadata.Methods.updateAccount,
      Proto_CryptoServiceServerMetadata.Methods.cryptoTransfer,
      Proto_CryptoServiceServerMetadata.Methods.cryptoDelete,
      Proto_CryptoServiceServerMetadata.Methods.approveAllowances,
      Proto_CryptoServiceServerMetadata.Methods.deleteAllowances,
      Proto_CryptoServiceServerMetadata.Methods.addLiveHash,
      Proto_CryptoServiceServerMetadata.Methods.deleteLiveHash,
      Proto_CryptoServiceServerMetadata.Methods.getLiveHash,
      Proto_CryptoServiceServerMetadata.Methods.getAccountRecords,
      Proto_CryptoServiceServerMetadata.Methods.cryptoGetBalance,
      Proto_CryptoServiceServerMetadata.Methods.getAccountInfo,
      Proto_CryptoServiceServerMetadata.Methods.getTransactionReceipts,
      Proto_CryptoServiceServerMetadata.Methods.getTxRecordByTxID,
    ]
  )

  public enum Methods {
    public static let createAccount = GRPCMethodDescriptor(
      name: "createAccount",
      path: "/proto.CryptoService/createAccount",
      type: GRPCCallType.unary
    )

    public static let updateAccount = GRPCMethodDescriptor(
      name: "updateAccount",
      path: "/proto.CryptoService/updateAccount",
      type: GRPCCallType.unary
    )

    public static let cryptoTransfer = GRPCMethodDescriptor(
      name: "cryptoTransfer",
      path: "/proto.CryptoService/cryptoTransfer",
      type: GRPCCallType.unary
    )

    public static let cryptoDelete = GRPCMethodDescriptor(
      name: "cryptoDelete",
      path: "/proto.CryptoService/cryptoDelete",
      type: GRPCCallType.unary
    )

    public static let approveAllowances = GRPCMethodDescriptor(
      name: "approveAllowances",
      path: "/proto.CryptoService/approveAllowances",
      type: GRPCCallType.unary
    )

    public static let deleteAllowances = GRPCMethodDescriptor(
      name: "deleteAllowances",
      path: "/proto.CryptoService/deleteAllowances",
      type: GRPCCallType.unary
    )

    public static let addLiveHash = GRPCMethodDescriptor(
      name: "addLiveHash",
      path: "/proto.CryptoService/addLiveHash",
      type: GRPCCallType.unary
    )

    public static let deleteLiveHash = GRPCMethodDescriptor(
      name: "deleteLiveHash",
      path: "/proto.CryptoService/deleteLiveHash",
      type: GRPCCallType.unary
    )

    public static let getLiveHash = GRPCMethodDescriptor(
      name: "getLiveHash",
      path: "/proto.CryptoService/getLiveHash",
      type: GRPCCallType.unary
    )

    public static let getAccountRecords = GRPCMethodDescriptor(
      name: "getAccountRecords",
      path: "/proto.CryptoService/getAccountRecords",
      type: GRPCCallType.unary
    )

    public static let cryptoGetBalance = GRPCMethodDescriptor(
      name: "cryptoGetBalance",
      path: "/proto.CryptoService/cryptoGetBalance",
      type: GRPCCallType.unary
    )

    public static let getAccountInfo = GRPCMethodDescriptor(
      name: "getAccountInfo",
      path: "/proto.CryptoService/getAccountInfo",
      type: GRPCCallType.unary
    )

    public static let getTransactionReceipts = GRPCMethodDescriptor(
      name: "getTransactionReceipts",
      path: "/proto.CryptoService/getTransactionReceipts",
      type: GRPCCallType.unary
    )

    public static let getTxRecordByTxID = GRPCMethodDescriptor(
      name: "getTxRecordByTxID",
      path: "/proto.CryptoService/getTxRecordByTxID",
      type: GRPCCallType.unary
    )
  }
}
