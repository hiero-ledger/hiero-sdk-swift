// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: services/file_create.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

///*
/// # File Create
/// Messages to create a new file entry.
///
/// ### Keywords
/// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
/// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
/// document are to be interpreted as described in
/// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
/// [RFC8174](https://www.ietf.org/rfc/rfc8174).

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
/// Create a new file.
///
/// If successful, the new file SHALL contain the (possibly empty) content
/// provided in the `contents` field.<br/>
/// When the current consensus time exceeds the `expirationTime` value, the
/// network SHALL expire the file, and MAY archive the state entry.
///
/// #### Signature Requirements
/// The HFS manages file authorization in a manner that can be confusing.
/// The core element of file authorization is the `keys` field,
/// which is a `KeyList`; a list of individual `Key` messages, each of which
/// may represent a simple or complex key.<br/>
/// The file service transactions treat this list differently.<br/>
/// A `fileCreate`, `fileAppend`, or `fileUpdate` MUST have a valid signature
/// from _each_ key in the list.<br/>
/// A `fileDelete` MUST have a valid signature from _at least one_ key in
/// the list. This is different, and allows a file "owned" by many entities
/// to be deleted by any one of those entities. A deleted file cannot be
/// restored, so it is important to consider this when assigning keys for
/// a file.<br/>
/// If any of the keys in a `KeyList` are complex, the full requirements of
/// each complex key must be met to count as a "valid signature" for that key.
/// A complex key structure (i.e. a `ThresholdKey`, or `KeyList`, possibly
/// including additional `ThresholdKey` or `KeyList` descendants) may be
/// assigned as the sole entry in a file `keys` field to ensure all transactions
/// have the same signature requirements.
///
/// If the `keys` field is an empty `KeyList`, then the file SHALL be immutable
/// and the only transaction permitted to modify that file SHALL be a
/// `fileUpdate` transaction with _only_ the `expirationTime` set.
///
/// #### Shard and Realm
/// The current API ignores shardID and realmID. All files are created in
/// shard 0 and realm 0. Future versions of the API may support multiple
/// realms and multiple shards.
///
/// ### Block Stream Effects
/// After the file is created, the FileID for it SHALL be returned in the
/// transaction receipt, and SHALL be recorded in the transaction record.
public struct Proto_FileCreateTransactionBody: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// An expiration timestamp.
  /// <p>
  /// When the network consensus time exceeds this value, the network
  /// SHALL expire the file.
  public var expirationTime: Proto_Timestamp {
    get {return _expirationTime ?? Proto_Timestamp()}
    set {_expirationTime = newValue}
  }
  /// Returns true if `expirationTime` has been explicitly set.
  public var hasExpirationTime: Bool {return self._expirationTime != nil}
  /// Clears the value of `expirationTime`. Subsequent reads from it will return its default value.
  public mutating func clearExpirationTime() {self._expirationTime = nil}

  ///*
  /// A list of keys that represent file "owners".
  /// <p>
  /// Every `Key` in this list MUST sign this `fileCreate` transaction, as
  /// well as any `fileUpdate` or `fileAppend` that modifies this file.<br/>
  /// At least one `Key` in this list MUST sign any `fileDelete` transaction
  /// to delete this file.<br/>
  /// If this `KeyList` is empty, the file SHALL be created immutable and the
  /// only field that may be changed subsequently is the `expirationTime`.
  /// An immutable file cannot be deleted except with a `systemDelete`
  /// transaction, or by expiration.
  public var keys: Proto_KeyList {
    get {return _keys ?? Proto_KeyList()}
    set {_keys = newValue}
  }
  /// Returns true if `keys` has been explicitly set.
  public var hasKeys: Bool {return self._keys != nil}
  /// Clears the value of `keys`. Subsequent reads from it will return its default value.
  public mutating func clearKeys() {self._keys = nil}

  ///*
  /// A byte array of file content.
  /// <p>
  /// The file SHALL be created with initial content equal to this field.
  public var contents: Data = Data()

  ///*
  /// A shard in which this file is created
  public var shardID: Proto_ShardID {
    get {return _shardID ?? Proto_ShardID()}
    set {_shardID = newValue}
  }
  /// Returns true if `shardID` has been explicitly set.
  public var hasShardID: Bool {return self._shardID != nil}
  /// Clears the value of `shardID`. Subsequent reads from it will return its default value.
  public mutating func clearShardID() {self._shardID = nil}

  ///*
  /// A realm in which this file is created.
  /// <p>
  /// The shard number for this realm MUST match the value in `shardID`.<br/>
  /// Currently, this MUST be `0` for both fields.<br/>
  /// If the desired realm is `0.0`, this SHOULD NOT be set.
  public var realmID: Proto_RealmID {
    get {return _realmID ?? Proto_RealmID()}
    set {_realmID = newValue}
  }
  /// Returns true if `realmID` has been explicitly set.
  public var hasRealmID: Bool {return self._realmID != nil}
  /// Clears the value of `realmID`. Subsequent reads from it will return its default value.
  public mutating func clearRealmID() {self._realmID = nil}

  ///*
  /// The "create realm" was never enabled, and
  /// should not be possible on file creation.<br/>
  /// An admin key for a new realm, if one is created.
  /// Added deprecated tag 2024-05.
  ///
  /// NOTE: This field was marked as deprecated in the .proto file.
  public var newRealmAdminKey: Proto_Key {
    get {return _newRealmAdminKey ?? Proto_Key()}
    set {_newRealmAdminKey = newValue}
  }
  /// Returns true if `newRealmAdminKey` has been explicitly set.
  public var hasNewRealmAdminKey: Bool {return self._newRealmAdminKey != nil}
  /// Clears the value of `newRealmAdminKey`. Subsequent reads from it will return its default value.
  public mutating func clearNewRealmAdminKey() {self._newRealmAdminKey = nil}

  ///*
  /// A short description of this file.
  /// <p>
  /// This value, if set, MUST NOT exceed `transaction.maxMemoUtf8Bytes`
  /// (default 100) bytes when encoded as UTF-8.
  public var memo: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _expirationTime: Proto_Timestamp? = nil
  fileprivate var _keys: Proto_KeyList? = nil
  fileprivate var _shardID: Proto_ShardID? = nil
  fileprivate var _realmID: Proto_RealmID? = nil
  fileprivate var _newRealmAdminKey: Proto_Key? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "proto"

extension Proto_FileCreateTransactionBody: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FileCreateTransactionBody"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "expirationTime"),
    3: .same(proto: "keys"),
    4: .same(proto: "contents"),
    5: .same(proto: "shardID"),
    6: .same(proto: "realmID"),
    7: .same(proto: "newRealmAdminKey"),
    8: .same(proto: "memo"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularMessageField(value: &self._expirationTime) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._keys) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.contents) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._shardID) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._realmID) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._newRealmAdminKey) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.memo) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._expirationTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._keys {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.contents.isEmpty {
      try visitor.visitSingularBytesField(value: self.contents, fieldNumber: 4)
    }
    try { if let v = self._shardID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._realmID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._newRealmAdminKey {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    if !self.memo.isEmpty {
      try visitor.visitSingularStringField(value: self.memo, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_FileCreateTransactionBody, rhs: Proto_FileCreateTransactionBody) -> Bool {
    if lhs._expirationTime != rhs._expirationTime {return false}
    if lhs._keys != rhs._keys {return false}
    if lhs.contents != rhs.contents {return false}
    if lhs._shardID != rhs._shardID {return false}
    if lhs._realmID != rhs._realmID {return false}
    if lhs._newRealmAdminKey != rhs._newRealmAdminKey {return false}
    if lhs.memo != rhs.memo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
