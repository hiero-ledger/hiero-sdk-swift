///*
/// # Network Service
/// This service offers some basic "network information" queries.
///
/// ### Keywords
/// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
/// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
/// document are to be interpreted as described in
/// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
/// [RFC8174](https://www.ietf.org/rfc/rfc8174).

// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: services/network_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf

// MARK: - proto.NetworkService

/// Namespace containing generated types for the "proto.NetworkService" service.
public enum Proto_NetworkService {
    /// Service descriptor for the "proto.NetworkService" service.
    public static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.NetworkService")
    /// Namespace for method metadata.
    public enum Method {
        /// Namespace for "getVersionInfo" metadata.
        public enum getVersionInfo {
            /// Request type for "getVersionInfo".
            public typealias Input = Proto_Query
            /// Response type for "getVersionInfo".
            public typealias Output = Proto_Response
            /// Descriptor for "getVersionInfo".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.NetworkService"),
                method: "getVersionInfo"
            )
        }
        /// Namespace for "getAccountDetails" metadata.
        public enum getAccountDetails {
            /// Request type for "getAccountDetails".
            public typealias Input = Proto_Query
            /// Response type for "getAccountDetails".
            public typealias Output = Proto_Response
            /// Descriptor for "getAccountDetails".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.NetworkService"),
                method: "getAccountDetails"
            )
        }
        /// Namespace for "getExecutionTime" metadata.
        public enum getExecutionTime {
            /// Request type for "getExecutionTime".
            public typealias Input = Proto_Query
            /// Response type for "getExecutionTime".
            public typealias Output = Proto_Response
            /// Descriptor for "getExecutionTime".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.NetworkService"),
                method: "getExecutionTime"
            )
        }
        /// Namespace for "uncheckedSubmit" metadata.
        public enum uncheckedSubmit {
            /// Request type for "uncheckedSubmit".
            public typealias Input = Proto_Transaction
            /// Response type for "uncheckedSubmit".
            public typealias Output = Proto_TransactionResponse
            /// Descriptor for "uncheckedSubmit".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.NetworkService"),
                method: "uncheckedSubmit"
            )
        }
        /// Descriptors for all methods in the "proto.NetworkService" service.
        public static let descriptors: [GRPCCore.MethodDescriptor] = [
            getVersionInfo.descriptor,
            getAccountDetails.descriptor,
            getExecutionTime.descriptor,
            uncheckedSubmit.descriptor
        ]
    }
}

extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "proto.NetworkService" service.
    public static let proto_NetworkService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.NetworkService")
}

// MARK: proto.NetworkService (server)

extension Proto_NetworkService {
    /// Streaming variant of the service protocol for the "proto.NetworkService" service.
    ///
    /// This protocol is the lowest-level of the service protocols generated for this service
    /// giving you the most flexibility over the implementation of your service. This comes at
    /// the cost of more verbose and less strict APIs. Each RPC requires you to implement it in
    /// terms of a request stream and response stream. Where only a single request or response
    /// message is expected, you are responsible for enforcing this invariant is maintained.
    ///
    /// Where possible, prefer using the stricter, less-verbose ``ServiceProtocol``
    /// or ``SimpleServiceProtocol`` instead.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Basic "network information" queries.
    /// > 
    /// > This service supports queries for the active services and API versions,
    /// > and a query for account details.
    public protocol StreamingServiceProtocol: GRPCCore.RegistrableRPCService {
        /// Handle the "getVersionInfo" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve the active versions of Hedera Services and API messages.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Query` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_Response` messages.
        func getVersionInfo(
            request: GRPCCore.StreamingServerRequest<Proto_Query>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_Response>

        /// Handle the "getAccountDetails" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Request detail information about an account.
        /// > <p>
        /// > The returned information SHALL include balance and allowances.<br/>
        /// > The returned information SHALL NOT include a list of account records.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Query` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_Response` messages.
        func getAccountDetails(
            request: GRPCCore.StreamingServerRequest<Proto_Query>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_Response>

        /// Handle the "getExecutionTime" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve the time, in nanoseconds, spent in direct processing for one or
        /// > more recent transactions.
        /// > <p>
        /// > For each transaction identifier provided, if that transaction is
        /// > sufficiently recent (that is, it is within the range of the
        /// > configuration value `stats.executionTimesToTrack`), the node SHALL
        /// > return the time, in nanoseconds, spent to directly process that
        /// > transaction (that is, excluding time to reach consensus).<br/>
        /// > Note that because each node processes every transaction for the Hedera
        /// > network, this query MAY be sent to any node.
        /// > <p>
        /// > <blockquote>Important<blockquote>
        /// > This query is obsolete, not supported, and SHALL fail with a pre-check
        /// > result of `NOT_SUPPORTED`.</blockquote></blockquote>
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Query` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_Response` messages.
        func getExecutionTime(
            request: GRPCCore.StreamingServerRequest<Proto_Query>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_Response>

        /// Handle the "uncheckedSubmit" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Submit a transaction that wraps another transaction which will
        /// > skip most validation.
        /// > <p>
        /// > <blockquote>Important<blockquote>
        /// > This query is obsolete, not supported, and SHALL fail with a pre-check
        /// > result of `NOT_SUPPORTED`.
        /// > </blockquote></blockquote>
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Transaction` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_TransactionResponse` messages.
        func uncheckedSubmit(
            request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse>
    }

    /// Service protocol for the "proto.NetworkService" service.
    ///
    /// This protocol is higher level than ``StreamingServiceProtocol`` but lower level than
    /// the ``SimpleServiceProtocol``, it provides access to request and response metadata and
    /// trailing response metadata. If you don't need these then consider using
    /// the ``SimpleServiceProtocol``. If you need fine grained control over your RPCs then
    /// use ``StreamingServiceProtocol``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Basic "network information" queries.
    /// > 
    /// > This service supports queries for the active services and API versions,
    /// > and a query for account details.
    public protocol ServiceProtocol: Proto_NetworkService.StreamingServiceProtocol {
        /// Handle the "getVersionInfo" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve the active versions of Hedera Services and API messages.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Query` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_Response` message.
        func getVersionInfo(
            request: GRPCCore.ServerRequest<Proto_Query>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_Response>

        /// Handle the "getAccountDetails" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Request detail information about an account.
        /// > <p>
        /// > The returned information SHALL include balance and allowances.<br/>
        /// > The returned information SHALL NOT include a list of account records.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Query` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_Response` message.
        func getAccountDetails(
            request: GRPCCore.ServerRequest<Proto_Query>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_Response>

        /// Handle the "getExecutionTime" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve the time, in nanoseconds, spent in direct processing for one or
        /// > more recent transactions.
        /// > <p>
        /// > For each transaction identifier provided, if that transaction is
        /// > sufficiently recent (that is, it is within the range of the
        /// > configuration value `stats.executionTimesToTrack`), the node SHALL
        /// > return the time, in nanoseconds, spent to directly process that
        /// > transaction (that is, excluding time to reach consensus).<br/>
        /// > Note that because each node processes every transaction for the Hedera
        /// > network, this query MAY be sent to any node.
        /// > <p>
        /// > <blockquote>Important<blockquote>
        /// > This query is obsolete, not supported, and SHALL fail with a pre-check
        /// > result of `NOT_SUPPORTED`.</blockquote></blockquote>
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Query` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_Response` message.
        func getExecutionTime(
            request: GRPCCore.ServerRequest<Proto_Query>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_Response>

        /// Handle the "uncheckedSubmit" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Submit a transaction that wraps another transaction which will
        /// > skip most validation.
        /// > <p>
        /// > <blockquote>Important<blockquote>
        /// > This query is obsolete, not supported, and SHALL fail with a pre-check
        /// > result of `NOT_SUPPORTED`.
        /// > </blockquote></blockquote>
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_TransactionResponse` message.
        func uncheckedSubmit(
            request: GRPCCore.ServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse>
    }

    /// Simple service protocol for the "proto.NetworkService" service.
    ///
    /// This is the highest level protocol for the service. The API is the easiest to use but
    /// doesn't provide access to request or response metadata. If you need access to these
    /// then use ``ServiceProtocol`` instead.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Basic "network information" queries.
    /// > 
    /// > This service supports queries for the active services and API versions,
    /// > and a query for account details.
    public protocol SimpleServiceProtocol: Proto_NetworkService.ServiceProtocol {
        /// Handle the "getVersionInfo" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve the active versions of Hedera Services and API messages.
        ///
        /// - Parameters:
        ///   - request: A `Proto_Query` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_Response` to respond with.
        func getVersionInfo(
            request: Proto_Query,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_Response

        /// Handle the "getAccountDetails" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Request detail information about an account.
        /// > <p>
        /// > The returned information SHALL include balance and allowances.<br/>
        /// > The returned information SHALL NOT include a list of account records.
        ///
        /// - Parameters:
        ///   - request: A `Proto_Query` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_Response` to respond with.
        func getAccountDetails(
            request: Proto_Query,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_Response

        /// Handle the "getExecutionTime" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve the time, in nanoseconds, spent in direct processing for one or
        /// > more recent transactions.
        /// > <p>
        /// > For each transaction identifier provided, if that transaction is
        /// > sufficiently recent (that is, it is within the range of the
        /// > configuration value `stats.executionTimesToTrack`), the node SHALL
        /// > return the time, in nanoseconds, spent to directly process that
        /// > transaction (that is, excluding time to reach consensus).<br/>
        /// > Note that because each node processes every transaction for the Hedera
        /// > network, this query MAY be sent to any node.
        /// > <p>
        /// > <blockquote>Important<blockquote>
        /// > This query is obsolete, not supported, and SHALL fail with a pre-check
        /// > result of `NOT_SUPPORTED`.</blockquote></blockquote>
        ///
        /// - Parameters:
        ///   - request: A `Proto_Query` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_Response` to respond with.
        func getExecutionTime(
            request: Proto_Query,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_Response

        /// Handle the "uncheckedSubmit" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Submit a transaction that wraps another transaction which will
        /// > skip most validation.
        /// > <p>
        /// > <blockquote>Important<blockquote>
        /// > This query is obsolete, not supported, and SHALL fail with a pre-check
        /// > result of `NOT_SUPPORTED`.
        /// > </blockquote></blockquote>
        ///
        /// - Parameters:
        ///   - request: A `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_TransactionResponse` to respond with.
        func uncheckedSubmit(
            request: Proto_Transaction,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_TransactionResponse
    }
}

// Default implementation of 'registerMethods(with:)'.
extension Proto_NetworkService.StreamingServiceProtocol {
    public func registerMethods<Transport>(with router: inout GRPCCore.RPCRouter<Transport>) where Transport: GRPCCore.ServerTransport {
        router.registerHandler(
            forMethod: Proto_NetworkService.Method.getVersionInfo.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Query>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Response>(),
            handler: { request, context in
                try await self.getVersionInfo(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_NetworkService.Method.getAccountDetails.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Query>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Response>(),
            handler: { request, context in
                try await self.getAccountDetails(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_NetworkService.Method.getExecutionTime.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Query>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Response>(),
            handler: { request, context in
                try await self.getExecutionTime(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_NetworkService.Method.uncheckedSubmit.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Transaction>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_TransactionResponse>(),
            handler: { request, context in
                try await self.uncheckedSubmit(
                    request: request,
                    context: context
                )
            }
        )
    }
}

// Default implementation of streaming methods from 'StreamingServiceProtocol'.
extension Proto_NetworkService.ServiceProtocol {
    public func getVersionInfo(
        request: GRPCCore.StreamingServerRequest<Proto_Query>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_Response> {
        let response = try await self.getVersionInfo(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func getAccountDetails(
        request: GRPCCore.StreamingServerRequest<Proto_Query>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_Response> {
        let response = try await self.getAccountDetails(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func getExecutionTime(
        request: GRPCCore.StreamingServerRequest<Proto_Query>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_Response> {
        let response = try await self.getExecutionTime(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func uncheckedSubmit(
        request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse> {
        let response = try await self.uncheckedSubmit(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }
}

// Default implementation of methods from 'ServiceProtocol'.
extension Proto_NetworkService.SimpleServiceProtocol {
    public func getVersionInfo(
        request: GRPCCore.ServerRequest<Proto_Query>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_Response> {
        return GRPCCore.ServerResponse<Proto_Response>(
            message: try await self.getVersionInfo(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func getAccountDetails(
        request: GRPCCore.ServerRequest<Proto_Query>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_Response> {
        return GRPCCore.ServerResponse<Proto_Response>(
            message: try await self.getAccountDetails(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func getExecutionTime(
        request: GRPCCore.ServerRequest<Proto_Query>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_Response> {
        return GRPCCore.ServerResponse<Proto_Response>(
            message: try await self.getExecutionTime(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func uncheckedSubmit(
        request: GRPCCore.ServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse> {
        return GRPCCore.ServerResponse<Proto_TransactionResponse>(
            message: try await self.uncheckedSubmit(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }
}

// MARK: proto.NetworkService (client)

extension Proto_NetworkService {
    /// Generated client protocol for the "proto.NetworkService" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Basic "network information" queries.
    /// > 
    /// > This service supports queries for the active services and API versions,
    /// > and a query for account details.
    public protocol ClientProtocol: Sendable {
        /// Call the "getVersionInfo" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve the active versions of Hedera Services and API messages.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Query` message.
        ///   - serializer: A serializer for `Proto_Query` messages.
        ///   - deserializer: A deserializer for `Proto_Response` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getVersionInfo<Result>(
            request: GRPCCore.ClientRequest<Proto_Query>,
            serializer: some GRPCCore.MessageSerializer<Proto_Query>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_Response>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "getAccountDetails" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Request detail information about an account.
        /// > <p>
        /// > The returned information SHALL include balance and allowances.<br/>
        /// > The returned information SHALL NOT include a list of account records.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Query` message.
        ///   - serializer: A serializer for `Proto_Query` messages.
        ///   - deserializer: A deserializer for `Proto_Response` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getAccountDetails<Result>(
            request: GRPCCore.ClientRequest<Proto_Query>,
            serializer: some GRPCCore.MessageSerializer<Proto_Query>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_Response>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "getExecutionTime" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve the time, in nanoseconds, spent in direct processing for one or
        /// > more recent transactions.
        /// > <p>
        /// > For each transaction identifier provided, if that transaction is
        /// > sufficiently recent (that is, it is within the range of the
        /// > configuration value `stats.executionTimesToTrack`), the node SHALL
        /// > return the time, in nanoseconds, spent to directly process that
        /// > transaction (that is, excluding time to reach consensus).<br/>
        /// > Note that because each node processes every transaction for the Hedera
        /// > network, this query MAY be sent to any node.
        /// > <p>
        /// > <blockquote>Important<blockquote>
        /// > This query is obsolete, not supported, and SHALL fail with a pre-check
        /// > result of `NOT_SUPPORTED`.</blockquote></blockquote>
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Query` message.
        ///   - serializer: A serializer for `Proto_Query` messages.
        ///   - deserializer: A deserializer for `Proto_Response` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getExecutionTime<Result>(
            request: GRPCCore.ClientRequest<Proto_Query>,
            serializer: some GRPCCore.MessageSerializer<Proto_Query>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_Response>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "uncheckedSubmit" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Submit a transaction that wraps another transaction which will
        /// > skip most validation.
        /// > <p>
        /// > <blockquote>Important<blockquote>
        /// > This query is obsolete, not supported, and SHALL fail with a pre-check
        /// > result of `NOT_SUPPORTED`.
        /// > </blockquote></blockquote>
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func uncheckedSubmit<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "proto.NetworkService" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Basic "network information" queries.
    /// > 
    /// > This service supports queries for the active services and API versions,
    /// > and a query for account details.
    public struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        public init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "getVersionInfo" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve the active versions of Hedera Services and API messages.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Query` message.
        ///   - serializer: A serializer for `Proto_Query` messages.
        ///   - deserializer: A deserializer for `Proto_Response` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func getVersionInfo<Result>(
            request: GRPCCore.ClientRequest<Proto_Query>,
            serializer: some GRPCCore.MessageSerializer<Proto_Query>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_Response>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_NetworkService.Method.getVersionInfo.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "getAccountDetails" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Request detail information about an account.
        /// > <p>
        /// > The returned information SHALL include balance and allowances.<br/>
        /// > The returned information SHALL NOT include a list of account records.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Query` message.
        ///   - serializer: A serializer for `Proto_Query` messages.
        ///   - deserializer: A deserializer for `Proto_Response` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func getAccountDetails<Result>(
            request: GRPCCore.ClientRequest<Proto_Query>,
            serializer: some GRPCCore.MessageSerializer<Proto_Query>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_Response>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_NetworkService.Method.getAccountDetails.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "getExecutionTime" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve the time, in nanoseconds, spent in direct processing for one or
        /// > more recent transactions.
        /// > <p>
        /// > For each transaction identifier provided, if that transaction is
        /// > sufficiently recent (that is, it is within the range of the
        /// > configuration value `stats.executionTimesToTrack`), the node SHALL
        /// > return the time, in nanoseconds, spent to directly process that
        /// > transaction (that is, excluding time to reach consensus).<br/>
        /// > Note that because each node processes every transaction for the Hedera
        /// > network, this query MAY be sent to any node.
        /// > <p>
        /// > <blockquote>Important<blockquote>
        /// > This query is obsolete, not supported, and SHALL fail with a pre-check
        /// > result of `NOT_SUPPORTED`.</blockquote></blockquote>
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Query` message.
        ///   - serializer: A serializer for `Proto_Query` messages.
        ///   - deserializer: A deserializer for `Proto_Response` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func getExecutionTime<Result>(
            request: GRPCCore.ClientRequest<Proto_Query>,
            serializer: some GRPCCore.MessageSerializer<Proto_Query>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_Response>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_NetworkService.Method.getExecutionTime.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "uncheckedSubmit" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Submit a transaction that wraps another transaction which will
        /// > skip most validation.
        /// > <p>
        /// > <blockquote>Important<blockquote>
        /// > This query is obsolete, not supported, and SHALL fail with a pre-check
        /// > result of `NOT_SUPPORTED`.
        /// > </blockquote></blockquote>
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func uncheckedSubmit<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_NetworkService.Method.uncheckedSubmit.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
extension Proto_NetworkService.ClientProtocol {
    /// Call the "getVersionInfo" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Retrieve the active versions of Hedera Services and API messages.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Query` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getVersionInfo<Result>(
        request: GRPCCore.ClientRequest<Proto_Query>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getVersionInfo(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Query>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Response>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "getAccountDetails" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Request detail information about an account.
    /// > <p>
    /// > The returned information SHALL include balance and allowances.<br/>
    /// > The returned information SHALL NOT include a list of account records.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Query` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getAccountDetails<Result>(
        request: GRPCCore.ClientRequest<Proto_Query>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getAccountDetails(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Query>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Response>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "getExecutionTime" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Retrieve the time, in nanoseconds, spent in direct processing for one or
    /// > more recent transactions.
    /// > <p>
    /// > For each transaction identifier provided, if that transaction is
    /// > sufficiently recent (that is, it is within the range of the
    /// > configuration value `stats.executionTimesToTrack`), the node SHALL
    /// > return the time, in nanoseconds, spent to directly process that
    /// > transaction (that is, excluding time to reach consensus).<br/>
    /// > Note that because each node processes every transaction for the Hedera
    /// > network, this query MAY be sent to any node.
    /// > <p>
    /// > <blockquote>Important<blockquote>
    /// > This query is obsolete, not supported, and SHALL fail with a pre-check
    /// > result of `NOT_SUPPORTED`.</blockquote></blockquote>
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Query` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getExecutionTime<Result>(
        request: GRPCCore.ClientRequest<Proto_Query>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getExecutionTime(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Query>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Response>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "uncheckedSubmit" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Submit a transaction that wraps another transaction which will
    /// > skip most validation.
    /// > <p>
    /// > <blockquote>Important<blockquote>
    /// > This query is obsolete, not supported, and SHALL fail with a pre-check
    /// > result of `NOT_SUPPORTED`.
    /// > </blockquote></blockquote>
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Transaction` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func uncheckedSubmit<Result>(
        request: GRPCCore.ClientRequest<Proto_Transaction>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.uncheckedSubmit(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Transaction>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_TransactionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
extension Proto_NetworkService.ClientProtocol {
    /// Call the "getVersionInfo" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Retrieve the active versions of Hedera Services and API messages.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getVersionInfo<Result>(
        _ message: Proto_Query,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Query>(
            message: message,
            metadata: metadata
        )
        return try await self.getVersionInfo(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "getAccountDetails" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Request detail information about an account.
    /// > <p>
    /// > The returned information SHALL include balance and allowances.<br/>
    /// > The returned information SHALL NOT include a list of account records.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getAccountDetails<Result>(
        _ message: Proto_Query,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Query>(
            message: message,
            metadata: metadata
        )
        return try await self.getAccountDetails(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "getExecutionTime" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Retrieve the time, in nanoseconds, spent in direct processing for one or
    /// > more recent transactions.
    /// > <p>
    /// > For each transaction identifier provided, if that transaction is
    /// > sufficiently recent (that is, it is within the range of the
    /// > configuration value `stats.executionTimesToTrack`), the node SHALL
    /// > return the time, in nanoseconds, spent to directly process that
    /// > transaction (that is, excluding time to reach consensus).<br/>
    /// > Note that because each node processes every transaction for the Hedera
    /// > network, this query MAY be sent to any node.
    /// > <p>
    /// > <blockquote>Important<blockquote>
    /// > This query is obsolete, not supported, and SHALL fail with a pre-check
    /// > result of `NOT_SUPPORTED`.</blockquote></blockquote>
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getExecutionTime<Result>(
        _ message: Proto_Query,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Query>(
            message: message,
            metadata: metadata
        )
        return try await self.getExecutionTime(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "uncheckedSubmit" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Submit a transaction that wraps another transaction which will
    /// > skip most validation.
    /// > <p>
    /// > <blockquote>Important<blockquote>
    /// > This query is obsolete, not supported, and SHALL fail with a pre-check
    /// > result of `NOT_SUPPORTED`.
    /// > </blockquote></blockquote>
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func uncheckedSubmit<Result>(
        _ message: Proto_Transaction,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Transaction>(
            message: message,
            metadata: metadata
        )
        return try await self.uncheckedSubmit(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}