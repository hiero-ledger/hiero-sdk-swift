// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: token_dissociate.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

///*
/// # Token Dissociate
/// Remove association between an account and one or more Hedera Token
/// Service (HTS) tokens.
///
/// ### Keywords
/// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
/// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
/// document are to be interpreted as described in
/// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
/// [RFC8174](https://www.ietf.org/rfc/rfc8174).

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
/// Dissociate an account from one or more HTS tokens.
///
/// If the identified account is not found,
/// the transaction SHALL return `INVALID_ACCOUNT_ID`.<br/>
/// If the identified account has been deleted,
/// the transaction SHALL return `ACCOUNT_DELETED`.<br/>
/// If any of the identified tokens is not found,
/// the transaction SHALL return `INVALID_TOKEN_REF`.<br/>
/// If any of the identified tokens has been deleted,
/// the transaction SHALL return `TOKEN_WAS_DELETED`.<br/>
/// If an association does not exist for any of the identified tokens,
/// the transaction SHALL return `TOKEN_NOT_ASSOCIATED_TO_ACCOUNT`.<br/>
/// If the identified account has a nonzero balance for any of the identified
/// tokens, and that token is neither deleted nor expired, the
/// transaction SHALL return `TRANSACTION_REQUIRES_ZERO_TOKEN_BALANCES`.<br/>
/// If one of the identified tokens is a fungible/common token that is expired,
/// the account MAY disassociate from that token, even if that token balance is
/// not zero for that account.<br/>
/// If one of the identified tokens is a non-fungible/unique token that is
/// expired, the account MUST NOT disassociate if that account holds any
/// individual NFT of that token. In this situation the transaction SHALL
/// return `TRANSACTION_REQUIRED_ZERO_TOKEN_BALANCES`.<br/>
/// The identified account MUST sign this transaction.
///
/// ### Block Stream Effects
/// None
public struct Proto_TokenDissociateTransactionBody: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// An account identifier.
  /// <p>
  /// The identified account SHALL be dissociated from each of the
  /// tokens identified in the `tokens` field.
  /// This field is REQUIRED and MUST be a valid account identifier.<br/>
  /// The identified account MUST exist in state.<br/>
  /// The identified account MUST NOT be deleted.<br/>
  /// The identified account MUST NOT be expired.
  public var account: Proto_AccountID {
    get {return _account ?? Proto_AccountID()}
    set {_account = newValue}
  }
  /// Returns true if `account` has been explicitly set.
  public var hasAccount: Bool {return self._account != nil}
  /// Clears the value of `account`. Subsequent reads from it will return its default value.
  public mutating func clearAccount() {self._account = nil}

  ///*
  /// A list of token identifiers.
  /// <p>
  /// Each token identified in this list SHALL be dissociated from
  /// the account identified in the `account` field.<br/>
  /// This list MUST NOT be empty.
  /// Each entry in this list MUST be a valid token identifier.<br/>
  /// Each entry in this list MUST be currently associated to the
  /// account identified in `account`.<br/>
  /// Entries in this list MAY be expired, if the token type is
  /// fungible/common.<br/>
  /// Each entry in this list MUST NOT be deleted.
  public var tokens: [Proto_TokenID] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _account: Proto_AccountID? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "proto"

extension Proto_TokenDissociateTransactionBody: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TokenDissociateTransactionBody"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "account"),
    2: .same(proto: "tokens"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._account) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.tokens) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._account {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.tokens.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tokens, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_TokenDissociateTransactionBody, rhs: Proto_TokenDissociateTransactionBody) -> Bool {
    if lhs._account != rhs._account {return false}
    if lhs.tokens != rhs.tokens {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
