///*
/// # Schedule Service
/// gRPC service definitions for the Schedule Service.
///
/// ### Keywords
/// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
/// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
/// document are to be interpreted as described in
/// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
/// [RFC8174](https://www.ietf.org/rfc/rfc8174).

// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: services/schedule_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf

// MARK: - proto.ScheduleService

/// Namespace containing generated types for the "proto.ScheduleService" service.
public enum Proto_ScheduleService {
    /// Service descriptor for the "proto.ScheduleService" service.
    public static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.ScheduleService")
    /// Namespace for method metadata.
    public enum Method {
        /// Namespace for "createSchedule" metadata.
        public enum createSchedule {
            /// Request type for "createSchedule".
            public typealias Input = Proto_Transaction
            /// Response type for "createSchedule".
            public typealias Output = Proto_TransactionResponse
            /// Descriptor for "createSchedule".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.ScheduleService"),
                method: "createSchedule"
            )
        }
        /// Namespace for "signSchedule" metadata.
        public enum signSchedule {
            /// Request type for "signSchedule".
            public typealias Input = Proto_Transaction
            /// Response type for "signSchedule".
            public typealias Output = Proto_TransactionResponse
            /// Descriptor for "signSchedule".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.ScheduleService"),
                method: "signSchedule"
            )
        }
        /// Namespace for "deleteSchedule" metadata.
        public enum deleteSchedule {
            /// Request type for "deleteSchedule".
            public typealias Input = Proto_Transaction
            /// Response type for "deleteSchedule".
            public typealias Output = Proto_TransactionResponse
            /// Descriptor for "deleteSchedule".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.ScheduleService"),
                method: "deleteSchedule"
            )
        }
        /// Namespace for "getScheduleInfo" metadata.
        public enum getScheduleInfo {
            /// Request type for "getScheduleInfo".
            public typealias Input = Proto_Query
            /// Response type for "getScheduleInfo".
            public typealias Output = Proto_Response
            /// Descriptor for "getScheduleInfo".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.ScheduleService"),
                method: "getScheduleInfo"
            )
        }
        /// Descriptors for all methods in the "proto.ScheduleService" service.
        public static let descriptors: [GRPCCore.MethodDescriptor] = [
            createSchedule.descriptor,
            signSchedule.descriptor,
            deleteSchedule.descriptor,
            getScheduleInfo.descriptor
        ]
    }
}

extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "proto.ScheduleService" service.
    public static let proto_ScheduleService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.ScheduleService")
}

// MARK: proto.ScheduleService (server)

extension Proto_ScheduleService {
    /// Streaming variant of the service protocol for the "proto.ScheduleService" service.
    ///
    /// This protocol is the lowest-level of the service protocols generated for this service
    /// giving you the most flexibility over the implementation of your service. This comes at
    /// the cost of more verbose and less strict APIs. Each RPC requires you to implement it in
    /// terms of a request stream and response stream. Where only a single request or response
    /// message is expected, you are responsible for enforcing this invariant is maintained.
    ///
    /// Where possible, prefer using the stricter, less-verbose ``ServiceProtocol``
    /// or ``SimpleServiceProtocol`` instead.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Transactions and queries for the Schedule Service.<br/>
    /// > The Schedule Service enables transactions to be submitted without all
    /// > required signatures and offers a `scheduleSign` transaction to provide
    /// > additional signatures independently after the schedule is created. The
    /// > scheduled transaction may be executed immediately when all required
    /// > signatures are present, or at expiration if "long term" schedules
    /// > are enabled in network configuration.
    /// > 
    /// > ### Execution
    /// > Scheduled transactions SHALL be executed under the following conditions.
    /// > 1. If "long term" schedules are enabled and `wait_for_expiry` is set for
    /// >    that schedule then the transaction SHALL NOT be executed before the
    /// >    network consensus time matches or exceeds the `expiration_time` field
    /// >    for that schedule.
    /// > 1. If "long term" schedules are enabled and `wait_for_expiry` is _not_ set
    /// >    for that schedule, then the transaction SHALL be executed when all
    /// >    signatures required by the scheduled transaction are active for that
    /// >    schedule. This MAY be immediately after the `scheduleCreate` or a
    /// >    subsequent `scheduleSign` transaction, or MAY be at expiration if
    /// >    the signature requirements are met at that time.
    /// > 1. If "long term" schedules are _disabled_, then the scheduled transaction
    /// >    SHALL be executed immediately after all signature requirements for the
    /// >    scheduled transaction are met during the `scheduleCreate` or a subsequent
    /// >    `scheduleSign` transaction. The scheduled transaction SHALL NOT be
    /// >    on expiration when "long term" schedules are disabled.
    /// > 
    /// > A schedule SHALL remain in state and MAY be queried with a `getScheduleInfo`
    /// > transaction after execution, until the schedule expires.<br/>
    /// > When network consensus time matches or exceeds the `expiration_time` for
    /// > a schedule, that schedule SHALL be removed from state, whether it has
    /// > executed or not.<br/>
    /// > If "long term" schedules are _disabled_, the maximum expiration time SHALL
    /// > be the consensus time of the `scheduleCreate` transaction extended by
    /// > the network configuration value `ledger.scheduleTxExpiryTimeSecs`.
    /// > 
    /// > ### Block Stream Effects
    /// > When a scheduled transaction is executed, the timestamp in the transaction
    /// > identifier for that transaction SHALL be 1 nanosecond after the consensus
    /// > timestamp for the transaction that resulted in its execution. If execution
    /// > occurred at expiration, that transaction may be almost any transaction,
    /// > including another scheduled transaction that executed at expiration.<br/>
    /// > The transaction identifier for a scheduled transaction that is executed
    /// > SHALL have the `scheduled` flag set and SHALL inherit the `accountID` and
    /// > `transactionValidStart` values from the `scheduleCreate` that created the
    /// > schedule.<br/>
    /// > The `scheduleRef` property of the record for a scheduled transaction SHALL
    /// > be populated with the schedule identifier of the schedule that executed.
    public protocol StreamingServiceProtocol: GRPCCore.RegistrableRPCService {
        /// Handle the "createSchedule" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Create a new Schedule.
        /// > <p>
        /// > If all signature requirements are met with this transaction, the
        /// > scheduled transaction MAY execute immediately.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Transaction` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_TransactionResponse` messages.
        func createSchedule(
            request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse>

        /// Handle the "signSchedule" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Add signatures to an existing schedule.
        /// > <p>
        /// > Signatures on this transaction SHALL be added to the set of active
        /// > signatures on the schedule, and MAY result in execution of the
        /// > scheduled transaction if all signature requirements are met.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Transaction` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_TransactionResponse` messages.
        func signSchedule(
            request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse>

        /// Handle the "deleteSchedule" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Mark an existing schedule deleted.
        /// > <p>
        /// > Once deleted a schedule SHALL NOT be executed and any subsequent
        /// > `scheduleSign` transaction SHALL fail.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Transaction` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_TransactionResponse` messages.
        func deleteSchedule(
            request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse>

        /// Handle the "getScheduleInfo" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve the metadata for a schedule.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Query` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_Response` messages.
        func getScheduleInfo(
            request: GRPCCore.StreamingServerRequest<Proto_Query>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_Response>
    }

    /// Service protocol for the "proto.ScheduleService" service.
    ///
    /// This protocol is higher level than ``StreamingServiceProtocol`` but lower level than
    /// the ``SimpleServiceProtocol``, it provides access to request and response metadata and
    /// trailing response metadata. If you don't need these then consider using
    /// the ``SimpleServiceProtocol``. If you need fine grained control over your RPCs then
    /// use ``StreamingServiceProtocol``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Transactions and queries for the Schedule Service.<br/>
    /// > The Schedule Service enables transactions to be submitted without all
    /// > required signatures and offers a `scheduleSign` transaction to provide
    /// > additional signatures independently after the schedule is created. The
    /// > scheduled transaction may be executed immediately when all required
    /// > signatures are present, or at expiration if "long term" schedules
    /// > are enabled in network configuration.
    /// > 
    /// > ### Execution
    /// > Scheduled transactions SHALL be executed under the following conditions.
    /// > 1. If "long term" schedules are enabled and `wait_for_expiry` is set for
    /// >    that schedule then the transaction SHALL NOT be executed before the
    /// >    network consensus time matches or exceeds the `expiration_time` field
    /// >    for that schedule.
    /// > 1. If "long term" schedules are enabled and `wait_for_expiry` is _not_ set
    /// >    for that schedule, then the transaction SHALL be executed when all
    /// >    signatures required by the scheduled transaction are active for that
    /// >    schedule. This MAY be immediately after the `scheduleCreate` or a
    /// >    subsequent `scheduleSign` transaction, or MAY be at expiration if
    /// >    the signature requirements are met at that time.
    /// > 1. If "long term" schedules are _disabled_, then the scheduled transaction
    /// >    SHALL be executed immediately after all signature requirements for the
    /// >    scheduled transaction are met during the `scheduleCreate` or a subsequent
    /// >    `scheduleSign` transaction. The scheduled transaction SHALL NOT be
    /// >    on expiration when "long term" schedules are disabled.
    /// > 
    /// > A schedule SHALL remain in state and MAY be queried with a `getScheduleInfo`
    /// > transaction after execution, until the schedule expires.<br/>
    /// > When network consensus time matches or exceeds the `expiration_time` for
    /// > a schedule, that schedule SHALL be removed from state, whether it has
    /// > executed or not.<br/>
    /// > If "long term" schedules are _disabled_, the maximum expiration time SHALL
    /// > be the consensus time of the `scheduleCreate` transaction extended by
    /// > the network configuration value `ledger.scheduleTxExpiryTimeSecs`.
    /// > 
    /// > ### Block Stream Effects
    /// > When a scheduled transaction is executed, the timestamp in the transaction
    /// > identifier for that transaction SHALL be 1 nanosecond after the consensus
    /// > timestamp for the transaction that resulted in its execution. If execution
    /// > occurred at expiration, that transaction may be almost any transaction,
    /// > including another scheduled transaction that executed at expiration.<br/>
    /// > The transaction identifier for a scheduled transaction that is executed
    /// > SHALL have the `scheduled` flag set and SHALL inherit the `accountID` and
    /// > `transactionValidStart` values from the `scheduleCreate` that created the
    /// > schedule.<br/>
    /// > The `scheduleRef` property of the record for a scheduled transaction SHALL
    /// > be populated with the schedule identifier of the schedule that executed.
    public protocol ServiceProtocol: Proto_ScheduleService.StreamingServiceProtocol {
        /// Handle the "createSchedule" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Create a new Schedule.
        /// > <p>
        /// > If all signature requirements are met with this transaction, the
        /// > scheduled transaction MAY execute immediately.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_TransactionResponse` message.
        func createSchedule(
            request: GRPCCore.ServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse>

        /// Handle the "signSchedule" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Add signatures to an existing schedule.
        /// > <p>
        /// > Signatures on this transaction SHALL be added to the set of active
        /// > signatures on the schedule, and MAY result in execution of the
        /// > scheduled transaction if all signature requirements are met.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_TransactionResponse` message.
        func signSchedule(
            request: GRPCCore.ServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse>

        /// Handle the "deleteSchedule" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Mark an existing schedule deleted.
        /// > <p>
        /// > Once deleted a schedule SHALL NOT be executed and any subsequent
        /// > `scheduleSign` transaction SHALL fail.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_TransactionResponse` message.
        func deleteSchedule(
            request: GRPCCore.ServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse>

        /// Handle the "getScheduleInfo" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve the metadata for a schedule.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Query` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_Response` message.
        func getScheduleInfo(
            request: GRPCCore.ServerRequest<Proto_Query>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_Response>
    }

    /// Simple service protocol for the "proto.ScheduleService" service.
    ///
    /// This is the highest level protocol for the service. The API is the easiest to use but
    /// doesn't provide access to request or response metadata. If you need access to these
    /// then use ``ServiceProtocol`` instead.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Transactions and queries for the Schedule Service.<br/>
    /// > The Schedule Service enables transactions to be submitted without all
    /// > required signatures and offers a `scheduleSign` transaction to provide
    /// > additional signatures independently after the schedule is created. The
    /// > scheduled transaction may be executed immediately when all required
    /// > signatures are present, or at expiration if "long term" schedules
    /// > are enabled in network configuration.
    /// > 
    /// > ### Execution
    /// > Scheduled transactions SHALL be executed under the following conditions.
    /// > 1. If "long term" schedules are enabled and `wait_for_expiry` is set for
    /// >    that schedule then the transaction SHALL NOT be executed before the
    /// >    network consensus time matches or exceeds the `expiration_time` field
    /// >    for that schedule.
    /// > 1. If "long term" schedules are enabled and `wait_for_expiry` is _not_ set
    /// >    for that schedule, then the transaction SHALL be executed when all
    /// >    signatures required by the scheduled transaction are active for that
    /// >    schedule. This MAY be immediately after the `scheduleCreate` or a
    /// >    subsequent `scheduleSign` transaction, or MAY be at expiration if
    /// >    the signature requirements are met at that time.
    /// > 1. If "long term" schedules are _disabled_, then the scheduled transaction
    /// >    SHALL be executed immediately after all signature requirements for the
    /// >    scheduled transaction are met during the `scheduleCreate` or a subsequent
    /// >    `scheduleSign` transaction. The scheduled transaction SHALL NOT be
    /// >    on expiration when "long term" schedules are disabled.
    /// > 
    /// > A schedule SHALL remain in state and MAY be queried with a `getScheduleInfo`
    /// > transaction after execution, until the schedule expires.<br/>
    /// > When network consensus time matches or exceeds the `expiration_time` for
    /// > a schedule, that schedule SHALL be removed from state, whether it has
    /// > executed or not.<br/>
    /// > If "long term" schedules are _disabled_, the maximum expiration time SHALL
    /// > be the consensus time of the `scheduleCreate` transaction extended by
    /// > the network configuration value `ledger.scheduleTxExpiryTimeSecs`.
    /// > 
    /// > ### Block Stream Effects
    /// > When a scheduled transaction is executed, the timestamp in the transaction
    /// > identifier for that transaction SHALL be 1 nanosecond after the consensus
    /// > timestamp for the transaction that resulted in its execution. If execution
    /// > occurred at expiration, that transaction may be almost any transaction,
    /// > including another scheduled transaction that executed at expiration.<br/>
    /// > The transaction identifier for a scheduled transaction that is executed
    /// > SHALL have the `scheduled` flag set and SHALL inherit the `accountID` and
    /// > `transactionValidStart` values from the `scheduleCreate` that created the
    /// > schedule.<br/>
    /// > The `scheduleRef` property of the record for a scheduled transaction SHALL
    /// > be populated with the schedule identifier of the schedule that executed.
    public protocol SimpleServiceProtocol: Proto_ScheduleService.ServiceProtocol {
        /// Handle the "createSchedule" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Create a new Schedule.
        /// > <p>
        /// > If all signature requirements are met with this transaction, the
        /// > scheduled transaction MAY execute immediately.
        ///
        /// - Parameters:
        ///   - request: A `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_TransactionResponse` to respond with.
        func createSchedule(
            request: Proto_Transaction,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_TransactionResponse

        /// Handle the "signSchedule" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Add signatures to an existing schedule.
        /// > <p>
        /// > Signatures on this transaction SHALL be added to the set of active
        /// > signatures on the schedule, and MAY result in execution of the
        /// > scheduled transaction if all signature requirements are met.
        ///
        /// - Parameters:
        ///   - request: A `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_TransactionResponse` to respond with.
        func signSchedule(
            request: Proto_Transaction,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_TransactionResponse

        /// Handle the "deleteSchedule" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Mark an existing schedule deleted.
        /// > <p>
        /// > Once deleted a schedule SHALL NOT be executed and any subsequent
        /// > `scheduleSign` transaction SHALL fail.
        ///
        /// - Parameters:
        ///   - request: A `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_TransactionResponse` to respond with.
        func deleteSchedule(
            request: Proto_Transaction,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_TransactionResponse

        /// Handle the "getScheduleInfo" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve the metadata for a schedule.
        ///
        /// - Parameters:
        ///   - request: A `Proto_Query` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_Response` to respond with.
        func getScheduleInfo(
            request: Proto_Query,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_Response
    }
}

// Default implementation of 'registerMethods(with:)'.
extension Proto_ScheduleService.StreamingServiceProtocol {
    public func registerMethods<Transport>(with router: inout GRPCCore.RPCRouter<Transport>) where Transport: GRPCCore.ServerTransport {
        router.registerHandler(
            forMethod: Proto_ScheduleService.Method.createSchedule.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Transaction>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_TransactionResponse>(),
            handler: { request, context in
                try await self.createSchedule(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_ScheduleService.Method.signSchedule.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Transaction>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_TransactionResponse>(),
            handler: { request, context in
                try await self.signSchedule(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_ScheduleService.Method.deleteSchedule.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Transaction>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_TransactionResponse>(),
            handler: { request, context in
                try await self.deleteSchedule(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_ScheduleService.Method.getScheduleInfo.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Query>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Response>(),
            handler: { request, context in
                try await self.getScheduleInfo(
                    request: request,
                    context: context
                )
            }
        )
    }
}

// Default implementation of streaming methods from 'StreamingServiceProtocol'.
extension Proto_ScheduleService.ServiceProtocol {
    public func createSchedule(
        request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse> {
        let response = try await self.createSchedule(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func signSchedule(
        request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse> {
        let response = try await self.signSchedule(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func deleteSchedule(
        request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse> {
        let response = try await self.deleteSchedule(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func getScheduleInfo(
        request: GRPCCore.StreamingServerRequest<Proto_Query>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_Response> {
        let response = try await self.getScheduleInfo(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }
}

// Default implementation of methods from 'ServiceProtocol'.
extension Proto_ScheduleService.SimpleServiceProtocol {
    public func createSchedule(
        request: GRPCCore.ServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse> {
        return GRPCCore.ServerResponse<Proto_TransactionResponse>(
            message: try await self.createSchedule(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func signSchedule(
        request: GRPCCore.ServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse> {
        return GRPCCore.ServerResponse<Proto_TransactionResponse>(
            message: try await self.signSchedule(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func deleteSchedule(
        request: GRPCCore.ServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse> {
        return GRPCCore.ServerResponse<Proto_TransactionResponse>(
            message: try await self.deleteSchedule(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func getScheduleInfo(
        request: GRPCCore.ServerRequest<Proto_Query>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_Response> {
        return GRPCCore.ServerResponse<Proto_Response>(
            message: try await self.getScheduleInfo(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }
}

// MARK: proto.ScheduleService (client)

extension Proto_ScheduleService {
    /// Generated client protocol for the "proto.ScheduleService" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Transactions and queries for the Schedule Service.<br/>
    /// > The Schedule Service enables transactions to be submitted without all
    /// > required signatures and offers a `scheduleSign` transaction to provide
    /// > additional signatures independently after the schedule is created. The
    /// > scheduled transaction may be executed immediately when all required
    /// > signatures are present, or at expiration if "long term" schedules
    /// > are enabled in network configuration.
    /// > 
    /// > ### Execution
    /// > Scheduled transactions SHALL be executed under the following conditions.
    /// > 1. If "long term" schedules are enabled and `wait_for_expiry` is set for
    /// >    that schedule then the transaction SHALL NOT be executed before the
    /// >    network consensus time matches or exceeds the `expiration_time` field
    /// >    for that schedule.
    /// > 1. If "long term" schedules are enabled and `wait_for_expiry` is _not_ set
    /// >    for that schedule, then the transaction SHALL be executed when all
    /// >    signatures required by the scheduled transaction are active for that
    /// >    schedule. This MAY be immediately after the `scheduleCreate` or a
    /// >    subsequent `scheduleSign` transaction, or MAY be at expiration if
    /// >    the signature requirements are met at that time.
    /// > 1. If "long term" schedules are _disabled_, then the scheduled transaction
    /// >    SHALL be executed immediately after all signature requirements for the
    /// >    scheduled transaction are met during the `scheduleCreate` or a subsequent
    /// >    `scheduleSign` transaction. The scheduled transaction SHALL NOT be
    /// >    on expiration when "long term" schedules are disabled.
    /// > 
    /// > A schedule SHALL remain in state and MAY be queried with a `getScheduleInfo`
    /// > transaction after execution, until the schedule expires.<br/>
    /// > When network consensus time matches or exceeds the `expiration_time` for
    /// > a schedule, that schedule SHALL be removed from state, whether it has
    /// > executed or not.<br/>
    /// > If "long term" schedules are _disabled_, the maximum expiration time SHALL
    /// > be the consensus time of the `scheduleCreate` transaction extended by
    /// > the network configuration value `ledger.scheduleTxExpiryTimeSecs`.
    /// > 
    /// > ### Block Stream Effects
    /// > When a scheduled transaction is executed, the timestamp in the transaction
    /// > identifier for that transaction SHALL be 1 nanosecond after the consensus
    /// > timestamp for the transaction that resulted in its execution. If execution
    /// > occurred at expiration, that transaction may be almost any transaction,
    /// > including another scheduled transaction that executed at expiration.<br/>
    /// > The transaction identifier for a scheduled transaction that is executed
    /// > SHALL have the `scheduled` flag set and SHALL inherit the `accountID` and
    /// > `transactionValidStart` values from the `scheduleCreate` that created the
    /// > schedule.<br/>
    /// > The `scheduleRef` property of the record for a scheduled transaction SHALL
    /// > be populated with the schedule identifier of the schedule that executed.
    public protocol ClientProtocol: Sendable {
        /// Call the "createSchedule" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Create a new Schedule.
        /// > <p>
        /// > If all signature requirements are met with this transaction, the
        /// > scheduled transaction MAY execute immediately.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func createSchedule<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "signSchedule" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Add signatures to an existing schedule.
        /// > <p>
        /// > Signatures on this transaction SHALL be added to the set of active
        /// > signatures on the schedule, and MAY result in execution of the
        /// > scheduled transaction if all signature requirements are met.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func signSchedule<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "deleteSchedule" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Mark an existing schedule deleted.
        /// > <p>
        /// > Once deleted a schedule SHALL NOT be executed and any subsequent
        /// > `scheduleSign` transaction SHALL fail.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteSchedule<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "getScheduleInfo" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve the metadata for a schedule.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Query` message.
        ///   - serializer: A serializer for `Proto_Query` messages.
        ///   - deserializer: A deserializer for `Proto_Response` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getScheduleInfo<Result>(
            request: GRPCCore.ClientRequest<Proto_Query>,
            serializer: some GRPCCore.MessageSerializer<Proto_Query>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_Response>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "proto.ScheduleService" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Transactions and queries for the Schedule Service.<br/>
    /// > The Schedule Service enables transactions to be submitted without all
    /// > required signatures and offers a `scheduleSign` transaction to provide
    /// > additional signatures independently after the schedule is created. The
    /// > scheduled transaction may be executed immediately when all required
    /// > signatures are present, or at expiration if "long term" schedules
    /// > are enabled in network configuration.
    /// > 
    /// > ### Execution
    /// > Scheduled transactions SHALL be executed under the following conditions.
    /// > 1. If "long term" schedules are enabled and `wait_for_expiry` is set for
    /// >    that schedule then the transaction SHALL NOT be executed before the
    /// >    network consensus time matches or exceeds the `expiration_time` field
    /// >    for that schedule.
    /// > 1. If "long term" schedules are enabled and `wait_for_expiry` is _not_ set
    /// >    for that schedule, then the transaction SHALL be executed when all
    /// >    signatures required by the scheduled transaction are active for that
    /// >    schedule. This MAY be immediately after the `scheduleCreate` or a
    /// >    subsequent `scheduleSign` transaction, or MAY be at expiration if
    /// >    the signature requirements are met at that time.
    /// > 1. If "long term" schedules are _disabled_, then the scheduled transaction
    /// >    SHALL be executed immediately after all signature requirements for the
    /// >    scheduled transaction are met during the `scheduleCreate` or a subsequent
    /// >    `scheduleSign` transaction. The scheduled transaction SHALL NOT be
    /// >    on expiration when "long term" schedules are disabled.
    /// > 
    /// > A schedule SHALL remain in state and MAY be queried with a `getScheduleInfo`
    /// > transaction after execution, until the schedule expires.<br/>
    /// > When network consensus time matches or exceeds the `expiration_time` for
    /// > a schedule, that schedule SHALL be removed from state, whether it has
    /// > executed or not.<br/>
    /// > If "long term" schedules are _disabled_, the maximum expiration time SHALL
    /// > be the consensus time of the `scheduleCreate` transaction extended by
    /// > the network configuration value `ledger.scheduleTxExpiryTimeSecs`.
    /// > 
    /// > ### Block Stream Effects
    /// > When a scheduled transaction is executed, the timestamp in the transaction
    /// > identifier for that transaction SHALL be 1 nanosecond after the consensus
    /// > timestamp for the transaction that resulted in its execution. If execution
    /// > occurred at expiration, that transaction may be almost any transaction,
    /// > including another scheduled transaction that executed at expiration.<br/>
    /// > The transaction identifier for a scheduled transaction that is executed
    /// > SHALL have the `scheduled` flag set and SHALL inherit the `accountID` and
    /// > `transactionValidStart` values from the `scheduleCreate` that created the
    /// > schedule.<br/>
    /// > The `scheduleRef` property of the record for a scheduled transaction SHALL
    /// > be populated with the schedule identifier of the schedule that executed.
    public struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        public init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "createSchedule" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Create a new Schedule.
        /// > <p>
        /// > If all signature requirements are met with this transaction, the
        /// > scheduled transaction MAY execute immediately.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func createSchedule<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_ScheduleService.Method.createSchedule.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "signSchedule" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Add signatures to an existing schedule.
        /// > <p>
        /// > Signatures on this transaction SHALL be added to the set of active
        /// > signatures on the schedule, and MAY result in execution of the
        /// > scheduled transaction if all signature requirements are met.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func signSchedule<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_ScheduleService.Method.signSchedule.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "deleteSchedule" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Mark an existing schedule deleted.
        /// > <p>
        /// > Once deleted a schedule SHALL NOT be executed and any subsequent
        /// > `scheduleSign` transaction SHALL fail.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func deleteSchedule<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_ScheduleService.Method.deleteSchedule.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "getScheduleInfo" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve the metadata for a schedule.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Query` message.
        ///   - serializer: A serializer for `Proto_Query` messages.
        ///   - deserializer: A deserializer for `Proto_Response` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func getScheduleInfo<Result>(
            request: GRPCCore.ClientRequest<Proto_Query>,
            serializer: some GRPCCore.MessageSerializer<Proto_Query>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_Response>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_ScheduleService.Method.getScheduleInfo.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
extension Proto_ScheduleService.ClientProtocol {
    /// Call the "createSchedule" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Create a new Schedule.
    /// > <p>
    /// > If all signature requirements are met with this transaction, the
    /// > scheduled transaction MAY execute immediately.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Transaction` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createSchedule<Result>(
        request: GRPCCore.ClientRequest<Proto_Transaction>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.createSchedule(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Transaction>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_TransactionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "signSchedule" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Add signatures to an existing schedule.
    /// > <p>
    /// > Signatures on this transaction SHALL be added to the set of active
    /// > signatures on the schedule, and MAY result in execution of the
    /// > scheduled transaction if all signature requirements are met.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Transaction` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func signSchedule<Result>(
        request: GRPCCore.ClientRequest<Proto_Transaction>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.signSchedule(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Transaction>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_TransactionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "deleteSchedule" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Mark an existing schedule deleted.
    /// > <p>
    /// > Once deleted a schedule SHALL NOT be executed and any subsequent
    /// > `scheduleSign` transaction SHALL fail.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Transaction` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteSchedule<Result>(
        request: GRPCCore.ClientRequest<Proto_Transaction>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteSchedule(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Transaction>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_TransactionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "getScheduleInfo" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Retrieve the metadata for a schedule.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Query` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getScheduleInfo<Result>(
        request: GRPCCore.ClientRequest<Proto_Query>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getScheduleInfo(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Query>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Response>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
extension Proto_ScheduleService.ClientProtocol {
    /// Call the "createSchedule" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Create a new Schedule.
    /// > <p>
    /// > If all signature requirements are met with this transaction, the
    /// > scheduled transaction MAY execute immediately.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createSchedule<Result>(
        _ message: Proto_Transaction,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Transaction>(
            message: message,
            metadata: metadata
        )
        return try await self.createSchedule(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "signSchedule" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Add signatures to an existing schedule.
    /// > <p>
    /// > Signatures on this transaction SHALL be added to the set of active
    /// > signatures on the schedule, and MAY result in execution of the
    /// > scheduled transaction if all signature requirements are met.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func signSchedule<Result>(
        _ message: Proto_Transaction,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Transaction>(
            message: message,
            metadata: metadata
        )
        return try await self.signSchedule(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "deleteSchedule" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Mark an existing schedule deleted.
    /// > <p>
    /// > Once deleted a schedule SHALL NOT be executed and any subsequent
    /// > `scheduleSign` transaction SHALL fail.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteSchedule<Result>(
        _ message: Proto_Transaction,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Transaction>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteSchedule(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "getScheduleInfo" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Retrieve the metadata for a schedule.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getScheduleInfo<Result>(
        _ message: Proto_Query,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Query>(
            message: message,
            metadata: metadata
        )
        return try await self.getScheduleInfo(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}