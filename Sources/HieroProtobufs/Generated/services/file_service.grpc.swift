///*
/// # File Service
/// gRPC definitions for the Hedera File Service (HFS).
///
/// The HFS manages bulk data in the form of byte arrays of arbitrary
/// size, up to a network-configured maximum size. These files are
/// most often used to store bulk data for distributed applications
/// and smart contracts.
///
/// ### Keywords
/// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
/// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
/// document are to be interpreted as described in
/// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
/// [RFC8174](https://www.ietf.org/rfc/rfc8174).

// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: services/file_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf

// MARK: - proto.FileService

/// Namespace containing generated types for the "proto.FileService" service.
public enum Proto_FileService {
    /// Service descriptor for the "proto.FileService" service.
    public static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.FileService")
    /// Namespace for method metadata.
    public enum Method {
        /// Namespace for "createFile" metadata.
        public enum createFile {
            /// Request type for "createFile".
            public typealias Input = Proto_Transaction
            /// Response type for "createFile".
            public typealias Output = Proto_TransactionResponse
            /// Descriptor for "createFile".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.FileService"),
                method: "createFile"
            )
        }
        /// Namespace for "updateFile" metadata.
        public enum updateFile {
            /// Request type for "updateFile".
            public typealias Input = Proto_Transaction
            /// Response type for "updateFile".
            public typealias Output = Proto_TransactionResponse
            /// Descriptor for "updateFile".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.FileService"),
                method: "updateFile"
            )
        }
        /// Namespace for "deleteFile" metadata.
        public enum deleteFile {
            /// Request type for "deleteFile".
            public typealias Input = Proto_Transaction
            /// Response type for "deleteFile".
            public typealias Output = Proto_TransactionResponse
            /// Descriptor for "deleteFile".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.FileService"),
                method: "deleteFile"
            )
        }
        /// Namespace for "appendContent" metadata.
        public enum appendContent {
            /// Request type for "appendContent".
            public typealias Input = Proto_Transaction
            /// Response type for "appendContent".
            public typealias Output = Proto_TransactionResponse
            /// Descriptor for "appendContent".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.FileService"),
                method: "appendContent"
            )
        }
        /// Namespace for "getFileContent" metadata.
        public enum getFileContent {
            /// Request type for "getFileContent".
            public typealias Input = Proto_Query
            /// Response type for "getFileContent".
            public typealias Output = Proto_Response
            /// Descriptor for "getFileContent".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.FileService"),
                method: "getFileContent"
            )
        }
        /// Namespace for "getFileInfo" metadata.
        public enum getFileInfo {
            /// Request type for "getFileInfo".
            public typealias Input = Proto_Query
            /// Response type for "getFileInfo".
            public typealias Output = Proto_Response
            /// Descriptor for "getFileInfo".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.FileService"),
                method: "getFileInfo"
            )
        }
        /// Namespace for "systemDelete" metadata.
        public enum systemDelete {
            /// Request type for "systemDelete".
            public typealias Input = Proto_Transaction
            /// Response type for "systemDelete".
            public typealias Output = Proto_TransactionResponse
            /// Descriptor for "systemDelete".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.FileService"),
                method: "systemDelete"
            )
        }
        /// Namespace for "systemUndelete" metadata.
        public enum systemUndelete {
            /// Request type for "systemUndelete".
            public typealias Input = Proto_Transaction
            /// Response type for "systemUndelete".
            public typealias Output = Proto_TransactionResponse
            /// Descriptor for "systemUndelete".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.FileService"),
                method: "systemUndelete"
            )
        }
        /// Descriptors for all methods in the "proto.FileService" service.
        public static let descriptors: [GRPCCore.MethodDescriptor] = [
            createFile.descriptor,
            updateFile.descriptor,
            deleteFile.descriptor,
            appendContent.descriptor,
            getFileContent.descriptor,
            getFileInfo.descriptor,
            systemDelete.descriptor,
            systemUndelete.descriptor
        ]
    }
}

extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "proto.FileService" service.
    public static let proto_FileService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.FileService")
}

// MARK: proto.FileService (server)

extension Proto_FileService {
    /// Streaming variant of the service protocol for the "proto.FileService" service.
    ///
    /// This protocol is the lowest-level of the service protocols generated for this service
    /// giving you the most flexibility over the implementation of your service. This comes at
    /// the cost of more verbose and less strict APIs. Each RPC requires you to implement it in
    /// terms of a request stream and response stream. Where only a single request or response
    /// message is expected, you are responsible for enforcing this invariant is maintained.
    ///
    /// Where possible, prefer using the stricter, less-verbose ``ServiceProtocol``
    /// or ``SimpleServiceProtocol`` instead.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Service gRPC definitions for the Hedera File Service (HFS).
    /// > 
    /// > #### Signature Requirements
    /// > The HFS manages file authorization differently, depending on type of file
    /// > transaction, and this can be surprising.<br/>
    /// > The core element of file authorization is the `keys` field,
    /// > which is a `KeyList`; a list of individual `Key` messages, each of which
    /// > may represent a simple or complex key.<br/>
    /// > The file service transactions treat this list differently.<br/>
    /// > A `fileCreate`, `fileAppend`, or `fileUpdate` MUST have a valid signature
    /// > from _each_ key in the list.<br/>
    /// > A `fileDelete` MUST have a valid signature from _at least one_ key in
    /// > the list. This is different, and allows a file "owned" by many entities
    /// > to be deleted by any one of those entities. A deleted file cannot be
    /// > restored, so it is important to consider this when assigning keys for
    /// > a file.<br/>
    /// > If any of the keys in a `KeyList` are complex, the full requirements of
    /// > each complex key must be met to count as a "valid signature" for that key.
    /// > A complex key structure (i.e. a `ThresholdKey`, or `KeyList`, possibly
    /// > including additional `ThresholdKey` or `KeyList` descendants) may be
    /// > assigned as the sole entry in a file `keys` field to ensure all transactions
    /// > have the same signature requirements.
    public protocol StreamingServiceProtocol: GRPCCore.RegistrableRPCService {
        /// Handle the "createFile" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Create a file in HFS.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Transaction` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_TransactionResponse` messages.
        func createFile(
            request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse>

        /// Handle the "updateFile" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Update a file in HFS.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Transaction` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_TransactionResponse` messages.
        func updateFile(
            request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse>

        /// Handle the "deleteFile" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Delete a file in HFS.<br/>
        /// > The content of a file deleted in this manner is completely removed
        /// > from network state, but the file metadata remains.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Transaction` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_TransactionResponse` messages.
        func deleteFile(
            request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse>

        /// Handle the "appendContent" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Append content to a file in HFS.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Transaction` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_TransactionResponse` messages.
        func appendContent(
            request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse>

        /// Handle the "getFileContent" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve the content of a file in HFS.<br/>
        /// > Note that this query retrieves _only_ the file content, not any of
        /// > the metadata for the file.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Query` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_Response` messages.
        func getFileContent(
            request: GRPCCore.StreamingServerRequest<Proto_Query>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_Response>

        /// Handle the "getFileInfo" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve the metadata for a file in HFS.<br/>
        /// > Note that this query does not retrieve the file _content_.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Query` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_Response` messages.
        func getFileInfo(
            request: GRPCCore.StreamingServerRequest<Proto_Query>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_Response>

        /// Handle the "systemDelete" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Delete a "regular" file without "owner" authorization.<br/>
        /// > This transaction _does not_ require signatures for the keys in
        /// > the file `keys` list, but must be signed by a "privileged" account.
        /// > <p>
        /// > This transaction SHALL NOT accept a file identifier for
        /// > a "system" file.<br/>
        /// > This transaction SHALL NOT remove the _content_ of the file from state.
        /// > This permits use of the `systemUndelete` to reverse this action if
        /// > performed in error.
        /// > <p>
        /// > This is a privileged transaction, and only accounts 2-59 are permitted
        /// > to call this function, by default. The actual restriction is in the
        /// > `api-permission.properties` file in the consensus node configuration.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Transaction` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_TransactionResponse` messages.
        func systemDelete(
            request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse>

        /// Handle the "systemUndelete" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Undelete a "regular" file.
        /// > This transaction must be signed by a "privileged" account.<br/>
        /// > <p>
        /// > This transaction SHALL NOT accept a file identifier for
        /// > a "system" file.<br/>
        /// > The file identified SHOULD have been previously deleted.<br/>
        /// > This transaction SHALL NOT recover the _content_ of a file unless that
        /// > file was deleted with a `systemDelete` transaction. The _content_ of a
        /// > file deleted with a `fileDelete` transaction is not retained in state.
        /// > <p>
        /// > This is a privileged transaction, and only accounts 2-60 are permitted
        /// > to call this function, by default. The actual restriction is in the
        /// > `api-permission.properties` file in the consensus node configuration.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Transaction` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_TransactionResponse` messages.
        func systemUndelete(
            request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse>
    }

    /// Service protocol for the "proto.FileService" service.
    ///
    /// This protocol is higher level than ``StreamingServiceProtocol`` but lower level than
    /// the ``SimpleServiceProtocol``, it provides access to request and response metadata and
    /// trailing response metadata. If you don't need these then consider using
    /// the ``SimpleServiceProtocol``. If you need fine grained control over your RPCs then
    /// use ``StreamingServiceProtocol``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Service gRPC definitions for the Hedera File Service (HFS).
    /// > 
    /// > #### Signature Requirements
    /// > The HFS manages file authorization differently, depending on type of file
    /// > transaction, and this can be surprising.<br/>
    /// > The core element of file authorization is the `keys` field,
    /// > which is a `KeyList`; a list of individual `Key` messages, each of which
    /// > may represent a simple or complex key.<br/>
    /// > The file service transactions treat this list differently.<br/>
    /// > A `fileCreate`, `fileAppend`, or `fileUpdate` MUST have a valid signature
    /// > from _each_ key in the list.<br/>
    /// > A `fileDelete` MUST have a valid signature from _at least one_ key in
    /// > the list. This is different, and allows a file "owned" by many entities
    /// > to be deleted by any one of those entities. A deleted file cannot be
    /// > restored, so it is important to consider this when assigning keys for
    /// > a file.<br/>
    /// > If any of the keys in a `KeyList` are complex, the full requirements of
    /// > each complex key must be met to count as a "valid signature" for that key.
    /// > A complex key structure (i.e. a `ThresholdKey`, or `KeyList`, possibly
    /// > including additional `ThresholdKey` or `KeyList` descendants) may be
    /// > assigned as the sole entry in a file `keys` field to ensure all transactions
    /// > have the same signature requirements.
    public protocol ServiceProtocol: Proto_FileService.StreamingServiceProtocol {
        /// Handle the "createFile" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Create a file in HFS.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_TransactionResponse` message.
        func createFile(
            request: GRPCCore.ServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse>

        /// Handle the "updateFile" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Update a file in HFS.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_TransactionResponse` message.
        func updateFile(
            request: GRPCCore.ServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse>

        /// Handle the "deleteFile" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Delete a file in HFS.<br/>
        /// > The content of a file deleted in this manner is completely removed
        /// > from network state, but the file metadata remains.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_TransactionResponse` message.
        func deleteFile(
            request: GRPCCore.ServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse>

        /// Handle the "appendContent" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Append content to a file in HFS.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_TransactionResponse` message.
        func appendContent(
            request: GRPCCore.ServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse>

        /// Handle the "getFileContent" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve the content of a file in HFS.<br/>
        /// > Note that this query retrieves _only_ the file content, not any of
        /// > the metadata for the file.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Query` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_Response` message.
        func getFileContent(
            request: GRPCCore.ServerRequest<Proto_Query>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_Response>

        /// Handle the "getFileInfo" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve the metadata for a file in HFS.<br/>
        /// > Note that this query does not retrieve the file _content_.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Query` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_Response` message.
        func getFileInfo(
            request: GRPCCore.ServerRequest<Proto_Query>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_Response>

        /// Handle the "systemDelete" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Delete a "regular" file without "owner" authorization.<br/>
        /// > This transaction _does not_ require signatures for the keys in
        /// > the file `keys` list, but must be signed by a "privileged" account.
        /// > <p>
        /// > This transaction SHALL NOT accept a file identifier for
        /// > a "system" file.<br/>
        /// > This transaction SHALL NOT remove the _content_ of the file from state.
        /// > This permits use of the `systemUndelete` to reverse this action if
        /// > performed in error.
        /// > <p>
        /// > This is a privileged transaction, and only accounts 2-59 are permitted
        /// > to call this function, by default. The actual restriction is in the
        /// > `api-permission.properties` file in the consensus node configuration.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_TransactionResponse` message.
        func systemDelete(
            request: GRPCCore.ServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse>

        /// Handle the "systemUndelete" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Undelete a "regular" file.
        /// > This transaction must be signed by a "privileged" account.<br/>
        /// > <p>
        /// > This transaction SHALL NOT accept a file identifier for
        /// > a "system" file.<br/>
        /// > The file identified SHOULD have been previously deleted.<br/>
        /// > This transaction SHALL NOT recover the _content_ of a file unless that
        /// > file was deleted with a `systemDelete` transaction. The _content_ of a
        /// > file deleted with a `fileDelete` transaction is not retained in state.
        /// > <p>
        /// > This is a privileged transaction, and only accounts 2-60 are permitted
        /// > to call this function, by default. The actual restriction is in the
        /// > `api-permission.properties` file in the consensus node configuration.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_TransactionResponse` message.
        func systemUndelete(
            request: GRPCCore.ServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse>
    }

    /// Simple service protocol for the "proto.FileService" service.
    ///
    /// This is the highest level protocol for the service. The API is the easiest to use but
    /// doesn't provide access to request or response metadata. If you need access to these
    /// then use ``ServiceProtocol`` instead.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Service gRPC definitions for the Hedera File Service (HFS).
    /// > 
    /// > #### Signature Requirements
    /// > The HFS manages file authorization differently, depending on type of file
    /// > transaction, and this can be surprising.<br/>
    /// > The core element of file authorization is the `keys` field,
    /// > which is a `KeyList`; a list of individual `Key` messages, each of which
    /// > may represent a simple or complex key.<br/>
    /// > The file service transactions treat this list differently.<br/>
    /// > A `fileCreate`, `fileAppend`, or `fileUpdate` MUST have a valid signature
    /// > from _each_ key in the list.<br/>
    /// > A `fileDelete` MUST have a valid signature from _at least one_ key in
    /// > the list. This is different, and allows a file "owned" by many entities
    /// > to be deleted by any one of those entities. A deleted file cannot be
    /// > restored, so it is important to consider this when assigning keys for
    /// > a file.<br/>
    /// > If any of the keys in a `KeyList` are complex, the full requirements of
    /// > each complex key must be met to count as a "valid signature" for that key.
    /// > A complex key structure (i.e. a `ThresholdKey`, or `KeyList`, possibly
    /// > including additional `ThresholdKey` or `KeyList` descendants) may be
    /// > assigned as the sole entry in a file `keys` field to ensure all transactions
    /// > have the same signature requirements.
    public protocol SimpleServiceProtocol: Proto_FileService.ServiceProtocol {
        /// Handle the "createFile" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Create a file in HFS.
        ///
        /// - Parameters:
        ///   - request: A `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_TransactionResponse` to respond with.
        func createFile(
            request: Proto_Transaction,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_TransactionResponse

        /// Handle the "updateFile" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Update a file in HFS.
        ///
        /// - Parameters:
        ///   - request: A `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_TransactionResponse` to respond with.
        func updateFile(
            request: Proto_Transaction,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_TransactionResponse

        /// Handle the "deleteFile" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Delete a file in HFS.<br/>
        /// > The content of a file deleted in this manner is completely removed
        /// > from network state, but the file metadata remains.
        ///
        /// - Parameters:
        ///   - request: A `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_TransactionResponse` to respond with.
        func deleteFile(
            request: Proto_Transaction,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_TransactionResponse

        /// Handle the "appendContent" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Append content to a file in HFS.
        ///
        /// - Parameters:
        ///   - request: A `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_TransactionResponse` to respond with.
        func appendContent(
            request: Proto_Transaction,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_TransactionResponse

        /// Handle the "getFileContent" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve the content of a file in HFS.<br/>
        /// > Note that this query retrieves _only_ the file content, not any of
        /// > the metadata for the file.
        ///
        /// - Parameters:
        ///   - request: A `Proto_Query` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_Response` to respond with.
        func getFileContent(
            request: Proto_Query,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_Response

        /// Handle the "getFileInfo" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve the metadata for a file in HFS.<br/>
        /// > Note that this query does not retrieve the file _content_.
        ///
        /// - Parameters:
        ///   - request: A `Proto_Query` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_Response` to respond with.
        func getFileInfo(
            request: Proto_Query,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_Response

        /// Handle the "systemDelete" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Delete a "regular" file without "owner" authorization.<br/>
        /// > This transaction _does not_ require signatures for the keys in
        /// > the file `keys` list, but must be signed by a "privileged" account.
        /// > <p>
        /// > This transaction SHALL NOT accept a file identifier for
        /// > a "system" file.<br/>
        /// > This transaction SHALL NOT remove the _content_ of the file from state.
        /// > This permits use of the `systemUndelete` to reverse this action if
        /// > performed in error.
        /// > <p>
        /// > This is a privileged transaction, and only accounts 2-59 are permitted
        /// > to call this function, by default. The actual restriction is in the
        /// > `api-permission.properties` file in the consensus node configuration.
        ///
        /// - Parameters:
        ///   - request: A `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_TransactionResponse` to respond with.
        func systemDelete(
            request: Proto_Transaction,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_TransactionResponse

        /// Handle the "systemUndelete" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Undelete a "regular" file.
        /// > This transaction must be signed by a "privileged" account.<br/>
        /// > <p>
        /// > This transaction SHALL NOT accept a file identifier for
        /// > a "system" file.<br/>
        /// > The file identified SHOULD have been previously deleted.<br/>
        /// > This transaction SHALL NOT recover the _content_ of a file unless that
        /// > file was deleted with a `systemDelete` transaction. The _content_ of a
        /// > file deleted with a `fileDelete` transaction is not retained in state.
        /// > <p>
        /// > This is a privileged transaction, and only accounts 2-60 are permitted
        /// > to call this function, by default. The actual restriction is in the
        /// > `api-permission.properties` file in the consensus node configuration.
        ///
        /// - Parameters:
        ///   - request: A `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_TransactionResponse` to respond with.
        func systemUndelete(
            request: Proto_Transaction,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_TransactionResponse
    }
}

// Default implementation of 'registerMethods(with:)'.
extension Proto_FileService.StreamingServiceProtocol {
    public func registerMethods<Transport>(with router: inout GRPCCore.RPCRouter<Transport>) where Transport: GRPCCore.ServerTransport {
        router.registerHandler(
            forMethod: Proto_FileService.Method.createFile.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Transaction>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_TransactionResponse>(),
            handler: { request, context in
                try await self.createFile(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_FileService.Method.updateFile.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Transaction>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_TransactionResponse>(),
            handler: { request, context in
                try await self.updateFile(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_FileService.Method.deleteFile.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Transaction>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_TransactionResponse>(),
            handler: { request, context in
                try await self.deleteFile(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_FileService.Method.appendContent.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Transaction>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_TransactionResponse>(),
            handler: { request, context in
                try await self.appendContent(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_FileService.Method.getFileContent.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Query>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Response>(),
            handler: { request, context in
                try await self.getFileContent(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_FileService.Method.getFileInfo.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Query>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Response>(),
            handler: { request, context in
                try await self.getFileInfo(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_FileService.Method.systemDelete.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Transaction>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_TransactionResponse>(),
            handler: { request, context in
                try await self.systemDelete(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_FileService.Method.systemUndelete.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Transaction>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_TransactionResponse>(),
            handler: { request, context in
                try await self.systemUndelete(
                    request: request,
                    context: context
                )
            }
        )
    }
}

// Default implementation of streaming methods from 'StreamingServiceProtocol'.
extension Proto_FileService.ServiceProtocol {
    public func createFile(
        request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse> {
        let response = try await self.createFile(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func updateFile(
        request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse> {
        let response = try await self.updateFile(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func deleteFile(
        request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse> {
        let response = try await self.deleteFile(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func appendContent(
        request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse> {
        let response = try await self.appendContent(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func getFileContent(
        request: GRPCCore.StreamingServerRequest<Proto_Query>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_Response> {
        let response = try await self.getFileContent(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func getFileInfo(
        request: GRPCCore.StreamingServerRequest<Proto_Query>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_Response> {
        let response = try await self.getFileInfo(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func systemDelete(
        request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse> {
        let response = try await self.systemDelete(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func systemUndelete(
        request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse> {
        let response = try await self.systemUndelete(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }
}

// Default implementation of methods from 'ServiceProtocol'.
extension Proto_FileService.SimpleServiceProtocol {
    public func createFile(
        request: GRPCCore.ServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse> {
        return GRPCCore.ServerResponse<Proto_TransactionResponse>(
            message: try await self.createFile(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func updateFile(
        request: GRPCCore.ServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse> {
        return GRPCCore.ServerResponse<Proto_TransactionResponse>(
            message: try await self.updateFile(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func deleteFile(
        request: GRPCCore.ServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse> {
        return GRPCCore.ServerResponse<Proto_TransactionResponse>(
            message: try await self.deleteFile(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func appendContent(
        request: GRPCCore.ServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse> {
        return GRPCCore.ServerResponse<Proto_TransactionResponse>(
            message: try await self.appendContent(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func getFileContent(
        request: GRPCCore.ServerRequest<Proto_Query>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_Response> {
        return GRPCCore.ServerResponse<Proto_Response>(
            message: try await self.getFileContent(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func getFileInfo(
        request: GRPCCore.ServerRequest<Proto_Query>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_Response> {
        return GRPCCore.ServerResponse<Proto_Response>(
            message: try await self.getFileInfo(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func systemDelete(
        request: GRPCCore.ServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse> {
        return GRPCCore.ServerResponse<Proto_TransactionResponse>(
            message: try await self.systemDelete(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func systemUndelete(
        request: GRPCCore.ServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse> {
        return GRPCCore.ServerResponse<Proto_TransactionResponse>(
            message: try await self.systemUndelete(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }
}

// MARK: proto.FileService (client)

extension Proto_FileService {
    /// Generated client protocol for the "proto.FileService" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Service gRPC definitions for the Hedera File Service (HFS).
    /// > 
    /// > #### Signature Requirements
    /// > The HFS manages file authorization differently, depending on type of file
    /// > transaction, and this can be surprising.<br/>
    /// > The core element of file authorization is the `keys` field,
    /// > which is a `KeyList`; a list of individual `Key` messages, each of which
    /// > may represent a simple or complex key.<br/>
    /// > The file service transactions treat this list differently.<br/>
    /// > A `fileCreate`, `fileAppend`, or `fileUpdate` MUST have a valid signature
    /// > from _each_ key in the list.<br/>
    /// > A `fileDelete` MUST have a valid signature from _at least one_ key in
    /// > the list. This is different, and allows a file "owned" by many entities
    /// > to be deleted by any one of those entities. A deleted file cannot be
    /// > restored, so it is important to consider this when assigning keys for
    /// > a file.<br/>
    /// > If any of the keys in a `KeyList` are complex, the full requirements of
    /// > each complex key must be met to count as a "valid signature" for that key.
    /// > A complex key structure (i.e. a `ThresholdKey`, or `KeyList`, possibly
    /// > including additional `ThresholdKey` or `KeyList` descendants) may be
    /// > assigned as the sole entry in a file `keys` field to ensure all transactions
    /// > have the same signature requirements.
    public protocol ClientProtocol: Sendable {
        /// Call the "createFile" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Create a file in HFS.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func createFile<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "updateFile" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Update a file in HFS.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func updateFile<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "deleteFile" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Delete a file in HFS.<br/>
        /// > The content of a file deleted in this manner is completely removed
        /// > from network state, but the file metadata remains.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteFile<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "appendContent" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Append content to a file in HFS.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func appendContent<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "getFileContent" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve the content of a file in HFS.<br/>
        /// > Note that this query retrieves _only_ the file content, not any of
        /// > the metadata for the file.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Query` message.
        ///   - serializer: A serializer for `Proto_Query` messages.
        ///   - deserializer: A deserializer for `Proto_Response` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getFileContent<Result>(
            request: GRPCCore.ClientRequest<Proto_Query>,
            serializer: some GRPCCore.MessageSerializer<Proto_Query>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_Response>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "getFileInfo" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve the metadata for a file in HFS.<br/>
        /// > Note that this query does not retrieve the file _content_.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Query` message.
        ///   - serializer: A serializer for `Proto_Query` messages.
        ///   - deserializer: A deserializer for `Proto_Response` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getFileInfo<Result>(
            request: GRPCCore.ClientRequest<Proto_Query>,
            serializer: some GRPCCore.MessageSerializer<Proto_Query>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_Response>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "systemDelete" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Delete a "regular" file without "owner" authorization.<br/>
        /// > This transaction _does not_ require signatures for the keys in
        /// > the file `keys` list, but must be signed by a "privileged" account.
        /// > <p>
        /// > This transaction SHALL NOT accept a file identifier for
        /// > a "system" file.<br/>
        /// > This transaction SHALL NOT remove the _content_ of the file from state.
        /// > This permits use of the `systemUndelete` to reverse this action if
        /// > performed in error.
        /// > <p>
        /// > This is a privileged transaction, and only accounts 2-59 are permitted
        /// > to call this function, by default. The actual restriction is in the
        /// > `api-permission.properties` file in the consensus node configuration.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func systemDelete<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "systemUndelete" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Undelete a "regular" file.
        /// > This transaction must be signed by a "privileged" account.<br/>
        /// > <p>
        /// > This transaction SHALL NOT accept a file identifier for
        /// > a "system" file.<br/>
        /// > The file identified SHOULD have been previously deleted.<br/>
        /// > This transaction SHALL NOT recover the _content_ of a file unless that
        /// > file was deleted with a `systemDelete` transaction. The _content_ of a
        /// > file deleted with a `fileDelete` transaction is not retained in state.
        /// > <p>
        /// > This is a privileged transaction, and only accounts 2-60 are permitted
        /// > to call this function, by default. The actual restriction is in the
        /// > `api-permission.properties` file in the consensus node configuration.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func systemUndelete<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "proto.FileService" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Service gRPC definitions for the Hedera File Service (HFS).
    /// > 
    /// > #### Signature Requirements
    /// > The HFS manages file authorization differently, depending on type of file
    /// > transaction, and this can be surprising.<br/>
    /// > The core element of file authorization is the `keys` field,
    /// > which is a `KeyList`; a list of individual `Key` messages, each of which
    /// > may represent a simple or complex key.<br/>
    /// > The file service transactions treat this list differently.<br/>
    /// > A `fileCreate`, `fileAppend`, or `fileUpdate` MUST have a valid signature
    /// > from _each_ key in the list.<br/>
    /// > A `fileDelete` MUST have a valid signature from _at least one_ key in
    /// > the list. This is different, and allows a file "owned" by many entities
    /// > to be deleted by any one of those entities. A deleted file cannot be
    /// > restored, so it is important to consider this when assigning keys for
    /// > a file.<br/>
    /// > If any of the keys in a `KeyList` are complex, the full requirements of
    /// > each complex key must be met to count as a "valid signature" for that key.
    /// > A complex key structure (i.e. a `ThresholdKey`, or `KeyList`, possibly
    /// > including additional `ThresholdKey` or `KeyList` descendants) may be
    /// > assigned as the sole entry in a file `keys` field to ensure all transactions
    /// > have the same signature requirements.
    public struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        public init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "createFile" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Create a file in HFS.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func createFile<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_FileService.Method.createFile.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "updateFile" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Update a file in HFS.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func updateFile<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_FileService.Method.updateFile.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "deleteFile" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Delete a file in HFS.<br/>
        /// > The content of a file deleted in this manner is completely removed
        /// > from network state, but the file metadata remains.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func deleteFile<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_FileService.Method.deleteFile.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "appendContent" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Append content to a file in HFS.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func appendContent<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_FileService.Method.appendContent.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "getFileContent" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve the content of a file in HFS.<br/>
        /// > Note that this query retrieves _only_ the file content, not any of
        /// > the metadata for the file.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Query` message.
        ///   - serializer: A serializer for `Proto_Query` messages.
        ///   - deserializer: A deserializer for `Proto_Response` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func getFileContent<Result>(
            request: GRPCCore.ClientRequest<Proto_Query>,
            serializer: some GRPCCore.MessageSerializer<Proto_Query>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_Response>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_FileService.Method.getFileContent.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "getFileInfo" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve the metadata for a file in HFS.<br/>
        /// > Note that this query does not retrieve the file _content_.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Query` message.
        ///   - serializer: A serializer for `Proto_Query` messages.
        ///   - deserializer: A deserializer for `Proto_Response` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func getFileInfo<Result>(
            request: GRPCCore.ClientRequest<Proto_Query>,
            serializer: some GRPCCore.MessageSerializer<Proto_Query>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_Response>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_FileService.Method.getFileInfo.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "systemDelete" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Delete a "regular" file without "owner" authorization.<br/>
        /// > This transaction _does not_ require signatures for the keys in
        /// > the file `keys` list, but must be signed by a "privileged" account.
        /// > <p>
        /// > This transaction SHALL NOT accept a file identifier for
        /// > a "system" file.<br/>
        /// > This transaction SHALL NOT remove the _content_ of the file from state.
        /// > This permits use of the `systemUndelete` to reverse this action if
        /// > performed in error.
        /// > <p>
        /// > This is a privileged transaction, and only accounts 2-59 are permitted
        /// > to call this function, by default. The actual restriction is in the
        /// > `api-permission.properties` file in the consensus node configuration.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func systemDelete<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_FileService.Method.systemDelete.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "systemUndelete" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Undelete a "regular" file.
        /// > This transaction must be signed by a "privileged" account.<br/>
        /// > <p>
        /// > This transaction SHALL NOT accept a file identifier for
        /// > a "system" file.<br/>
        /// > The file identified SHOULD have been previously deleted.<br/>
        /// > This transaction SHALL NOT recover the _content_ of a file unless that
        /// > file was deleted with a `systemDelete` transaction. The _content_ of a
        /// > file deleted with a `fileDelete` transaction is not retained in state.
        /// > <p>
        /// > This is a privileged transaction, and only accounts 2-60 are permitted
        /// > to call this function, by default. The actual restriction is in the
        /// > `api-permission.properties` file in the consensus node configuration.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func systemUndelete<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_FileService.Method.systemUndelete.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
extension Proto_FileService.ClientProtocol {
    /// Call the "createFile" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Create a file in HFS.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Transaction` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createFile<Result>(
        request: GRPCCore.ClientRequest<Proto_Transaction>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.createFile(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Transaction>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_TransactionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "updateFile" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Update a file in HFS.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Transaction` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func updateFile<Result>(
        request: GRPCCore.ClientRequest<Proto_Transaction>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.updateFile(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Transaction>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_TransactionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "deleteFile" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Delete a file in HFS.<br/>
    /// > The content of a file deleted in this manner is completely removed
    /// > from network state, but the file metadata remains.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Transaction` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteFile<Result>(
        request: GRPCCore.ClientRequest<Proto_Transaction>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteFile(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Transaction>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_TransactionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "appendContent" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Append content to a file in HFS.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Transaction` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func appendContent<Result>(
        request: GRPCCore.ClientRequest<Proto_Transaction>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.appendContent(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Transaction>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_TransactionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "getFileContent" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Retrieve the content of a file in HFS.<br/>
    /// > Note that this query retrieves _only_ the file content, not any of
    /// > the metadata for the file.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Query` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getFileContent<Result>(
        request: GRPCCore.ClientRequest<Proto_Query>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getFileContent(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Query>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Response>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "getFileInfo" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Retrieve the metadata for a file in HFS.<br/>
    /// > Note that this query does not retrieve the file _content_.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Query` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getFileInfo<Result>(
        request: GRPCCore.ClientRequest<Proto_Query>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getFileInfo(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Query>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Response>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "systemDelete" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Delete a "regular" file without "owner" authorization.<br/>
    /// > This transaction _does not_ require signatures for the keys in
    /// > the file `keys` list, but must be signed by a "privileged" account.
    /// > <p>
    /// > This transaction SHALL NOT accept a file identifier for
    /// > a "system" file.<br/>
    /// > This transaction SHALL NOT remove the _content_ of the file from state.
    /// > This permits use of the `systemUndelete` to reverse this action if
    /// > performed in error.
    /// > <p>
    /// > This is a privileged transaction, and only accounts 2-59 are permitted
    /// > to call this function, by default. The actual restriction is in the
    /// > `api-permission.properties` file in the consensus node configuration.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Transaction` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func systemDelete<Result>(
        request: GRPCCore.ClientRequest<Proto_Transaction>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.systemDelete(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Transaction>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_TransactionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "systemUndelete" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Undelete a "regular" file.
    /// > This transaction must be signed by a "privileged" account.<br/>
    /// > <p>
    /// > This transaction SHALL NOT accept a file identifier for
    /// > a "system" file.<br/>
    /// > The file identified SHOULD have been previously deleted.<br/>
    /// > This transaction SHALL NOT recover the _content_ of a file unless that
    /// > file was deleted with a `systemDelete` transaction. The _content_ of a
    /// > file deleted with a `fileDelete` transaction is not retained in state.
    /// > <p>
    /// > This is a privileged transaction, and only accounts 2-60 are permitted
    /// > to call this function, by default. The actual restriction is in the
    /// > `api-permission.properties` file in the consensus node configuration.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Transaction` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func systemUndelete<Result>(
        request: GRPCCore.ClientRequest<Proto_Transaction>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.systemUndelete(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Transaction>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_TransactionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
extension Proto_FileService.ClientProtocol {
    /// Call the "createFile" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Create a file in HFS.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createFile<Result>(
        _ message: Proto_Transaction,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Transaction>(
            message: message,
            metadata: metadata
        )
        return try await self.createFile(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "updateFile" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Update a file in HFS.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func updateFile<Result>(
        _ message: Proto_Transaction,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Transaction>(
            message: message,
            metadata: metadata
        )
        return try await self.updateFile(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "deleteFile" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Delete a file in HFS.<br/>
    /// > The content of a file deleted in this manner is completely removed
    /// > from network state, but the file metadata remains.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteFile<Result>(
        _ message: Proto_Transaction,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Transaction>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteFile(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "appendContent" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Append content to a file in HFS.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func appendContent<Result>(
        _ message: Proto_Transaction,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Transaction>(
            message: message,
            metadata: metadata
        )
        return try await self.appendContent(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "getFileContent" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Retrieve the content of a file in HFS.<br/>
    /// > Note that this query retrieves _only_ the file content, not any of
    /// > the metadata for the file.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getFileContent<Result>(
        _ message: Proto_Query,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Query>(
            message: message,
            metadata: metadata
        )
        return try await self.getFileContent(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "getFileInfo" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Retrieve the metadata for a file in HFS.<br/>
    /// > Note that this query does not retrieve the file _content_.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getFileInfo<Result>(
        _ message: Proto_Query,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Query>(
            message: message,
            metadata: metadata
        )
        return try await self.getFileInfo(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "systemDelete" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Delete a "regular" file without "owner" authorization.<br/>
    /// > This transaction _does not_ require signatures for the keys in
    /// > the file `keys` list, but must be signed by a "privileged" account.
    /// > <p>
    /// > This transaction SHALL NOT accept a file identifier for
    /// > a "system" file.<br/>
    /// > This transaction SHALL NOT remove the _content_ of the file from state.
    /// > This permits use of the `systemUndelete` to reverse this action if
    /// > performed in error.
    /// > <p>
    /// > This is a privileged transaction, and only accounts 2-59 are permitted
    /// > to call this function, by default. The actual restriction is in the
    /// > `api-permission.properties` file in the consensus node configuration.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func systemDelete<Result>(
        _ message: Proto_Transaction,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Transaction>(
            message: message,
            metadata: metadata
        )
        return try await self.systemDelete(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "systemUndelete" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Undelete a "regular" file.
    /// > This transaction must be signed by a "privileged" account.<br/>
    /// > <p>
    /// > This transaction SHALL NOT accept a file identifier for
    /// > a "system" file.<br/>
    /// > The file identified SHOULD have been previously deleted.<br/>
    /// > This transaction SHALL NOT recover the _content_ of a file unless that
    /// > file was deleted with a `systemDelete` transaction. The _content_ of a
    /// > file deleted with a `fileDelete` transaction is not retained in state.
    /// > <p>
    /// > This is a privileged transaction, and only accounts 2-60 are permitted
    /// > to call this function, by default. The actual restriction is in the
    /// > `api-permission.properties` file in the consensus node configuration.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func systemUndelete<Result>(
        _ message: Proto_Transaction,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Transaction>(
            message: message,
            metadata: metadata
        )
        return try await self.systemUndelete(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}