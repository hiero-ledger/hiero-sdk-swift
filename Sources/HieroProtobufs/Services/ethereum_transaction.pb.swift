// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ethereum_transaction.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

///*
/// # Ethereum Call
/// Make an Ethereum transaction "call" with all data in Ethereum formats,
/// including the contract alias. Call data may be in the transaction,
/// or stored within an Hedera File.<br/>
/// The caller MAY offer additional gas above what is offered in the call
/// data, but MAY be charged up to 80% of that value if the amount required
/// is less than this "floor" amount.
///
/// ### Keywords
/// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
/// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
/// document are to be interpreted as described in
/// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
/// [RFC8174](https://www.ietf.org/rfc/rfc8174).

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
/// A transaction in Ethereum format.<br/>
/// Make an Ethereum transaction "call" with all data in Ethereum formats,
/// including the contract alias. Call data may be in the transaction, or
/// stored within an Hedera File.
///
/// The caller MAY offer additional gas above what is offered in the call data,
/// but MAY be charged up to 80% of that value if the amount required is less
/// than this "floor" amount.
///
/// ### Block Stream Effects
/// An `EthereumOutput` message SHALL be emitted for each transaction.
public struct Proto_EthereumTransactionBody: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// The raw Ethereum transaction data.
  /// <p>
  /// This transaction MUST be RLP encoded.<br/>
  /// This SHALL be the complete transaction data unless the `call_data`
  /// field is set.<br/>
  /// If `call_data` is set, this field SHALL be modified to replace the
  /// `callData` element with the content of the referenced file.<br/>
  /// The transaction signature SHALL be validated after `callData` is
  /// complete, if necessary.
  public var ethereumData: Data = Data()

  ///*
  /// The `callData` for the Ethereum transaction.
  /// <p>
  /// If this field is set, the data in the `ethereum_data` field SHALL be
  /// re-written to replace the `callData` element with the contents of this
  /// file at time of execution.<br/>
  /// The Ethereum transaction MUST be "rehydrated" with this modified
  /// `callData` before signature validation MAY be performed.
  public var callData: Proto_FileID {
    get {return _callData ?? Proto_FileID()}
    set {_callData = newValue}
  }
  /// Returns true if `callData` has been explicitly set.
  public var hasCallData: Bool {return self._callData != nil}
  /// Clears the value of `callData`. Subsequent reads from it will return its default value.
  public mutating func clearCallData() {self._callData = nil}

  ///*
  /// A maximum amount of "gas" offered to pay the Ethereum transaction costs.
  /// <p>
  /// This gas offered is in addition to any gas supplied with the Ethereum
  /// transaction as declared in the `ethereum_data`.<br/>
  /// In most circumstances the account with an alias matching the public
  /// key available from the Ethereum transaction signature offers sufficient
  /// gas to power the transaction, but in some cases it MAY be desirable
  /// for the account submitting this transaction to either supplement
  /// or entirely fund the transaction cost.<br/>
  /// The amount of gas offered here SHALL be used to pay for
  /// transaction costs _in excess_ of any gas offered within
  /// the Ethereum transaction.<br/>
  /// If the gas offered within the Ethereum transaction is sufficient
  /// for all costs, the gas offered in this field SHALL NOT be expended.<br/>
  /// Regardless of actual transaction cost, the payer for this transaction
  /// SHALL NOT be charged more gas than the amount offered here.<br/>
  /// If the sum of both gas amounts is not sufficient to pay for the
  /// transaction, the entire total amount of gas offered SHALL be expended,
  /// the transaction SHALL fail, and the response code `INSUFFICIENT_GAS`
  /// SHALL be set.<br/>
  /// If any amount of gas is charged to the payer of this transaction,
  /// at least 80% of the value offered in this field SHALL be charged
  /// as a minimum fee.<br/>
  /// If the amount of gas authorized in the Ethereum transaction data is `0`,
  /// then the payer of this transaction SHALL be charged the entire cost of
  /// the Ethereum transaction, subject to the limit set in this field.
  public var maxGasAllowance: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _callData: Proto_FileID? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "proto"

extension Proto_EthereumTransactionBody: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EthereumTransactionBody"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "ethereum_data"),
    2: .standard(proto: "call_data"),
    3: .standard(proto: "max_gas_allowance"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.ethereumData) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._callData) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.maxGasAllowance) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.ethereumData.isEmpty {
      try visitor.visitSingularBytesField(value: self.ethereumData, fieldNumber: 1)
    }
    try { if let v = self._callData {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if self.maxGasAllowance != 0 {
      try visitor.visitSingularInt64Field(value: self.maxGasAllowance, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_EthereumTransactionBody, rhs: Proto_EthereumTransactionBody) -> Bool {
    if lhs.ethereumData != rhs.ethereumData {return false}
    if lhs._callData != rhs._callData {return false}
    if lhs.maxGasAllowance != rhs.maxGasAllowance {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
