//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: schedule_service.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


///*
/// Transactions and queries for the Schedule Service.<br/>
/// The Schedule Service enables transactions to be submitted without all
/// required signatures and offers a `scheduleSign` transaction to provide
/// additional signatures independently after the schedule is created. The
/// scheduled transaction may be executed immediately when all required
/// signatures are present, or at expiration if "long term" schedules
/// are enabled in network configuration.
///
/// ### Execution
/// Scheduled transactions SHALL be executed under the following conditions.
/// 1. If "long term" schedules are enabled and `wait_for_expiry` is set for
///    that schedule then the transaction SHALL NOT be executed before the
///    network consensus time matches or exceeds the `expiration_time` field
///    for that schedule.
/// 1. If "long term" schedules are enabled and `wait_for_expiry` is _not_ set
///    for that schedule, then the transaction SHALL be executed when all
///    signatures required by the scheduled transaction are active for that
///    schedule. This MAY be immediately after the `scheduleCreate` or a
///    subsequent `scheduleSign` transaction, or MAY be at expiration if
///    the signature requirements are met at that time.
/// 1. If "long term" schedules are _disabled_, then the scheduled transaction
///    SHALL be executed immediately after all signature requirements for the
///    scheduled transaction are met during the `scheduleCreate` or a subsequent
///    `scheduleSign` transaction. The scheduled transaction SHALL NOT be
///    on expiration when "long term" schedules are disabled.
///
/// A schedule SHALL remain in state and MAY be queried with a `getScheduleInfo`
/// transaction after execution, until the schedule expires.<br/>
/// When network consensus time matches or exceeds the `expiration_time` for
/// a schedule, that schedule SHALL be removed from state, whether it has
/// executed or not.<br/>
/// If "long term" schedules are _disabled_, the maximum expiration time SHALL
/// be the consensus time of the `scheduleCreate` transaction extended by
/// the network configuration value `ledger.scheduleTxExpiryTimeSecs`.
///
/// ### Block Stream Effects
/// When a scheduled transaction is executed, the timestamp in the transaction
/// identifier for that transaction SHALL be 1 nanosecond after the consensus
/// timestamp for the transaction that resulted in its execution. If execution
/// occurred at expiration, that transaction may be almost any transaction,
/// including another scheduled transaction that executed at expiration.<br/>
/// The transaction identifier for a scheduled transaction that is executed
/// SHALL have the `scheduled` flag set and SHALL inherit the `accountID` and
/// `transactionValidStart` values from the `scheduleCreate` that created the
/// schedule.<br/>
/// The `scheduleRef` property of the record for a scheduled transaction SHALL
/// be populated with the schedule identifier of the schedule that executed.
///
/// Usage: instantiate `Proto_ScheduleServiceClient`, then call methods of this protocol to make API calls.
public protocol Proto_ScheduleServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Proto_ScheduleServiceClientInterceptorFactoryProtocol? { get }

  func createSchedule(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func signSchedule(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func deleteSchedule(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func getScheduleInfo(
    _ request: Proto_Query,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Query, Proto_Response>
}

extension Proto_ScheduleServiceClientProtocol {
  public var serviceName: String {
    return "proto.ScheduleService"
  }

  ///*
  /// Create a new Schedule.
  /// <p>
  /// If all signature requirements are met with this transaction, the
  /// scheduled transaction MAY execute immediately.
  ///
  /// - Parameters:
  ///   - request: Request to send to createSchedule.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createSchedule(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(
      path: Proto_ScheduleServiceClientMetadata.Methods.createSchedule.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makecreateScheduleInterceptors() ?? []
    )
  }

  ///*
  /// Add signatures to an existing schedule.
  /// <p>
  /// Signatures on this transaction SHALL be added to the set of active
  /// signatures on the schedule, and MAY result in execution of the
  /// scheduled transaction if all signature requirements are met.
  ///
  /// - Parameters:
  ///   - request: Request to send to signSchedule.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func signSchedule(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(
      path: Proto_ScheduleServiceClientMetadata.Methods.signSchedule.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makesignScheduleInterceptors() ?? []
    )
  }

  ///*
  /// Mark an existing schedule deleted.
  /// <p>
  /// Once deleted a schedule SHALL NOT be executed and any subsequent
  /// `scheduleSign` transaction SHALL fail.
  ///
  /// - Parameters:
  ///   - request: Request to send to deleteSchedule.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteSchedule(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(
      path: Proto_ScheduleServiceClientMetadata.Methods.deleteSchedule.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makedeleteScheduleInterceptors() ?? []
    )
  }

  ///*
  /// Retrieve the metadata for a schedule.
  ///
  /// - Parameters:
  ///   - request: Request to send to getScheduleInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getScheduleInfo(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Query, Proto_Response> {
    return self.makeUnaryCall(
      path: Proto_ScheduleServiceClientMetadata.Methods.getScheduleInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetScheduleInfoInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Proto_ScheduleServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Proto_ScheduleServiceNIOClient")
public final class Proto_ScheduleServiceClient: Proto_ScheduleServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Proto_ScheduleServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Proto_ScheduleServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the proto.ScheduleService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Proto_ScheduleServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Proto_ScheduleServiceNIOClient: Proto_ScheduleServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Proto_ScheduleServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the proto.ScheduleService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Proto_ScheduleServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

///*
/// Transactions and queries for the Schedule Service.<br/>
/// The Schedule Service enables transactions to be submitted without all
/// required signatures and offers a `scheduleSign` transaction to provide
/// additional signatures independently after the schedule is created. The
/// scheduled transaction may be executed immediately when all required
/// signatures are present, or at expiration if "long term" schedules
/// are enabled in network configuration.
///
/// ### Execution
/// Scheduled transactions SHALL be executed under the following conditions.
/// 1. If "long term" schedules are enabled and `wait_for_expiry` is set for
///    that schedule then the transaction SHALL NOT be executed before the
///    network consensus time matches or exceeds the `expiration_time` field
///    for that schedule.
/// 1. If "long term" schedules are enabled and `wait_for_expiry` is _not_ set
///    for that schedule, then the transaction SHALL be executed when all
///    signatures required by the scheduled transaction are active for that
///    schedule. This MAY be immediately after the `scheduleCreate` or a
///    subsequent `scheduleSign` transaction, or MAY be at expiration if
///    the signature requirements are met at that time.
/// 1. If "long term" schedules are _disabled_, then the scheduled transaction
///    SHALL be executed immediately after all signature requirements for the
///    scheduled transaction are met during the `scheduleCreate` or a subsequent
///    `scheduleSign` transaction. The scheduled transaction SHALL NOT be
///    on expiration when "long term" schedules are disabled.
///
/// A schedule SHALL remain in state and MAY be queried with a `getScheduleInfo`
/// transaction after execution, until the schedule expires.<br/>
/// When network consensus time matches or exceeds the `expiration_time` for
/// a schedule, that schedule SHALL be removed from state, whether it has
/// executed or not.<br/>
/// If "long term" schedules are _disabled_, the maximum expiration time SHALL
/// be the consensus time of the `scheduleCreate` transaction extended by
/// the network configuration value `ledger.scheduleTxExpiryTimeSecs`.
///
/// ### Block Stream Effects
/// When a scheduled transaction is executed, the timestamp in the transaction
/// identifier for that transaction SHALL be 1 nanosecond after the consensus
/// timestamp for the transaction that resulted in its execution. If execution
/// occurred at expiration, that transaction may be almost any transaction,
/// including another scheduled transaction that executed at expiration.<br/>
/// The transaction identifier for a scheduled transaction that is executed
/// SHALL have the `scheduled` flag set and SHALL inherit the `accountID` and
/// `transactionValidStart` values from the `scheduleCreate` that created the
/// schedule.<br/>
/// The `scheduleRef` property of the record for a scheduled transaction SHALL
/// be populated with the schedule identifier of the schedule that executed.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Proto_ScheduleServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Proto_ScheduleServiceClientInterceptorFactoryProtocol? { get }

  func makeCreateScheduleCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func makeSignScheduleCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func makeDeleteScheduleCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func makeGetScheduleInfoCall(
    _ request: Proto_Query,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Query, Proto_Response>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Proto_ScheduleServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Proto_ScheduleServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: Proto_ScheduleServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeCreateScheduleCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeAsyncUnaryCall(
      path: Proto_ScheduleServiceClientMetadata.Methods.createSchedule.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makecreateScheduleInterceptors() ?? []
    )
  }

  public func makeSignScheduleCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeAsyncUnaryCall(
      path: Proto_ScheduleServiceClientMetadata.Methods.signSchedule.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makesignScheduleInterceptors() ?? []
    )
  }

  public func makeDeleteScheduleCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeAsyncUnaryCall(
      path: Proto_ScheduleServiceClientMetadata.Methods.deleteSchedule.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makedeleteScheduleInterceptors() ?? []
    )
  }

  public func makeGetScheduleInfoCall(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Query, Proto_Response> {
    return self.makeAsyncUnaryCall(
      path: Proto_ScheduleServiceClientMetadata.Methods.getScheduleInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetScheduleInfoInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Proto_ScheduleServiceAsyncClientProtocol {
  public func createSchedule(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_TransactionResponse {
    return try await self.performAsyncUnaryCall(
      path: Proto_ScheduleServiceClientMetadata.Methods.createSchedule.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makecreateScheduleInterceptors() ?? []
    )
  }

  public func signSchedule(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_TransactionResponse {
    return try await self.performAsyncUnaryCall(
      path: Proto_ScheduleServiceClientMetadata.Methods.signSchedule.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makesignScheduleInterceptors() ?? []
    )
  }

  public func deleteSchedule(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_TransactionResponse {
    return try await self.performAsyncUnaryCall(
      path: Proto_ScheduleServiceClientMetadata.Methods.deleteSchedule.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makedeleteScheduleInterceptors() ?? []
    )
  }

  public func getScheduleInfo(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_Response {
    return try await self.performAsyncUnaryCall(
      path: Proto_ScheduleServiceClientMetadata.Methods.getScheduleInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetScheduleInfoInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Proto_ScheduleServiceAsyncClient: Proto_ScheduleServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Proto_ScheduleServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Proto_ScheduleServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Proto_ScheduleServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'createSchedule'.
  func makecreateScheduleInterceptors() -> [ClientInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when invoking 'signSchedule'.
  func makesignScheduleInterceptors() -> [ClientInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when invoking 'deleteSchedule'.
  func makedeleteScheduleInterceptors() -> [ClientInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when invoking 'getScheduleInfo'.
  func makegetScheduleInfoInterceptors() -> [ClientInterceptor<Proto_Query, Proto_Response>]
}

public enum Proto_ScheduleServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "ScheduleService",
    fullName: "proto.ScheduleService",
    methods: [
      Proto_ScheduleServiceClientMetadata.Methods.createSchedule,
      Proto_ScheduleServiceClientMetadata.Methods.signSchedule,
      Proto_ScheduleServiceClientMetadata.Methods.deleteSchedule,
      Proto_ScheduleServiceClientMetadata.Methods.getScheduleInfo,
    ]
  )

  public enum Methods {
    public static let createSchedule = GRPCMethodDescriptor(
      name: "createSchedule",
      path: "/proto.ScheduleService/createSchedule",
      type: GRPCCallType.unary
    )

    public static let signSchedule = GRPCMethodDescriptor(
      name: "signSchedule",
      path: "/proto.ScheduleService/signSchedule",
      type: GRPCCallType.unary
    )

    public static let deleteSchedule = GRPCMethodDescriptor(
      name: "deleteSchedule",
      path: "/proto.ScheduleService/deleteSchedule",
      type: GRPCCallType.unary
    )

    public static let getScheduleInfo = GRPCMethodDescriptor(
      name: "getScheduleInfo",
      path: "/proto.ScheduleService/getScheduleInfo",
      type: GRPCCallType.unary
    )
  }
}

///*
/// Transactions and queries for the Schedule Service.<br/>
/// The Schedule Service enables transactions to be submitted without all
/// required signatures and offers a `scheduleSign` transaction to provide
/// additional signatures independently after the schedule is created. The
/// scheduled transaction may be executed immediately when all required
/// signatures are present, or at expiration if "long term" schedules
/// are enabled in network configuration.
///
/// ### Execution
/// Scheduled transactions SHALL be executed under the following conditions.
/// 1. If "long term" schedules are enabled and `wait_for_expiry` is set for
///    that schedule then the transaction SHALL NOT be executed before the
///    network consensus time matches or exceeds the `expiration_time` field
///    for that schedule.
/// 1. If "long term" schedules are enabled and `wait_for_expiry` is _not_ set
///    for that schedule, then the transaction SHALL be executed when all
///    signatures required by the scheduled transaction are active for that
///    schedule. This MAY be immediately after the `scheduleCreate` or a
///    subsequent `scheduleSign` transaction, or MAY be at expiration if
///    the signature requirements are met at that time.
/// 1. If "long term" schedules are _disabled_, then the scheduled transaction
///    SHALL be executed immediately after all signature requirements for the
///    scheduled transaction are met during the `scheduleCreate` or a subsequent
///    `scheduleSign` transaction. The scheduled transaction SHALL NOT be
///    on expiration when "long term" schedules are disabled.
///
/// A schedule SHALL remain in state and MAY be queried with a `getScheduleInfo`
/// transaction after execution, until the schedule expires.<br/>
/// When network consensus time matches or exceeds the `expiration_time` for
/// a schedule, that schedule SHALL be removed from state, whether it has
/// executed or not.<br/>
/// If "long term" schedules are _disabled_, the maximum expiration time SHALL
/// be the consensus time of the `scheduleCreate` transaction extended by
/// the network configuration value `ledger.scheduleTxExpiryTimeSecs`.
///
/// ### Block Stream Effects
/// When a scheduled transaction is executed, the timestamp in the transaction
/// identifier for that transaction SHALL be 1 nanosecond after the consensus
/// timestamp for the transaction that resulted in its execution. If execution
/// occurred at expiration, that transaction may be almost any transaction,
/// including another scheduled transaction that executed at expiration.<br/>
/// The transaction identifier for a scheduled transaction that is executed
/// SHALL have the `scheduled` flag set and SHALL inherit the `accountID` and
/// `transactionValidStart` values from the `scheduleCreate` that created the
/// schedule.<br/>
/// The `scheduleRef` property of the record for a scheduled transaction SHALL
/// be populated with the schedule identifier of the schedule that executed.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Proto_ScheduleServiceProvider: CallHandlerProvider {
  var interceptors: Proto_ScheduleServiceServerInterceptorFactoryProtocol? { get }

  ///*
  /// Create a new Schedule.
  /// <p>
  /// If all signature requirements are met with this transaction, the
  /// scheduled transaction MAY execute immediately.
  func createSchedule(request: Proto_Transaction, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_TransactionResponse>

  ///*
  /// Add signatures to an existing schedule.
  /// <p>
  /// Signatures on this transaction SHALL be added to the set of active
  /// signatures on the schedule, and MAY result in execution of the
  /// scheduled transaction if all signature requirements are met.
  func signSchedule(request: Proto_Transaction, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_TransactionResponse>

  ///*
  /// Mark an existing schedule deleted.
  /// <p>
  /// Once deleted a schedule SHALL NOT be executed and any subsequent
  /// `scheduleSign` transaction SHALL fail.
  func deleteSchedule(request: Proto_Transaction, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_TransactionResponse>

  ///*
  /// Retrieve the metadata for a schedule.
  func getScheduleInfo(request: Proto_Query, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_Response>
}

extension Proto_ScheduleServiceProvider {
  public var serviceName: Substring {
    return Proto_ScheduleServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "createSchedule":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Transaction>(),
        responseSerializer: ProtobufSerializer<Proto_TransactionResponse>(),
        interceptors: self.interceptors?.makecreateScheduleInterceptors() ?? [],
        userFunction: self.createSchedule(request:context:)
      )

    case "signSchedule":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Transaction>(),
        responseSerializer: ProtobufSerializer<Proto_TransactionResponse>(),
        interceptors: self.interceptors?.makesignScheduleInterceptors() ?? [],
        userFunction: self.signSchedule(request:context:)
      )

    case "deleteSchedule":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Transaction>(),
        responseSerializer: ProtobufSerializer<Proto_TransactionResponse>(),
        interceptors: self.interceptors?.makedeleteScheduleInterceptors() ?? [],
        userFunction: self.deleteSchedule(request:context:)
      )

    case "getScheduleInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Query>(),
        responseSerializer: ProtobufSerializer<Proto_Response>(),
        interceptors: self.interceptors?.makegetScheduleInfoInterceptors() ?? [],
        userFunction: self.getScheduleInfo(request:context:)
      )

    default:
      return nil
    }
  }
}

///*
/// Transactions and queries for the Schedule Service.<br/>
/// The Schedule Service enables transactions to be submitted without all
/// required signatures and offers a `scheduleSign` transaction to provide
/// additional signatures independently after the schedule is created. The
/// scheduled transaction may be executed immediately when all required
/// signatures are present, or at expiration if "long term" schedules
/// are enabled in network configuration.
///
/// ### Execution
/// Scheduled transactions SHALL be executed under the following conditions.
/// 1. If "long term" schedules are enabled and `wait_for_expiry` is set for
///    that schedule then the transaction SHALL NOT be executed before the
///    network consensus time matches or exceeds the `expiration_time` field
///    for that schedule.
/// 1. If "long term" schedules are enabled and `wait_for_expiry` is _not_ set
///    for that schedule, then the transaction SHALL be executed when all
///    signatures required by the scheduled transaction are active for that
///    schedule. This MAY be immediately after the `scheduleCreate` or a
///    subsequent `scheduleSign` transaction, or MAY be at expiration if
///    the signature requirements are met at that time.
/// 1. If "long term" schedules are _disabled_, then the scheduled transaction
///    SHALL be executed immediately after all signature requirements for the
///    scheduled transaction are met during the `scheduleCreate` or a subsequent
///    `scheduleSign` transaction. The scheduled transaction SHALL NOT be
///    on expiration when "long term" schedules are disabled.
///
/// A schedule SHALL remain in state and MAY be queried with a `getScheduleInfo`
/// transaction after execution, until the schedule expires.<br/>
/// When network consensus time matches or exceeds the `expiration_time` for
/// a schedule, that schedule SHALL be removed from state, whether it has
/// executed or not.<br/>
/// If "long term" schedules are _disabled_, the maximum expiration time SHALL
/// be the consensus time of the `scheduleCreate` transaction extended by
/// the network configuration value `ledger.scheduleTxExpiryTimeSecs`.
///
/// ### Block Stream Effects
/// When a scheduled transaction is executed, the timestamp in the transaction
/// identifier for that transaction SHALL be 1 nanosecond after the consensus
/// timestamp for the transaction that resulted in its execution. If execution
/// occurred at expiration, that transaction may be almost any transaction,
/// including another scheduled transaction that executed at expiration.<br/>
/// The transaction identifier for a scheduled transaction that is executed
/// SHALL have the `scheduled` flag set and SHALL inherit the `accountID` and
/// `transactionValidStart` values from the `scheduleCreate` that created the
/// schedule.<br/>
/// The `scheduleRef` property of the record for a scheduled transaction SHALL
/// be populated with the schedule identifier of the schedule that executed.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Proto_ScheduleServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Proto_ScheduleServiceServerInterceptorFactoryProtocol? { get }

  ///*
  /// Create a new Schedule.
  /// <p>
  /// If all signature requirements are met with this transaction, the
  /// scheduled transaction MAY execute immediately.
  func createSchedule(
    request: Proto_Transaction,
    context: GRPCAsyncServerCallContext
  ) async throws -> Proto_TransactionResponse

  ///*
  /// Add signatures to an existing schedule.
  /// <p>
  /// Signatures on this transaction SHALL be added to the set of active
  /// signatures on the schedule, and MAY result in execution of the
  /// scheduled transaction if all signature requirements are met.
  func signSchedule(
    request: Proto_Transaction,
    context: GRPCAsyncServerCallContext
  ) async throws -> Proto_TransactionResponse

  ///*
  /// Mark an existing schedule deleted.
  /// <p>
  /// Once deleted a schedule SHALL NOT be executed and any subsequent
  /// `scheduleSign` transaction SHALL fail.
  func deleteSchedule(
    request: Proto_Transaction,
    context: GRPCAsyncServerCallContext
  ) async throws -> Proto_TransactionResponse

  ///*
  /// Retrieve the metadata for a schedule.
  func getScheduleInfo(
    request: Proto_Query,
    context: GRPCAsyncServerCallContext
  ) async throws -> Proto_Response
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Proto_ScheduleServiceAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Proto_ScheduleServiceServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Proto_ScheduleServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Proto_ScheduleServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "createSchedule":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Transaction>(),
        responseSerializer: ProtobufSerializer<Proto_TransactionResponse>(),
        interceptors: self.interceptors?.makecreateScheduleInterceptors() ?? [],
        wrapping: { try await self.createSchedule(request: $0, context: $1) }
      )

    case "signSchedule":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Transaction>(),
        responseSerializer: ProtobufSerializer<Proto_TransactionResponse>(),
        interceptors: self.interceptors?.makesignScheduleInterceptors() ?? [],
        wrapping: { try await self.signSchedule(request: $0, context: $1) }
      )

    case "deleteSchedule":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Transaction>(),
        responseSerializer: ProtobufSerializer<Proto_TransactionResponse>(),
        interceptors: self.interceptors?.makedeleteScheduleInterceptors() ?? [],
        wrapping: { try await self.deleteSchedule(request: $0, context: $1) }
      )

    case "getScheduleInfo":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Query>(),
        responseSerializer: ProtobufSerializer<Proto_Response>(),
        interceptors: self.interceptors?.makegetScheduleInfoInterceptors() ?? [],
        wrapping: { try await self.getScheduleInfo(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

public protocol Proto_ScheduleServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'createSchedule'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makecreateScheduleInterceptors() -> [ServerInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when handling 'signSchedule'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makesignScheduleInterceptors() -> [ServerInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when handling 'deleteSchedule'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makedeleteScheduleInterceptors() -> [ServerInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when handling 'getScheduleInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makegetScheduleInfoInterceptors() -> [ServerInterceptor<Proto_Query, Proto_Response>]
}

public enum Proto_ScheduleServiceServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "ScheduleService",
    fullName: "proto.ScheduleService",
    methods: [
      Proto_ScheduleServiceServerMetadata.Methods.createSchedule,
      Proto_ScheduleServiceServerMetadata.Methods.signSchedule,
      Proto_ScheduleServiceServerMetadata.Methods.deleteSchedule,
      Proto_ScheduleServiceServerMetadata.Methods.getScheduleInfo,
    ]
  )

  public enum Methods {
    public static let createSchedule = GRPCMethodDescriptor(
      name: "createSchedule",
      path: "/proto.ScheduleService/createSchedule",
      type: GRPCCallType.unary
    )

    public static let signSchedule = GRPCMethodDescriptor(
      name: "signSchedule",
      path: "/proto.ScheduleService/signSchedule",
      type: GRPCCallType.unary
    )

    public static let deleteSchedule = GRPCMethodDescriptor(
      name: "deleteSchedule",
      path: "/proto.ScheduleService/deleteSchedule",
      type: GRPCCallType.unary
    )

    public static let getScheduleInfo = GRPCMethodDescriptor(
      name: "getScheduleInfo",
      path: "/proto.ScheduleService/getScheduleInfo",
      type: GRPCCallType.unary
    )
  }
}
