///*
/// # Crypto Service
/// A service defining transactions and queries related to accounts.
///
/// This includes transactions for HBAR transfers and balance queries as well as
/// transactions to manage "allowances" which permit a third party to spend a
/// portion of the HBAR balance in an account.<br/>
/// Basic account, record, and receipt queries are also defined in this service.
///
/// Transactions and queries relating to tokens _other than HBAR_ are defined
/// in the Token Service.
///
/// ### Keywords
/// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
/// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
/// document are to be interpreted as described in
/// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
/// [RFC8174](https://www.ietf.org/rfc/rfc8174).

// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: services/crypto_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf

// MARK: - proto.CryptoService

/// Namespace containing generated types for the "proto.CryptoService" service.
public enum Proto_CryptoService {
    /// Service descriptor for the "proto.CryptoService" service.
    public static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.CryptoService")
    /// Namespace for method metadata.
    public enum Method {
        /// Namespace for "createAccount" metadata.
        public enum createAccount {
            /// Request type for "createAccount".
            public typealias Input = Proto_Transaction
            /// Response type for "createAccount".
            public typealias Output = Proto_TransactionResponse
            /// Descriptor for "createAccount".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.CryptoService"),
                method: "createAccount"
            )
        }
        /// Namespace for "updateAccount" metadata.
        public enum updateAccount {
            /// Request type for "updateAccount".
            public typealias Input = Proto_Transaction
            /// Response type for "updateAccount".
            public typealias Output = Proto_TransactionResponse
            /// Descriptor for "updateAccount".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.CryptoService"),
                method: "updateAccount"
            )
        }
        /// Namespace for "cryptoTransfer" metadata.
        public enum cryptoTransfer {
            /// Request type for "cryptoTransfer".
            public typealias Input = Proto_Transaction
            /// Response type for "cryptoTransfer".
            public typealias Output = Proto_TransactionResponse
            /// Descriptor for "cryptoTransfer".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.CryptoService"),
                method: "cryptoTransfer"
            )
        }
        /// Namespace for "cryptoDelete" metadata.
        public enum cryptoDelete {
            /// Request type for "cryptoDelete".
            public typealias Input = Proto_Transaction
            /// Response type for "cryptoDelete".
            public typealias Output = Proto_TransactionResponse
            /// Descriptor for "cryptoDelete".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.CryptoService"),
                method: "cryptoDelete"
            )
        }
        /// Namespace for "approveAllowances" metadata.
        public enum approveAllowances {
            /// Request type for "approveAllowances".
            public typealias Input = Proto_Transaction
            /// Response type for "approveAllowances".
            public typealias Output = Proto_TransactionResponse
            /// Descriptor for "approveAllowances".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.CryptoService"),
                method: "approveAllowances"
            )
        }
        /// Namespace for "deleteAllowances" metadata.
        public enum deleteAllowances {
            /// Request type for "deleteAllowances".
            public typealias Input = Proto_Transaction
            /// Response type for "deleteAllowances".
            public typealias Output = Proto_TransactionResponse
            /// Descriptor for "deleteAllowances".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.CryptoService"),
                method: "deleteAllowances"
            )
        }
        /// Namespace for "addLiveHash" metadata.
        public enum addLiveHash {
            /// Request type for "addLiveHash".
            public typealias Input = Proto_Transaction
            /// Response type for "addLiveHash".
            public typealias Output = Proto_TransactionResponse
            /// Descriptor for "addLiveHash".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.CryptoService"),
                method: "addLiveHash"
            )
        }
        /// Namespace for "deleteLiveHash" metadata.
        public enum deleteLiveHash {
            /// Request type for "deleteLiveHash".
            public typealias Input = Proto_Transaction
            /// Response type for "deleteLiveHash".
            public typealias Output = Proto_TransactionResponse
            /// Descriptor for "deleteLiveHash".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.CryptoService"),
                method: "deleteLiveHash"
            )
        }
        /// Namespace for "getLiveHash" metadata.
        public enum getLiveHash {
            /// Request type for "getLiveHash".
            public typealias Input = Proto_Query
            /// Response type for "getLiveHash".
            public typealias Output = Proto_Response
            /// Descriptor for "getLiveHash".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.CryptoService"),
                method: "getLiveHash"
            )
        }
        /// Namespace for "getAccountRecords" metadata.
        public enum getAccountRecords {
            /// Request type for "getAccountRecords".
            public typealias Input = Proto_Query
            /// Response type for "getAccountRecords".
            public typealias Output = Proto_Response
            /// Descriptor for "getAccountRecords".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.CryptoService"),
                method: "getAccountRecords"
            )
        }
        /// Namespace for "cryptoGetBalance" metadata.
        public enum cryptoGetBalance {
            /// Request type for "cryptoGetBalance".
            public typealias Input = Proto_Query
            /// Response type for "cryptoGetBalance".
            public typealias Output = Proto_Response
            /// Descriptor for "cryptoGetBalance".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.CryptoService"),
                method: "cryptoGetBalance"
            )
        }
        /// Namespace for "getAccountInfo" metadata.
        public enum getAccountInfo {
            /// Request type for "getAccountInfo".
            public typealias Input = Proto_Query
            /// Response type for "getAccountInfo".
            public typealias Output = Proto_Response
            /// Descriptor for "getAccountInfo".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.CryptoService"),
                method: "getAccountInfo"
            )
        }
        /// Namespace for "getTransactionReceipts" metadata.
        public enum getTransactionReceipts {
            /// Request type for "getTransactionReceipts".
            public typealias Input = Proto_Query
            /// Response type for "getTransactionReceipts".
            public typealias Output = Proto_Response
            /// Descriptor for "getTransactionReceipts".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.CryptoService"),
                method: "getTransactionReceipts"
            )
        }
        /// Namespace for "getTxRecordByTxID" metadata.
        public enum getTxRecordByTxID {
            /// Request type for "getTxRecordByTxID".
            public typealias Input = Proto_Query
            /// Response type for "getTxRecordByTxID".
            public typealias Output = Proto_Response
            /// Descriptor for "getTxRecordByTxID".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.CryptoService"),
                method: "getTxRecordByTxID"
            )
        }
        /// Descriptors for all methods in the "proto.CryptoService" service.
        public static let descriptors: [GRPCCore.MethodDescriptor] = [
            createAccount.descriptor,
            updateAccount.descriptor,
            cryptoTransfer.descriptor,
            cryptoDelete.descriptor,
            approveAllowances.descriptor,
            deleteAllowances.descriptor,
            addLiveHash.descriptor,
            deleteLiveHash.descriptor,
            getLiveHash.descriptor,
            getAccountRecords.descriptor,
            cryptoGetBalance.descriptor,
            getAccountInfo.descriptor,
            getTransactionReceipts.descriptor,
            getTxRecordByTxID.descriptor
        ]
    }
}

extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "proto.CryptoService" service.
    public static let proto_CryptoService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.CryptoService")
}

// MARK: proto.CryptoService (server)

extension Proto_CryptoService {
    /// Streaming variant of the service protocol for the "proto.CryptoService" service.
    ///
    /// This protocol is the lowest-level of the service protocols generated for this service
    /// giving you the most flexibility over the implementation of your service. This comes at
    /// the cost of more verbose and less strict APIs. Each RPC requires you to implement it in
    /// terms of a request stream and response stream. Where only a single request or response
    /// message is expected, you are responsible for enforcing this invariant is maintained.
    ///
    /// Where possible, prefer using the stricter, less-verbose ``ServiceProtocol``
    /// or ``SimpleServiceProtocol`` instead.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Transactions and queries for the Hedera Crypto Service.
    public protocol StreamingServiceProtocol: GRPCCore.RegistrableRPCService {
        /// Handle the "createAccount" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Create a new account by submitting the transaction
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Transaction` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_TransactionResponse` messages.
        func createAccount(
            request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse>

        /// Handle the "updateAccount" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Update an account by submitting the transaction
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Transaction` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_TransactionResponse` messages.
        func updateAccount(
            request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse>

        /// Handle the "cryptoTransfer" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Initiate a transfer by submitting the transaction
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Transaction` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_TransactionResponse` messages.
        func cryptoTransfer(
            request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse>

        /// Handle the "cryptoDelete" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Delete an account by submitting the transaction
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Transaction` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_TransactionResponse` messages.
        func cryptoDelete(
            request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse>

        /// Handle the "approveAllowances" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Add one or more approved allowances for spenders to transfer the paying
        /// > account's hbar or tokens.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Transaction` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_TransactionResponse` messages.
        func approveAllowances(
            request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse>

        /// Handle the "deleteAllowances" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Delete one or more of the specific approved NFT serial numbers on an
        /// > owner account.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Transaction` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_TransactionResponse` messages.
        func deleteAllowances(
            request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse>

        /// Handle the "addLiveHash" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Add a livehash
        /// > <blockquote>Important<blockquote>
        /// > This transaction is obsolete, not supported, and SHALL fail with a
        /// > pre-check result of `NOT_SUPPORTED`.</blockquote></blockquote>
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Transaction` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_TransactionResponse` messages.
        func addLiveHash(
            request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse>

        /// Handle the "deleteLiveHash" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Delete a livehash
        /// > <blockquote>Important<blockquote>
        /// > This transaction is obsolete, not supported, and SHALL fail with a
        /// > pre-check result of `NOT_SUPPORTED`.</blockquote></blockquote>
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Transaction` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_TransactionResponse` messages.
        func deleteLiveHash(
            request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse>

        /// Handle the "getLiveHash" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve a livehash for an account
        /// > <blockquote>Important<blockquote>
        /// > This query is obsolete, not supported, and SHALL fail with a pre-check
        /// > result of `NOT_SUPPORTED`.</blockquote></blockquote>
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Query` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_Response` messages.
        func getLiveHash(
            request: GRPCCore.StreamingServerRequest<Proto_Query>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_Response>

        /// Handle the "getAccountRecords" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Return all transactions in the last 180s of consensus time for which
        /// > the given account was the effective payer **and** network property
        /// > `ledger.keepRecordsInState` was `true`.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Query` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_Response` messages.
        func getAccountRecords(
            request: GRPCCore.StreamingServerRequest<Proto_Query>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_Response>

        /// Handle the "cryptoGetBalance" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve the balance of an account
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Query` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_Response` messages.
        func cryptoGetBalance(
            request: GRPCCore.StreamingServerRequest<Proto_Query>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_Response>

        /// Handle the "getAccountInfo" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve the metadata of an account
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Query` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_Response` messages.
        func getAccountInfo(
            request: GRPCCore.StreamingServerRequest<Proto_Query>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_Response>

        /// Handle the "getTransactionReceipts" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve the latest receipt for a transaction that is either awaiting
        /// > consensus, or reached consensus in the last 180 seconds
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Query` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_Response` messages.
        func getTransactionReceipts(
            request: GRPCCore.StreamingServerRequest<Proto_Query>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_Response>

        /// Handle the "getTxRecordByTxID" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve the record of a transaction that is either awaiting consensus,
        /// > or reached consensus in the last 180 seconds
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Query` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_Response` messages.
        func getTxRecordByTxID(
            request: GRPCCore.StreamingServerRequest<Proto_Query>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_Response>
    }

    /// Service protocol for the "proto.CryptoService" service.
    ///
    /// This protocol is higher level than ``StreamingServiceProtocol`` but lower level than
    /// the ``SimpleServiceProtocol``, it provides access to request and response metadata and
    /// trailing response metadata. If you don't need these then consider using
    /// the ``SimpleServiceProtocol``. If you need fine grained control over your RPCs then
    /// use ``StreamingServiceProtocol``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Transactions and queries for the Hedera Crypto Service.
    public protocol ServiceProtocol: Proto_CryptoService.StreamingServiceProtocol {
        /// Handle the "createAccount" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Create a new account by submitting the transaction
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_TransactionResponse` message.
        func createAccount(
            request: GRPCCore.ServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse>

        /// Handle the "updateAccount" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Update an account by submitting the transaction
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_TransactionResponse` message.
        func updateAccount(
            request: GRPCCore.ServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse>

        /// Handle the "cryptoTransfer" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Initiate a transfer by submitting the transaction
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_TransactionResponse` message.
        func cryptoTransfer(
            request: GRPCCore.ServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse>

        /// Handle the "cryptoDelete" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Delete an account by submitting the transaction
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_TransactionResponse` message.
        func cryptoDelete(
            request: GRPCCore.ServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse>

        /// Handle the "approveAllowances" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Add one or more approved allowances for spenders to transfer the paying
        /// > account's hbar or tokens.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_TransactionResponse` message.
        func approveAllowances(
            request: GRPCCore.ServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse>

        /// Handle the "deleteAllowances" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Delete one or more of the specific approved NFT serial numbers on an
        /// > owner account.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_TransactionResponse` message.
        func deleteAllowances(
            request: GRPCCore.ServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse>

        /// Handle the "addLiveHash" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Add a livehash
        /// > <blockquote>Important<blockquote>
        /// > This transaction is obsolete, not supported, and SHALL fail with a
        /// > pre-check result of `NOT_SUPPORTED`.</blockquote></blockquote>
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_TransactionResponse` message.
        func addLiveHash(
            request: GRPCCore.ServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse>

        /// Handle the "deleteLiveHash" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Delete a livehash
        /// > <blockquote>Important<blockquote>
        /// > This transaction is obsolete, not supported, and SHALL fail with a
        /// > pre-check result of `NOT_SUPPORTED`.</blockquote></blockquote>
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_TransactionResponse` message.
        func deleteLiveHash(
            request: GRPCCore.ServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse>

        /// Handle the "getLiveHash" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve a livehash for an account
        /// > <blockquote>Important<blockquote>
        /// > This query is obsolete, not supported, and SHALL fail with a pre-check
        /// > result of `NOT_SUPPORTED`.</blockquote></blockquote>
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Query` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_Response` message.
        func getLiveHash(
            request: GRPCCore.ServerRequest<Proto_Query>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_Response>

        /// Handle the "getAccountRecords" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Return all transactions in the last 180s of consensus time for which
        /// > the given account was the effective payer **and** network property
        /// > `ledger.keepRecordsInState` was `true`.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Query` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_Response` message.
        func getAccountRecords(
            request: GRPCCore.ServerRequest<Proto_Query>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_Response>

        /// Handle the "cryptoGetBalance" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve the balance of an account
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Query` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_Response` message.
        func cryptoGetBalance(
            request: GRPCCore.ServerRequest<Proto_Query>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_Response>

        /// Handle the "getAccountInfo" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve the metadata of an account
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Query` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_Response` message.
        func getAccountInfo(
            request: GRPCCore.ServerRequest<Proto_Query>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_Response>

        /// Handle the "getTransactionReceipts" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve the latest receipt for a transaction that is either awaiting
        /// > consensus, or reached consensus in the last 180 seconds
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Query` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_Response` message.
        func getTransactionReceipts(
            request: GRPCCore.ServerRequest<Proto_Query>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_Response>

        /// Handle the "getTxRecordByTxID" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve the record of a transaction that is either awaiting consensus,
        /// > or reached consensus in the last 180 seconds
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Query` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_Response` message.
        func getTxRecordByTxID(
            request: GRPCCore.ServerRequest<Proto_Query>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_Response>
    }

    /// Simple service protocol for the "proto.CryptoService" service.
    ///
    /// This is the highest level protocol for the service. The API is the easiest to use but
    /// doesn't provide access to request or response metadata. If you need access to these
    /// then use ``ServiceProtocol`` instead.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Transactions and queries for the Hedera Crypto Service.
    public protocol SimpleServiceProtocol: Proto_CryptoService.ServiceProtocol {
        /// Handle the "createAccount" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Create a new account by submitting the transaction
        ///
        /// - Parameters:
        ///   - request: A `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_TransactionResponse` to respond with.
        func createAccount(
            request: Proto_Transaction,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_TransactionResponse

        /// Handle the "updateAccount" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Update an account by submitting the transaction
        ///
        /// - Parameters:
        ///   - request: A `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_TransactionResponse` to respond with.
        func updateAccount(
            request: Proto_Transaction,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_TransactionResponse

        /// Handle the "cryptoTransfer" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Initiate a transfer by submitting the transaction
        ///
        /// - Parameters:
        ///   - request: A `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_TransactionResponse` to respond with.
        func cryptoTransfer(
            request: Proto_Transaction,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_TransactionResponse

        /// Handle the "cryptoDelete" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Delete an account by submitting the transaction
        ///
        /// - Parameters:
        ///   - request: A `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_TransactionResponse` to respond with.
        func cryptoDelete(
            request: Proto_Transaction,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_TransactionResponse

        /// Handle the "approveAllowances" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Add one or more approved allowances for spenders to transfer the paying
        /// > account's hbar or tokens.
        ///
        /// - Parameters:
        ///   - request: A `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_TransactionResponse` to respond with.
        func approveAllowances(
            request: Proto_Transaction,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_TransactionResponse

        /// Handle the "deleteAllowances" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Delete one or more of the specific approved NFT serial numbers on an
        /// > owner account.
        ///
        /// - Parameters:
        ///   - request: A `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_TransactionResponse` to respond with.
        func deleteAllowances(
            request: Proto_Transaction,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_TransactionResponse

        /// Handle the "addLiveHash" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Add a livehash
        /// > <blockquote>Important<blockquote>
        /// > This transaction is obsolete, not supported, and SHALL fail with a
        /// > pre-check result of `NOT_SUPPORTED`.</blockquote></blockquote>
        ///
        /// - Parameters:
        ///   - request: A `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_TransactionResponse` to respond with.
        func addLiveHash(
            request: Proto_Transaction,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_TransactionResponse

        /// Handle the "deleteLiveHash" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Delete a livehash
        /// > <blockquote>Important<blockquote>
        /// > This transaction is obsolete, not supported, and SHALL fail with a
        /// > pre-check result of `NOT_SUPPORTED`.</blockquote></blockquote>
        ///
        /// - Parameters:
        ///   - request: A `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_TransactionResponse` to respond with.
        func deleteLiveHash(
            request: Proto_Transaction,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_TransactionResponse

        /// Handle the "getLiveHash" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve a livehash for an account
        /// > <blockquote>Important<blockquote>
        /// > This query is obsolete, not supported, and SHALL fail with a pre-check
        /// > result of `NOT_SUPPORTED`.</blockquote></blockquote>
        ///
        /// - Parameters:
        ///   - request: A `Proto_Query` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_Response` to respond with.
        func getLiveHash(
            request: Proto_Query,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_Response

        /// Handle the "getAccountRecords" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Return all transactions in the last 180s of consensus time for which
        /// > the given account was the effective payer **and** network property
        /// > `ledger.keepRecordsInState` was `true`.
        ///
        /// - Parameters:
        ///   - request: A `Proto_Query` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_Response` to respond with.
        func getAccountRecords(
            request: Proto_Query,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_Response

        /// Handle the "cryptoGetBalance" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve the balance of an account
        ///
        /// - Parameters:
        ///   - request: A `Proto_Query` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_Response` to respond with.
        func cryptoGetBalance(
            request: Proto_Query,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_Response

        /// Handle the "getAccountInfo" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve the metadata of an account
        ///
        /// - Parameters:
        ///   - request: A `Proto_Query` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_Response` to respond with.
        func getAccountInfo(
            request: Proto_Query,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_Response

        /// Handle the "getTransactionReceipts" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve the latest receipt for a transaction that is either awaiting
        /// > consensus, or reached consensus in the last 180 seconds
        ///
        /// - Parameters:
        ///   - request: A `Proto_Query` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_Response` to respond with.
        func getTransactionReceipts(
            request: Proto_Query,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_Response

        /// Handle the "getTxRecordByTxID" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve the record of a transaction that is either awaiting consensus,
        /// > or reached consensus in the last 180 seconds
        ///
        /// - Parameters:
        ///   - request: A `Proto_Query` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_Response` to respond with.
        func getTxRecordByTxID(
            request: Proto_Query,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_Response
    }
}

// Default implementation of 'registerMethods(with:)'.
extension Proto_CryptoService.StreamingServiceProtocol {
    public func registerMethods<Transport>(with router: inout GRPCCore.RPCRouter<Transport>) where Transport: GRPCCore.ServerTransport {
        router.registerHandler(
            forMethod: Proto_CryptoService.Method.createAccount.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Transaction>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_TransactionResponse>(),
            handler: { request, context in
                try await self.createAccount(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_CryptoService.Method.updateAccount.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Transaction>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_TransactionResponse>(),
            handler: { request, context in
                try await self.updateAccount(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_CryptoService.Method.cryptoTransfer.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Transaction>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_TransactionResponse>(),
            handler: { request, context in
                try await self.cryptoTransfer(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_CryptoService.Method.cryptoDelete.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Transaction>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_TransactionResponse>(),
            handler: { request, context in
                try await self.cryptoDelete(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_CryptoService.Method.approveAllowances.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Transaction>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_TransactionResponse>(),
            handler: { request, context in
                try await self.approveAllowances(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_CryptoService.Method.deleteAllowances.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Transaction>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_TransactionResponse>(),
            handler: { request, context in
                try await self.deleteAllowances(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_CryptoService.Method.addLiveHash.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Transaction>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_TransactionResponse>(),
            handler: { request, context in
                try await self.addLiveHash(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_CryptoService.Method.deleteLiveHash.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Transaction>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_TransactionResponse>(),
            handler: { request, context in
                try await self.deleteLiveHash(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_CryptoService.Method.getLiveHash.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Query>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Response>(),
            handler: { request, context in
                try await self.getLiveHash(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_CryptoService.Method.getAccountRecords.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Query>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Response>(),
            handler: { request, context in
                try await self.getAccountRecords(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_CryptoService.Method.cryptoGetBalance.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Query>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Response>(),
            handler: { request, context in
                try await self.cryptoGetBalance(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_CryptoService.Method.getAccountInfo.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Query>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Response>(),
            handler: { request, context in
                try await self.getAccountInfo(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_CryptoService.Method.getTransactionReceipts.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Query>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Response>(),
            handler: { request, context in
                try await self.getTransactionReceipts(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_CryptoService.Method.getTxRecordByTxID.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Query>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Response>(),
            handler: { request, context in
                try await self.getTxRecordByTxID(
                    request: request,
                    context: context
                )
            }
        )
    }
}

// Default implementation of streaming methods from 'StreamingServiceProtocol'.
extension Proto_CryptoService.ServiceProtocol {
    public func createAccount(
        request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse> {
        let response = try await self.createAccount(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func updateAccount(
        request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse> {
        let response = try await self.updateAccount(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func cryptoTransfer(
        request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse> {
        let response = try await self.cryptoTransfer(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func cryptoDelete(
        request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse> {
        let response = try await self.cryptoDelete(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func approveAllowances(
        request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse> {
        let response = try await self.approveAllowances(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func deleteAllowances(
        request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse> {
        let response = try await self.deleteAllowances(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func addLiveHash(
        request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse> {
        let response = try await self.addLiveHash(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func deleteLiveHash(
        request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse> {
        let response = try await self.deleteLiveHash(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func getLiveHash(
        request: GRPCCore.StreamingServerRequest<Proto_Query>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_Response> {
        let response = try await self.getLiveHash(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func getAccountRecords(
        request: GRPCCore.StreamingServerRequest<Proto_Query>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_Response> {
        let response = try await self.getAccountRecords(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func cryptoGetBalance(
        request: GRPCCore.StreamingServerRequest<Proto_Query>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_Response> {
        let response = try await self.cryptoGetBalance(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func getAccountInfo(
        request: GRPCCore.StreamingServerRequest<Proto_Query>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_Response> {
        let response = try await self.getAccountInfo(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func getTransactionReceipts(
        request: GRPCCore.StreamingServerRequest<Proto_Query>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_Response> {
        let response = try await self.getTransactionReceipts(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func getTxRecordByTxID(
        request: GRPCCore.StreamingServerRequest<Proto_Query>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_Response> {
        let response = try await self.getTxRecordByTxID(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }
}

// Default implementation of methods from 'ServiceProtocol'.
extension Proto_CryptoService.SimpleServiceProtocol {
    public func createAccount(
        request: GRPCCore.ServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse> {
        return GRPCCore.ServerResponse<Proto_TransactionResponse>(
            message: try await self.createAccount(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func updateAccount(
        request: GRPCCore.ServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse> {
        return GRPCCore.ServerResponse<Proto_TransactionResponse>(
            message: try await self.updateAccount(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func cryptoTransfer(
        request: GRPCCore.ServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse> {
        return GRPCCore.ServerResponse<Proto_TransactionResponse>(
            message: try await self.cryptoTransfer(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func cryptoDelete(
        request: GRPCCore.ServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse> {
        return GRPCCore.ServerResponse<Proto_TransactionResponse>(
            message: try await self.cryptoDelete(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func approveAllowances(
        request: GRPCCore.ServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse> {
        return GRPCCore.ServerResponse<Proto_TransactionResponse>(
            message: try await self.approveAllowances(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func deleteAllowances(
        request: GRPCCore.ServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse> {
        return GRPCCore.ServerResponse<Proto_TransactionResponse>(
            message: try await self.deleteAllowances(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func addLiveHash(
        request: GRPCCore.ServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse> {
        return GRPCCore.ServerResponse<Proto_TransactionResponse>(
            message: try await self.addLiveHash(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func deleteLiveHash(
        request: GRPCCore.ServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse> {
        return GRPCCore.ServerResponse<Proto_TransactionResponse>(
            message: try await self.deleteLiveHash(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func getLiveHash(
        request: GRPCCore.ServerRequest<Proto_Query>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_Response> {
        return GRPCCore.ServerResponse<Proto_Response>(
            message: try await self.getLiveHash(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func getAccountRecords(
        request: GRPCCore.ServerRequest<Proto_Query>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_Response> {
        return GRPCCore.ServerResponse<Proto_Response>(
            message: try await self.getAccountRecords(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func cryptoGetBalance(
        request: GRPCCore.ServerRequest<Proto_Query>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_Response> {
        return GRPCCore.ServerResponse<Proto_Response>(
            message: try await self.cryptoGetBalance(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func getAccountInfo(
        request: GRPCCore.ServerRequest<Proto_Query>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_Response> {
        return GRPCCore.ServerResponse<Proto_Response>(
            message: try await self.getAccountInfo(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func getTransactionReceipts(
        request: GRPCCore.ServerRequest<Proto_Query>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_Response> {
        return GRPCCore.ServerResponse<Proto_Response>(
            message: try await self.getTransactionReceipts(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func getTxRecordByTxID(
        request: GRPCCore.ServerRequest<Proto_Query>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_Response> {
        return GRPCCore.ServerResponse<Proto_Response>(
            message: try await self.getTxRecordByTxID(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }
}

// MARK: proto.CryptoService (client)

extension Proto_CryptoService {
    /// Generated client protocol for the "proto.CryptoService" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Transactions and queries for the Hedera Crypto Service.
    public protocol ClientProtocol: Sendable {
        /// Call the "createAccount" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Create a new account by submitting the transaction
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func createAccount<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "updateAccount" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Update an account by submitting the transaction
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func updateAccount<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "cryptoTransfer" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Initiate a transfer by submitting the transaction
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func cryptoTransfer<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "cryptoDelete" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Delete an account by submitting the transaction
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func cryptoDelete<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "approveAllowances" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Add one or more approved allowances for spenders to transfer the paying
        /// > account's hbar or tokens.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func approveAllowances<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "deleteAllowances" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Delete one or more of the specific approved NFT serial numbers on an
        /// > owner account.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteAllowances<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "addLiveHash" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Add a livehash
        /// > <blockquote>Important<blockquote>
        /// > This transaction is obsolete, not supported, and SHALL fail with a
        /// > pre-check result of `NOT_SUPPORTED`.</blockquote></blockquote>
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func addLiveHash<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "deleteLiveHash" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Delete a livehash
        /// > <blockquote>Important<blockquote>
        /// > This transaction is obsolete, not supported, and SHALL fail with a
        /// > pre-check result of `NOT_SUPPORTED`.</blockquote></blockquote>
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteLiveHash<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "getLiveHash" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve a livehash for an account
        /// > <blockquote>Important<blockquote>
        /// > This query is obsolete, not supported, and SHALL fail with a pre-check
        /// > result of `NOT_SUPPORTED`.</blockquote></blockquote>
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Query` message.
        ///   - serializer: A serializer for `Proto_Query` messages.
        ///   - deserializer: A deserializer for `Proto_Response` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getLiveHash<Result>(
            request: GRPCCore.ClientRequest<Proto_Query>,
            serializer: some GRPCCore.MessageSerializer<Proto_Query>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_Response>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "getAccountRecords" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Return all transactions in the last 180s of consensus time for which
        /// > the given account was the effective payer **and** network property
        /// > `ledger.keepRecordsInState` was `true`.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Query` message.
        ///   - serializer: A serializer for `Proto_Query` messages.
        ///   - deserializer: A deserializer for `Proto_Response` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getAccountRecords<Result>(
            request: GRPCCore.ClientRequest<Proto_Query>,
            serializer: some GRPCCore.MessageSerializer<Proto_Query>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_Response>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "cryptoGetBalance" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve the balance of an account
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Query` message.
        ///   - serializer: A serializer for `Proto_Query` messages.
        ///   - deserializer: A deserializer for `Proto_Response` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func cryptoGetBalance<Result>(
            request: GRPCCore.ClientRequest<Proto_Query>,
            serializer: some GRPCCore.MessageSerializer<Proto_Query>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_Response>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "getAccountInfo" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve the metadata of an account
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Query` message.
        ///   - serializer: A serializer for `Proto_Query` messages.
        ///   - deserializer: A deserializer for `Proto_Response` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getAccountInfo<Result>(
            request: GRPCCore.ClientRequest<Proto_Query>,
            serializer: some GRPCCore.MessageSerializer<Proto_Query>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_Response>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "getTransactionReceipts" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve the latest receipt for a transaction that is either awaiting
        /// > consensus, or reached consensus in the last 180 seconds
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Query` message.
        ///   - serializer: A serializer for `Proto_Query` messages.
        ///   - deserializer: A deserializer for `Proto_Response` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getTransactionReceipts<Result>(
            request: GRPCCore.ClientRequest<Proto_Query>,
            serializer: some GRPCCore.MessageSerializer<Proto_Query>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_Response>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "getTxRecordByTxID" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve the record of a transaction that is either awaiting consensus,
        /// > or reached consensus in the last 180 seconds
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Query` message.
        ///   - serializer: A serializer for `Proto_Query` messages.
        ///   - deserializer: A deserializer for `Proto_Response` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getTxRecordByTxID<Result>(
            request: GRPCCore.ClientRequest<Proto_Query>,
            serializer: some GRPCCore.MessageSerializer<Proto_Query>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_Response>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "proto.CryptoService" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Transactions and queries for the Hedera Crypto Service.
    public struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        public init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "createAccount" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Create a new account by submitting the transaction
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func createAccount<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_CryptoService.Method.createAccount.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "updateAccount" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Update an account by submitting the transaction
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func updateAccount<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_CryptoService.Method.updateAccount.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "cryptoTransfer" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Initiate a transfer by submitting the transaction
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func cryptoTransfer<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_CryptoService.Method.cryptoTransfer.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "cryptoDelete" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Delete an account by submitting the transaction
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func cryptoDelete<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_CryptoService.Method.cryptoDelete.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "approveAllowances" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Add one or more approved allowances for spenders to transfer the paying
        /// > account's hbar or tokens.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func approveAllowances<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_CryptoService.Method.approveAllowances.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "deleteAllowances" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Delete one or more of the specific approved NFT serial numbers on an
        /// > owner account.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func deleteAllowances<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_CryptoService.Method.deleteAllowances.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "addLiveHash" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Add a livehash
        /// > <blockquote>Important<blockquote>
        /// > This transaction is obsolete, not supported, and SHALL fail with a
        /// > pre-check result of `NOT_SUPPORTED`.</blockquote></blockquote>
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func addLiveHash<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_CryptoService.Method.addLiveHash.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "deleteLiveHash" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Delete a livehash
        /// > <blockquote>Important<blockquote>
        /// > This transaction is obsolete, not supported, and SHALL fail with a
        /// > pre-check result of `NOT_SUPPORTED`.</blockquote></blockquote>
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func deleteLiveHash<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_CryptoService.Method.deleteLiveHash.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "getLiveHash" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve a livehash for an account
        /// > <blockquote>Important<blockquote>
        /// > This query is obsolete, not supported, and SHALL fail with a pre-check
        /// > result of `NOT_SUPPORTED`.</blockquote></blockquote>
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Query` message.
        ///   - serializer: A serializer for `Proto_Query` messages.
        ///   - deserializer: A deserializer for `Proto_Response` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func getLiveHash<Result>(
            request: GRPCCore.ClientRequest<Proto_Query>,
            serializer: some GRPCCore.MessageSerializer<Proto_Query>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_Response>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_CryptoService.Method.getLiveHash.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "getAccountRecords" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Return all transactions in the last 180s of consensus time for which
        /// > the given account was the effective payer **and** network property
        /// > `ledger.keepRecordsInState` was `true`.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Query` message.
        ///   - serializer: A serializer for `Proto_Query` messages.
        ///   - deserializer: A deserializer for `Proto_Response` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func getAccountRecords<Result>(
            request: GRPCCore.ClientRequest<Proto_Query>,
            serializer: some GRPCCore.MessageSerializer<Proto_Query>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_Response>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_CryptoService.Method.getAccountRecords.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "cryptoGetBalance" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve the balance of an account
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Query` message.
        ///   - serializer: A serializer for `Proto_Query` messages.
        ///   - deserializer: A deserializer for `Proto_Response` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func cryptoGetBalance<Result>(
            request: GRPCCore.ClientRequest<Proto_Query>,
            serializer: some GRPCCore.MessageSerializer<Proto_Query>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_Response>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_CryptoService.Method.cryptoGetBalance.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "getAccountInfo" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve the metadata of an account
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Query` message.
        ///   - serializer: A serializer for `Proto_Query` messages.
        ///   - deserializer: A deserializer for `Proto_Response` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func getAccountInfo<Result>(
            request: GRPCCore.ClientRequest<Proto_Query>,
            serializer: some GRPCCore.MessageSerializer<Proto_Query>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_Response>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_CryptoService.Method.getAccountInfo.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "getTransactionReceipts" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve the latest receipt for a transaction that is either awaiting
        /// > consensus, or reached consensus in the last 180 seconds
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Query` message.
        ///   - serializer: A serializer for `Proto_Query` messages.
        ///   - deserializer: A deserializer for `Proto_Response` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func getTransactionReceipts<Result>(
            request: GRPCCore.ClientRequest<Proto_Query>,
            serializer: some GRPCCore.MessageSerializer<Proto_Query>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_Response>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_CryptoService.Method.getTransactionReceipts.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "getTxRecordByTxID" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve the record of a transaction that is either awaiting consensus,
        /// > or reached consensus in the last 180 seconds
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Query` message.
        ///   - serializer: A serializer for `Proto_Query` messages.
        ///   - deserializer: A deserializer for `Proto_Response` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func getTxRecordByTxID<Result>(
            request: GRPCCore.ClientRequest<Proto_Query>,
            serializer: some GRPCCore.MessageSerializer<Proto_Query>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_Response>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_CryptoService.Method.getTxRecordByTxID.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
extension Proto_CryptoService.ClientProtocol {
    /// Call the "createAccount" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Create a new account by submitting the transaction
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Transaction` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createAccount<Result>(
        request: GRPCCore.ClientRequest<Proto_Transaction>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.createAccount(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Transaction>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_TransactionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "updateAccount" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Update an account by submitting the transaction
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Transaction` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func updateAccount<Result>(
        request: GRPCCore.ClientRequest<Proto_Transaction>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.updateAccount(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Transaction>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_TransactionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "cryptoTransfer" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Initiate a transfer by submitting the transaction
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Transaction` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func cryptoTransfer<Result>(
        request: GRPCCore.ClientRequest<Proto_Transaction>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.cryptoTransfer(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Transaction>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_TransactionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "cryptoDelete" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Delete an account by submitting the transaction
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Transaction` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func cryptoDelete<Result>(
        request: GRPCCore.ClientRequest<Proto_Transaction>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.cryptoDelete(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Transaction>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_TransactionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "approveAllowances" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Add one or more approved allowances for spenders to transfer the paying
    /// > account's hbar or tokens.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Transaction` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func approveAllowances<Result>(
        request: GRPCCore.ClientRequest<Proto_Transaction>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.approveAllowances(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Transaction>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_TransactionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "deleteAllowances" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Delete one or more of the specific approved NFT serial numbers on an
    /// > owner account.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Transaction` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteAllowances<Result>(
        request: GRPCCore.ClientRequest<Proto_Transaction>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteAllowances(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Transaction>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_TransactionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "addLiveHash" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Add a livehash
    /// > <blockquote>Important<blockquote>
    /// > This transaction is obsolete, not supported, and SHALL fail with a
    /// > pre-check result of `NOT_SUPPORTED`.</blockquote></blockquote>
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Transaction` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func addLiveHash<Result>(
        request: GRPCCore.ClientRequest<Proto_Transaction>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.addLiveHash(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Transaction>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_TransactionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "deleteLiveHash" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Delete a livehash
    /// > <blockquote>Important<blockquote>
    /// > This transaction is obsolete, not supported, and SHALL fail with a
    /// > pre-check result of `NOT_SUPPORTED`.</blockquote></blockquote>
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Transaction` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteLiveHash<Result>(
        request: GRPCCore.ClientRequest<Proto_Transaction>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteLiveHash(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Transaction>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_TransactionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "getLiveHash" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Retrieve a livehash for an account
    /// > <blockquote>Important<blockquote>
    /// > This query is obsolete, not supported, and SHALL fail with a pre-check
    /// > result of `NOT_SUPPORTED`.</blockquote></blockquote>
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Query` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getLiveHash<Result>(
        request: GRPCCore.ClientRequest<Proto_Query>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getLiveHash(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Query>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Response>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "getAccountRecords" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Return all transactions in the last 180s of consensus time for which
    /// > the given account was the effective payer **and** network property
    /// > `ledger.keepRecordsInState` was `true`.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Query` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getAccountRecords<Result>(
        request: GRPCCore.ClientRequest<Proto_Query>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getAccountRecords(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Query>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Response>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "cryptoGetBalance" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Retrieve the balance of an account
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Query` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func cryptoGetBalance<Result>(
        request: GRPCCore.ClientRequest<Proto_Query>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.cryptoGetBalance(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Query>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Response>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "getAccountInfo" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Retrieve the metadata of an account
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Query` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getAccountInfo<Result>(
        request: GRPCCore.ClientRequest<Proto_Query>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getAccountInfo(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Query>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Response>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "getTransactionReceipts" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Retrieve the latest receipt for a transaction that is either awaiting
    /// > consensus, or reached consensus in the last 180 seconds
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Query` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getTransactionReceipts<Result>(
        request: GRPCCore.ClientRequest<Proto_Query>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getTransactionReceipts(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Query>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Response>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "getTxRecordByTxID" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Retrieve the record of a transaction that is either awaiting consensus,
    /// > or reached consensus in the last 180 seconds
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Query` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getTxRecordByTxID<Result>(
        request: GRPCCore.ClientRequest<Proto_Query>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getTxRecordByTxID(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Query>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Response>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
extension Proto_CryptoService.ClientProtocol {
    /// Call the "createAccount" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Create a new account by submitting the transaction
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createAccount<Result>(
        _ message: Proto_Transaction,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Transaction>(
            message: message,
            metadata: metadata
        )
        return try await self.createAccount(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "updateAccount" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Update an account by submitting the transaction
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func updateAccount<Result>(
        _ message: Proto_Transaction,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Transaction>(
            message: message,
            metadata: metadata
        )
        return try await self.updateAccount(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "cryptoTransfer" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Initiate a transfer by submitting the transaction
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func cryptoTransfer<Result>(
        _ message: Proto_Transaction,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Transaction>(
            message: message,
            metadata: metadata
        )
        return try await self.cryptoTransfer(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "cryptoDelete" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Delete an account by submitting the transaction
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func cryptoDelete<Result>(
        _ message: Proto_Transaction,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Transaction>(
            message: message,
            metadata: metadata
        )
        return try await self.cryptoDelete(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "approveAllowances" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Add one or more approved allowances for spenders to transfer the paying
    /// > account's hbar or tokens.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func approveAllowances<Result>(
        _ message: Proto_Transaction,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Transaction>(
            message: message,
            metadata: metadata
        )
        return try await self.approveAllowances(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "deleteAllowances" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Delete one or more of the specific approved NFT serial numbers on an
    /// > owner account.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteAllowances<Result>(
        _ message: Proto_Transaction,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Transaction>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteAllowances(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "addLiveHash" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Add a livehash
    /// > <blockquote>Important<blockquote>
    /// > This transaction is obsolete, not supported, and SHALL fail with a
    /// > pre-check result of `NOT_SUPPORTED`.</blockquote></blockquote>
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func addLiveHash<Result>(
        _ message: Proto_Transaction,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Transaction>(
            message: message,
            metadata: metadata
        )
        return try await self.addLiveHash(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "deleteLiveHash" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Delete a livehash
    /// > <blockquote>Important<blockquote>
    /// > This transaction is obsolete, not supported, and SHALL fail with a
    /// > pre-check result of `NOT_SUPPORTED`.</blockquote></blockquote>
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteLiveHash<Result>(
        _ message: Proto_Transaction,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Transaction>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteLiveHash(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "getLiveHash" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Retrieve a livehash for an account
    /// > <blockquote>Important<blockquote>
    /// > This query is obsolete, not supported, and SHALL fail with a pre-check
    /// > result of `NOT_SUPPORTED`.</blockquote></blockquote>
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getLiveHash<Result>(
        _ message: Proto_Query,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Query>(
            message: message,
            metadata: metadata
        )
        return try await self.getLiveHash(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "getAccountRecords" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Return all transactions in the last 180s of consensus time for which
    /// > the given account was the effective payer **and** network property
    /// > `ledger.keepRecordsInState` was `true`.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getAccountRecords<Result>(
        _ message: Proto_Query,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Query>(
            message: message,
            metadata: metadata
        )
        return try await self.getAccountRecords(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "cryptoGetBalance" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Retrieve the balance of an account
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func cryptoGetBalance<Result>(
        _ message: Proto_Query,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Query>(
            message: message,
            metadata: metadata
        )
        return try await self.cryptoGetBalance(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "getAccountInfo" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Retrieve the metadata of an account
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getAccountInfo<Result>(
        _ message: Proto_Query,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Query>(
            message: message,
            metadata: metadata
        )
        return try await self.getAccountInfo(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "getTransactionReceipts" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Retrieve the latest receipt for a transaction that is either awaiting
    /// > consensus, or reached consensus in the last 180 seconds
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getTransactionReceipts<Result>(
        _ message: Proto_Query,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Query>(
            message: message,
            metadata: metadata
        )
        return try await self.getTransactionReceipts(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "getTxRecordByTxID" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Retrieve the record of a transaction that is either awaiting consensus,
    /// > or reached consensus in the last 180 seconds
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getTxRecordByTxID<Result>(
        _ message: Proto_Query,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Query>(
            message: message,
            metadata: metadata
        )
        return try await self.getTxRecordByTxID(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}