// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: services/freeze.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

///*
/// # Freeze
/// Transaction body for a network "freeze" transaction.
///
/// ### Keywords
/// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
/// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
/// document are to be interpreted as described in
/// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
/// [RFC8174](https://www.ietf.org/rfc/rfc8174).

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
/// A transaction body for all five freeze transactions.
///
/// Combining five different transactions into a single message, this
/// transaction body MUST support options to schedule a freeze, abort a
/// scheduled freeze, prepare a software upgrade, prepare a telemetry
/// upgrade, or initiate a software upgrade.
///
/// For a scheduled freeze, at the scheduled time, according to
/// network consensus time
///   - A freeze (`FREEZE_ONLY`) causes the network nodes to stop creating
///     events or accepting transactions, and enter a persistent
///     maintenance state.
///   - A freeze upgrade (`FREEZE_UPGRADE`) causes the network nodes to stop
///     creating events or accepting transactions, and upgrade the node software
///     from a previously prepared upgrade package. The network nodes then
///     restart and rejoin the network after upgrading.
///
/// For other freeze types, immediately upon processing the freeze transaction
///   - A Freeze Abort (`FREEZE_ABORT`) cancels any pending scheduled freeze.
///   - A prepare upgrade (`PREPARE_UPGRADE`) begins to extract the contents of
///     the specified upgrade file to the local filesystem.
///   - A telemetry upgrade (`TELEMETRY_UPGRADE`) causes the network nodes to
///     extract a telemetry upgrade package to the local filesystem and signal
///     other software on the machine to upgrade, without impacting the node or
///     network processing.
///
/// ### Block Stream Effects
/// Unknown
public struct Proto_FreezeTransactionBody: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// Rejected if set; replace with `start_time`.<br/>
  /// The start hour (in UTC time), a value between 0 and 23
  ///
  /// NOTE: This field was marked as deprecated in the .proto file.
  public var startHour: Int32 = 0

  ///*
  /// Rejected if set; replace with `start_time`.<br/>
  /// The start minute (in UTC time), a value between 0 and 59
  ///
  /// NOTE: This field was marked as deprecated in the .proto file.
  public var startMin: Int32 = 0

  ///*
  /// Rejected if set; end time is neither assigned nor guaranteed and depends
  /// on many uncontrolled factors.<br/>
  /// The end hour (in UTC time), a value between 0 and 23
  ///
  /// NOTE: This field was marked as deprecated in the .proto file.
  public var endHour: Int32 = 0

  ///*
  /// Rejected if set; end time is neither assigned nor guaranteed and depends
  /// on many uncontrolled factors.<br/>
  /// The end minute (in UTC time), a value between 0 and 59
  ///
  /// NOTE: This field was marked as deprecated in the .proto file.
  public var endMin: Int32 = 0

  ///*
  /// An upgrade file.
  /// <p>
  /// If set, the identifier of a file in network state.<br/>
  /// The contents of this file MUST be a `zip` file and this data
  /// SHALL be extracted to the node filesystem during a
  /// `PREPARE_UPGRADE` or `TELEMETRY_UPGRADE` freeze type.<br/>
  /// The `file_hash` field MUST match the SHA384 hash of the content
  /// of this file.<br/>
  /// The extracted data SHALL be used to perform a network software update
  /// if a `FREEZE_UPGRADE` freeze type is subsequently processed.
  public var updateFile: Proto_FileID {
    get {return _updateFile ?? Proto_FileID()}
    set {_updateFile = newValue}
  }
  /// Returns true if `updateFile` has been explicitly set.
  public var hasUpdateFile: Bool {return self._updateFile != nil}
  /// Clears the value of `updateFile`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateFile() {self._updateFile = nil}

  ///*
  /// A SHA384 hash of file content.<br/>
  /// This is a hash of the file identified by `update_file`.
  /// <p>
  /// This MUST be set if `update_file` is set, and MUST match the
  /// SHA384 hash of the contents of that file.
  public var fileHash: Data = Data()

  ///*
  /// A start time for the freeze.
  /// <p>
  /// If this field is REQUIRED for the specified `freeze_type`, then
  /// when the network consensus time reaches this instant<ol>
  ///   <li>The network SHALL stop accepting transactions.</li>
  ///   <li>The network SHALL gossip a freeze state.</li>
  ///   <li>The nodes SHALL, in coordinated order, disconnect and
  ///       shut down.</li>
  ///   <li>The nodes SHALL halt or perform a software upgrade, depending
  ///       on `freeze_type`.</li>
  ///   <li>If the `freeze_type` is `FREEZE_UPGRADE`, the nodes SHALL
  ///       restart and rejoin the network upon completion of the
  ///       software upgrade.</li>
  /// </ol>
  /// <blockquote>
  /// If the `freeze_type` is `TELEMETRY_UPGRADE`, the start time is required,
  /// but the network SHALL NOT stop, halt, or interrupt transaction
  /// processing. The required field is an historical anomaly and SHOULD
  /// change in a future release.</blockquote>
  public var startTime: Proto_Timestamp {
    get {return _startTime ?? Proto_Timestamp()}
    set {_startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  public var hasStartTime: Bool {return self._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  public mutating func clearStartTime() {self._startTime = nil}

  ///*
  /// The type of freeze.
  /// <p>
  /// This REQUIRED field effectively selects between five quite different
  /// transactions in the same transaction body. Depending on this value
  /// the service may schedule a freeze, prepare upgrades, perform upgrades,
  /// or even abort a previously scheduled freeze.
  public var freezeType: Proto_FreezeType = .unknownFreezeType

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _updateFile: Proto_FileID? = nil
  fileprivate var _startTime: Proto_Timestamp? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "proto"

extension Proto_FreezeTransactionBody: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FreezeTransactionBody"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "startHour"),
    2: .same(proto: "startMin"),
    3: .same(proto: "endHour"),
    4: .same(proto: "endMin"),
    5: .standard(proto: "update_file"),
    6: .standard(proto: "file_hash"),
    7: .standard(proto: "start_time"),
    8: .standard(proto: "freeze_type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.startHour) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.startMin) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.endHour) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.endMin) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._updateFile) }()
      case 6: try { try decoder.decodeSingularBytesField(value: &self.fileHash) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._startTime) }()
      case 8: try { try decoder.decodeSingularEnumField(value: &self.freezeType) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.startHour != 0 {
      try visitor.visitSingularInt32Field(value: self.startHour, fieldNumber: 1)
    }
    if self.startMin != 0 {
      try visitor.visitSingularInt32Field(value: self.startMin, fieldNumber: 2)
    }
    if self.endHour != 0 {
      try visitor.visitSingularInt32Field(value: self.endHour, fieldNumber: 3)
    }
    if self.endMin != 0 {
      try visitor.visitSingularInt32Field(value: self.endMin, fieldNumber: 4)
    }
    try { if let v = self._updateFile {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    if !self.fileHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.fileHash, fieldNumber: 6)
    }
    try { if let v = self._startTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    if self.freezeType != .unknownFreezeType {
      try visitor.visitSingularEnumField(value: self.freezeType, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_FreezeTransactionBody, rhs: Proto_FreezeTransactionBody) -> Bool {
    if lhs.startHour != rhs.startHour {return false}
    if lhs.startMin != rhs.startMin {return false}
    if lhs.endHour != rhs.endHour {return false}
    if lhs.endMin != rhs.endMin {return false}
    if lhs._updateFile != rhs._updateFile {return false}
    if lhs.fileHash != rhs.fileHash {return false}
    if lhs._startTime != rhs._startTime {return false}
    if lhs.freezeType != rhs.freezeType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
