///*
/// # Token Service
/// gRPC definitions for token service transactions.
///
/// ### Keywords
/// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
/// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
/// document are to be interpreted as described in
/// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
/// [RFC8174](https://www.ietf.org/rfc/rfc8174).

// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: services/token_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf

// MARK: - proto.TokenService

/// Namespace containing generated types for the "proto.TokenService" service.
public enum Proto_TokenService {
    /// Service descriptor for the "proto.TokenService" service.
    public static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.TokenService")
    /// Namespace for method metadata.
    public enum Method {
        /// Namespace for "createToken" metadata.
        public enum createToken {
            /// Request type for "createToken".
            public typealias Input = Proto_Transaction
            /// Response type for "createToken".
            public typealias Output = Proto_TransactionResponse
            /// Descriptor for "createToken".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.TokenService"),
                method: "createToken"
            )
        }
        /// Namespace for "updateToken" metadata.
        public enum updateToken {
            /// Request type for "updateToken".
            public typealias Input = Proto_Transaction
            /// Response type for "updateToken".
            public typealias Output = Proto_TransactionResponse
            /// Descriptor for "updateToken".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.TokenService"),
                method: "updateToken"
            )
        }
        /// Namespace for "mintToken" metadata.
        public enum mintToken {
            /// Request type for "mintToken".
            public typealias Input = Proto_Transaction
            /// Response type for "mintToken".
            public typealias Output = Proto_TransactionResponse
            /// Descriptor for "mintToken".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.TokenService"),
                method: "mintToken"
            )
        }
        /// Namespace for "burnToken" metadata.
        public enum burnToken {
            /// Request type for "burnToken".
            public typealias Input = Proto_Transaction
            /// Response type for "burnToken".
            public typealias Output = Proto_TransactionResponse
            /// Descriptor for "burnToken".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.TokenService"),
                method: "burnToken"
            )
        }
        /// Namespace for "deleteToken" metadata.
        public enum deleteToken {
            /// Request type for "deleteToken".
            public typealias Input = Proto_Transaction
            /// Response type for "deleteToken".
            public typealias Output = Proto_TransactionResponse
            /// Descriptor for "deleteToken".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.TokenService"),
                method: "deleteToken"
            )
        }
        /// Namespace for "wipeTokenAccount" metadata.
        public enum wipeTokenAccount {
            /// Request type for "wipeTokenAccount".
            public typealias Input = Proto_Transaction
            /// Response type for "wipeTokenAccount".
            public typealias Output = Proto_TransactionResponse
            /// Descriptor for "wipeTokenAccount".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.TokenService"),
                method: "wipeTokenAccount"
            )
        }
        /// Namespace for "freezeTokenAccount" metadata.
        public enum freezeTokenAccount {
            /// Request type for "freezeTokenAccount".
            public typealias Input = Proto_Transaction
            /// Response type for "freezeTokenAccount".
            public typealias Output = Proto_TransactionResponse
            /// Descriptor for "freezeTokenAccount".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.TokenService"),
                method: "freezeTokenAccount"
            )
        }
        /// Namespace for "unfreezeTokenAccount" metadata.
        public enum unfreezeTokenAccount {
            /// Request type for "unfreezeTokenAccount".
            public typealias Input = Proto_Transaction
            /// Response type for "unfreezeTokenAccount".
            public typealias Output = Proto_TransactionResponse
            /// Descriptor for "unfreezeTokenAccount".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.TokenService"),
                method: "unfreezeTokenAccount"
            )
        }
        /// Namespace for "grantKycToTokenAccount" metadata.
        public enum grantKycToTokenAccount {
            /// Request type for "grantKycToTokenAccount".
            public typealias Input = Proto_Transaction
            /// Response type for "grantKycToTokenAccount".
            public typealias Output = Proto_TransactionResponse
            /// Descriptor for "grantKycToTokenAccount".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.TokenService"),
                method: "grantKycToTokenAccount"
            )
        }
        /// Namespace for "revokeKycFromTokenAccount" metadata.
        public enum revokeKycFromTokenAccount {
            /// Request type for "revokeKycFromTokenAccount".
            public typealias Input = Proto_Transaction
            /// Response type for "revokeKycFromTokenAccount".
            public typealias Output = Proto_TransactionResponse
            /// Descriptor for "revokeKycFromTokenAccount".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.TokenService"),
                method: "revokeKycFromTokenAccount"
            )
        }
        /// Namespace for "associateTokens" metadata.
        public enum associateTokens {
            /// Request type for "associateTokens".
            public typealias Input = Proto_Transaction
            /// Response type for "associateTokens".
            public typealias Output = Proto_TransactionResponse
            /// Descriptor for "associateTokens".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.TokenService"),
                method: "associateTokens"
            )
        }
        /// Namespace for "dissociateTokens" metadata.
        public enum dissociateTokens {
            /// Request type for "dissociateTokens".
            public typealias Input = Proto_Transaction
            /// Response type for "dissociateTokens".
            public typealias Output = Proto_TransactionResponse
            /// Descriptor for "dissociateTokens".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.TokenService"),
                method: "dissociateTokens"
            )
        }
        /// Namespace for "updateTokenFeeSchedule" metadata.
        public enum updateTokenFeeSchedule {
            /// Request type for "updateTokenFeeSchedule".
            public typealias Input = Proto_Transaction
            /// Response type for "updateTokenFeeSchedule".
            public typealias Output = Proto_TransactionResponse
            /// Descriptor for "updateTokenFeeSchedule".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.TokenService"),
                method: "updateTokenFeeSchedule"
            )
        }
        /// Namespace for "getTokenInfo" metadata.
        public enum getTokenInfo {
            /// Request type for "getTokenInfo".
            public typealias Input = Proto_Query
            /// Response type for "getTokenInfo".
            public typealias Output = Proto_Response
            /// Descriptor for "getTokenInfo".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.TokenService"),
                method: "getTokenInfo"
            )
        }
        /// Namespace for "getTokenNftInfo" metadata.
        public enum getTokenNftInfo {
            /// Request type for "getTokenNftInfo".
            public typealias Input = Proto_Query
            /// Response type for "getTokenNftInfo".
            public typealias Output = Proto_Response
            /// Descriptor for "getTokenNftInfo".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.TokenService"),
                method: "getTokenNftInfo"
            )
        }
        /// Namespace for "pauseToken" metadata.
        public enum pauseToken {
            /// Request type for "pauseToken".
            public typealias Input = Proto_Transaction
            /// Response type for "pauseToken".
            public typealias Output = Proto_TransactionResponse
            /// Descriptor for "pauseToken".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.TokenService"),
                method: "pauseToken"
            )
        }
        /// Namespace for "unpauseToken" metadata.
        public enum unpauseToken {
            /// Request type for "unpauseToken".
            public typealias Input = Proto_Transaction
            /// Response type for "unpauseToken".
            public typealias Output = Proto_TransactionResponse
            /// Descriptor for "unpauseToken".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.TokenService"),
                method: "unpauseToken"
            )
        }
        /// Namespace for "updateNfts" metadata.
        public enum updateNfts {
            /// Request type for "updateNfts".
            public typealias Input = Proto_Transaction
            /// Response type for "updateNfts".
            public typealias Output = Proto_TransactionResponse
            /// Descriptor for "updateNfts".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.TokenService"),
                method: "updateNfts"
            )
        }
        /// Namespace for "rejectToken" metadata.
        public enum rejectToken {
            /// Request type for "rejectToken".
            public typealias Input = Proto_Transaction
            /// Response type for "rejectToken".
            public typealias Output = Proto_TransactionResponse
            /// Descriptor for "rejectToken".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.TokenService"),
                method: "rejectToken"
            )
        }
        /// Namespace for "airdropTokens" metadata.
        public enum airdropTokens {
            /// Request type for "airdropTokens".
            public typealias Input = Proto_Transaction
            /// Response type for "airdropTokens".
            public typealias Output = Proto_TransactionResponse
            /// Descriptor for "airdropTokens".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.TokenService"),
                method: "airdropTokens"
            )
        }
        /// Namespace for "cancelAirdrop" metadata.
        public enum cancelAirdrop {
            /// Request type for "cancelAirdrop".
            public typealias Input = Proto_Transaction
            /// Response type for "cancelAirdrop".
            public typealias Output = Proto_TransactionResponse
            /// Descriptor for "cancelAirdrop".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.TokenService"),
                method: "cancelAirdrop"
            )
        }
        /// Namespace for "claimAirdrop" metadata.
        public enum claimAirdrop {
            /// Request type for "claimAirdrop".
            public typealias Input = Proto_Transaction
            /// Response type for "claimAirdrop".
            public typealias Output = Proto_TransactionResponse
            /// Descriptor for "claimAirdrop".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.TokenService"),
                method: "claimAirdrop"
            )
        }
        /// Descriptors for all methods in the "proto.TokenService" service.
        public static let descriptors: [GRPCCore.MethodDescriptor] = [
            createToken.descriptor,
            updateToken.descriptor,
            mintToken.descriptor,
            burnToken.descriptor,
            deleteToken.descriptor,
            wipeTokenAccount.descriptor,
            freezeTokenAccount.descriptor,
            unfreezeTokenAccount.descriptor,
            grantKycToTokenAccount.descriptor,
            revokeKycFromTokenAccount.descriptor,
            associateTokens.descriptor,
            dissociateTokens.descriptor,
            updateTokenFeeSchedule.descriptor,
            getTokenInfo.descriptor,
            getTokenNftInfo.descriptor,
            pauseToken.descriptor,
            unpauseToken.descriptor,
            updateNfts.descriptor,
            rejectToken.descriptor,
            airdropTokens.descriptor,
            cancelAirdrop.descriptor,
            claimAirdrop.descriptor
        ]
    }
}

extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "proto.TokenService" service.
    public static let proto_TokenService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.TokenService")
}

// MARK: proto.TokenService (server)

extension Proto_TokenService {
    /// Streaming variant of the service protocol for the "proto.TokenService" service.
    ///
    /// This protocol is the lowest-level of the service protocols generated for this service
    /// giving you the most flexibility over the implementation of your service. This comes at
    /// the cost of more verbose and less strict APIs. Each RPC requires you to implement it in
    /// terms of a request stream and response stream. Where only a single request or response
    /// message is expected, you are responsible for enforcing this invariant is maintained.
    ///
    /// Where possible, prefer using the stricter, less-verbose ``ServiceProtocol``
    /// or ``SimpleServiceProtocol`` instead.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Transactions and queries for the Token Service
    public protocol StreamingServiceProtocol: GRPCCore.RegistrableRPCService {
        /// Handle the "createToken" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Create a new token.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Transaction` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_TransactionResponse` messages.
        func createToken(
            request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse>

        /// Handle the "updateToken" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Update a token.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Transaction` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_TransactionResponse` messages.
        func updateToken(
            request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse>

        /// Handle the "mintToken" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Mint one or more tokens to the treasury account.
        /// > <p>
        /// > This MAY specify a quantity of fungible/common tokens or
        /// > a list of specific non-fungible/unique tokes, but
        /// > MUST NOT specify both.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Transaction` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_TransactionResponse` messages.
        func mintToken(
            request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse>

        /// Handle the "burnToken" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Burn one or more tokens from the treasury account.
        /// > <p>
        /// > This MAY specify a quantity of fungible/common tokens or
        /// > a list of specific non-fungible/unique tokes, but
        /// > MUST NOT specify both.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Transaction` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_TransactionResponse` messages.
        func burnToken(
            request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse>

        /// Handle the "deleteToken" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Delete a token.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Transaction` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_TransactionResponse` messages.
        func deleteToken(
            request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse>

        /// Handle the "wipeTokenAccount" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Wipe one or more tokens from an identified Account.
        /// > <p>
        /// > This MAY specify a quantity of fungible/common tokens or
        /// > a list of specific non-fungible/unique tokes, but
        /// > MUST NOT specify both.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Transaction` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_TransactionResponse` messages.
        func wipeTokenAccount(
            request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse>

        /// Handle the "freezeTokenAccount" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Freeze the transfer of tokens to or from an identified Account.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Transaction` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_TransactionResponse` messages.
        func freezeTokenAccount(
            request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse>

        /// Handle the "unfreezeTokenAccount" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Unfreeze the transfer of tokens to or from an identified Account.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Transaction` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_TransactionResponse` messages.
        func unfreezeTokenAccount(
            request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse>

        /// Handle the "grantKycToTokenAccount" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Assert that KYC requirements are met for a specific account with
        /// > respect to a specific token.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Transaction` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_TransactionResponse` messages.
        func grantKycToTokenAccount(
            request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse>

        /// Handle the "revokeKycFromTokenAccount" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Assert that KYC requirements are _not_ met for a specific account with
        /// > respect to a specific token.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Transaction` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_TransactionResponse` messages.
        func revokeKycFromTokenAccount(
            request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse>

        /// Handle the "associateTokens" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Associate one or more tokens to an account.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Transaction` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_TransactionResponse` messages.
        func associateTokens(
            request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse>

        /// Handle the "dissociateTokens" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Dissociate one or more tokens from an account.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Transaction` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_TransactionResponse` messages.
        func dissociateTokens(
            request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse>

        /// Handle the "updateTokenFeeSchedule" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Update the custom fee schedule for a token.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Transaction` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_TransactionResponse` messages.
        func updateTokenFeeSchedule(
            request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse>

        /// Handle the "getTokenInfo" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve the detail characteristics for a token.
        /// > <p>
        /// > This query SHALL return information for the token type as a whole.<br/>
        /// > This query SHALL NOT return information for individual tokens.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Query` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_Response` messages.
        func getTokenInfo(
            request: GRPCCore.StreamingServerRequest<Proto_Query>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_Response>

        /// Handle the "getTokenNftInfo" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve the metadata for a specific non-fungible/unique token.<br/>
        /// > The NFT to query is identified by token identifier and serial number.
        /// > <p>
        /// > This query SHALL return token metadata and, if an allowance is defined,
        /// > the designated "spender" account for the queried NFT.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Query` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_Response` messages.
        func getTokenNftInfo(
            request: GRPCCore.StreamingServerRequest<Proto_Query>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_Response>

        /// Handle the "pauseToken" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Pause a token.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Transaction` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_TransactionResponse` messages.
        func pauseToken(
            request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse>

        /// Handle the "unpauseToken" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Unpause (resume) a token.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Transaction` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_TransactionResponse` messages.
        func unpauseToken(
            request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse>

        /// Handle the "updateNfts" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Update multiple non-fungible/unique tokens (NFTs) in a collection.<br/>
        /// > The NFTs are identified by token identifier and one or more
        /// > serial numbers.
        /// > <p>
        /// > This transaction SHALL update NFT metadata only.<br/>
        /// > This transaction MUST be signed by the token `metadata_key`.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Transaction` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_TransactionResponse` messages.
        func updateNfts(
            request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse>

        /// Handle the "rejectToken" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Reject one or more tokens.
        /// > <p>
        /// > This transaction SHALL transfer the full balance of one or more tokens
        /// > from the requesting account to the treasury for each token.<br/>
        /// > This transfer SHALL NOT charge any custom fee or royalty defined for
        /// > the token(s) to be rejected.<br/>
        /// > ### Effects on success
        /// > <ul>
        /// >   <li>If the rejected token is fungible/common, the requesting account
        /// >       SHALL have a balance of 0 for the rejected token.<br/>
        /// >       The treasury balance SHALL increase by the amount that the
        /// >       requesting account decreased.</li>
        /// >   <li>If the rejected token is non-fungible/unique the requesting
        /// >       account SHALL NOT hold the specific serialized token that
        /// >       is rejected.<br/>
        /// >       The treasury account SHALL hold each specific serialized token
        /// >       that was rejected.</li>
        /// > </li>
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Transaction` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_TransactionResponse` messages.
        func rejectToken(
            request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse>

        /// Handle the "airdropTokens" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Airdrop one or more tokens to one or more accounts.
        /// > <p>
        /// > This transaction SHALL distribute tokens from the balance of one or
        /// > more sending account(s) to the balance of one or more
        /// > recipient accounts.<br/>
        /// > Accounts SHALL receive the tokens in one of four ways.
        /// > <ul>
        /// >   <li>An account already associated to the token to be distributed
        /// >       SHALL receive the airdropped tokens immediately to the
        /// >       recipient account balance.</li>
        /// >   <li>An account with available automatic association slots SHALL
        /// >       be automatically associated to the token, and SHALL
        /// >       immediately receive the airdropped tokens to the recipient
        /// >       account balance.</li>
        /// >   <li>An account with "receiver signature required" set SHALL have
        /// >       a "Pending Airdrop" created and MUST claim that airdrop with
        /// >       a `claimAirdrop` transaction.</li>
        /// >   <li>An account with no available automatic association slots SHALL
        /// >       have a "Pending Airdrop" created and MUST claim that airdrop
        /// >       with a `claimAirdrop` transaction. </li>
        /// > </ul>
        /// > Any airdrop that completes immediately SHALL be irreversible.<br/>
        /// > Any airdrop that results in a "Pending Airdrop" MAY be canceled via
        /// > a `cancelAirdrop` transaction.<br/>
        /// > All transfer fees (including custom fees and royalties), as well as
        /// > the rent cost for the first auto-renewal period for any
        /// > automatic-association slot occupied by the airdropped tokens,
        /// > SHALL be charged to the account submitting this transaction.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Transaction` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_TransactionResponse` messages.
        func airdropTokens(
            request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse>

        /// Handle the "cancelAirdrop" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Cancel one or more pending airdrops.
        /// > <p>
        /// > This transaction MUST be signed by _each_ account *sending* an
        /// > airdrop to be canceled.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Transaction` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_TransactionResponse` messages.
        func cancelAirdrop(
            request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse>

        /// Handle the "claimAirdrop" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Claim one or more pending airdrops.
        /// > <p>
        /// > This transaction MUST be signed by _each_ account **receiving**
        /// > an airdrop to be claimed.<br>
        /// > If a "Sender" lacks sufficient balance to fulfill the airdrop at
        /// > the time the claim is made, that claim SHALL fail.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Transaction` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_TransactionResponse` messages.
        func claimAirdrop(
            request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse>
    }

    /// Service protocol for the "proto.TokenService" service.
    ///
    /// This protocol is higher level than ``StreamingServiceProtocol`` but lower level than
    /// the ``SimpleServiceProtocol``, it provides access to request and response metadata and
    /// trailing response metadata. If you don't need these then consider using
    /// the ``SimpleServiceProtocol``. If you need fine grained control over your RPCs then
    /// use ``StreamingServiceProtocol``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Transactions and queries for the Token Service
    public protocol ServiceProtocol: Proto_TokenService.StreamingServiceProtocol {
        /// Handle the "createToken" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Create a new token.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_TransactionResponse` message.
        func createToken(
            request: GRPCCore.ServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse>

        /// Handle the "updateToken" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Update a token.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_TransactionResponse` message.
        func updateToken(
            request: GRPCCore.ServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse>

        /// Handle the "mintToken" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Mint one or more tokens to the treasury account.
        /// > <p>
        /// > This MAY specify a quantity of fungible/common tokens or
        /// > a list of specific non-fungible/unique tokes, but
        /// > MUST NOT specify both.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_TransactionResponse` message.
        func mintToken(
            request: GRPCCore.ServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse>

        /// Handle the "burnToken" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Burn one or more tokens from the treasury account.
        /// > <p>
        /// > This MAY specify a quantity of fungible/common tokens or
        /// > a list of specific non-fungible/unique tokes, but
        /// > MUST NOT specify both.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_TransactionResponse` message.
        func burnToken(
            request: GRPCCore.ServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse>

        /// Handle the "deleteToken" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Delete a token.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_TransactionResponse` message.
        func deleteToken(
            request: GRPCCore.ServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse>

        /// Handle the "wipeTokenAccount" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Wipe one or more tokens from an identified Account.
        /// > <p>
        /// > This MAY specify a quantity of fungible/common tokens or
        /// > a list of specific non-fungible/unique tokes, but
        /// > MUST NOT specify both.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_TransactionResponse` message.
        func wipeTokenAccount(
            request: GRPCCore.ServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse>

        /// Handle the "freezeTokenAccount" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Freeze the transfer of tokens to or from an identified Account.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_TransactionResponse` message.
        func freezeTokenAccount(
            request: GRPCCore.ServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse>

        /// Handle the "unfreezeTokenAccount" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Unfreeze the transfer of tokens to or from an identified Account.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_TransactionResponse` message.
        func unfreezeTokenAccount(
            request: GRPCCore.ServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse>

        /// Handle the "grantKycToTokenAccount" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Assert that KYC requirements are met for a specific account with
        /// > respect to a specific token.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_TransactionResponse` message.
        func grantKycToTokenAccount(
            request: GRPCCore.ServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse>

        /// Handle the "revokeKycFromTokenAccount" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Assert that KYC requirements are _not_ met for a specific account with
        /// > respect to a specific token.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_TransactionResponse` message.
        func revokeKycFromTokenAccount(
            request: GRPCCore.ServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse>

        /// Handle the "associateTokens" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Associate one or more tokens to an account.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_TransactionResponse` message.
        func associateTokens(
            request: GRPCCore.ServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse>

        /// Handle the "dissociateTokens" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Dissociate one or more tokens from an account.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_TransactionResponse` message.
        func dissociateTokens(
            request: GRPCCore.ServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse>

        /// Handle the "updateTokenFeeSchedule" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Update the custom fee schedule for a token.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_TransactionResponse` message.
        func updateTokenFeeSchedule(
            request: GRPCCore.ServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse>

        /// Handle the "getTokenInfo" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve the detail characteristics for a token.
        /// > <p>
        /// > This query SHALL return information for the token type as a whole.<br/>
        /// > This query SHALL NOT return information for individual tokens.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Query` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_Response` message.
        func getTokenInfo(
            request: GRPCCore.ServerRequest<Proto_Query>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_Response>

        /// Handle the "getTokenNftInfo" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve the metadata for a specific non-fungible/unique token.<br/>
        /// > The NFT to query is identified by token identifier and serial number.
        /// > <p>
        /// > This query SHALL return token metadata and, if an allowance is defined,
        /// > the designated "spender" account for the queried NFT.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Query` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_Response` message.
        func getTokenNftInfo(
            request: GRPCCore.ServerRequest<Proto_Query>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_Response>

        /// Handle the "pauseToken" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Pause a token.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_TransactionResponse` message.
        func pauseToken(
            request: GRPCCore.ServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse>

        /// Handle the "unpauseToken" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Unpause (resume) a token.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_TransactionResponse` message.
        func unpauseToken(
            request: GRPCCore.ServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse>

        /// Handle the "updateNfts" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Update multiple non-fungible/unique tokens (NFTs) in a collection.<br/>
        /// > The NFTs are identified by token identifier and one or more
        /// > serial numbers.
        /// > <p>
        /// > This transaction SHALL update NFT metadata only.<br/>
        /// > This transaction MUST be signed by the token `metadata_key`.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_TransactionResponse` message.
        func updateNfts(
            request: GRPCCore.ServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse>

        /// Handle the "rejectToken" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Reject one or more tokens.
        /// > <p>
        /// > This transaction SHALL transfer the full balance of one or more tokens
        /// > from the requesting account to the treasury for each token.<br/>
        /// > This transfer SHALL NOT charge any custom fee or royalty defined for
        /// > the token(s) to be rejected.<br/>
        /// > ### Effects on success
        /// > <ul>
        /// >   <li>If the rejected token is fungible/common, the requesting account
        /// >       SHALL have a balance of 0 for the rejected token.<br/>
        /// >       The treasury balance SHALL increase by the amount that the
        /// >       requesting account decreased.</li>
        /// >   <li>If the rejected token is non-fungible/unique the requesting
        /// >       account SHALL NOT hold the specific serialized token that
        /// >       is rejected.<br/>
        /// >       The treasury account SHALL hold each specific serialized token
        /// >       that was rejected.</li>
        /// > </li>
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_TransactionResponse` message.
        func rejectToken(
            request: GRPCCore.ServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse>

        /// Handle the "airdropTokens" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Airdrop one or more tokens to one or more accounts.
        /// > <p>
        /// > This transaction SHALL distribute tokens from the balance of one or
        /// > more sending account(s) to the balance of one or more
        /// > recipient accounts.<br/>
        /// > Accounts SHALL receive the tokens in one of four ways.
        /// > <ul>
        /// >   <li>An account already associated to the token to be distributed
        /// >       SHALL receive the airdropped tokens immediately to the
        /// >       recipient account balance.</li>
        /// >   <li>An account with available automatic association slots SHALL
        /// >       be automatically associated to the token, and SHALL
        /// >       immediately receive the airdropped tokens to the recipient
        /// >       account balance.</li>
        /// >   <li>An account with "receiver signature required" set SHALL have
        /// >       a "Pending Airdrop" created and MUST claim that airdrop with
        /// >       a `claimAirdrop` transaction.</li>
        /// >   <li>An account with no available automatic association slots SHALL
        /// >       have a "Pending Airdrop" created and MUST claim that airdrop
        /// >       with a `claimAirdrop` transaction. </li>
        /// > </ul>
        /// > Any airdrop that completes immediately SHALL be irreversible.<br/>
        /// > Any airdrop that results in a "Pending Airdrop" MAY be canceled via
        /// > a `cancelAirdrop` transaction.<br/>
        /// > All transfer fees (including custom fees and royalties), as well as
        /// > the rent cost for the first auto-renewal period for any
        /// > automatic-association slot occupied by the airdropped tokens,
        /// > SHALL be charged to the account submitting this transaction.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_TransactionResponse` message.
        func airdropTokens(
            request: GRPCCore.ServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse>

        /// Handle the "cancelAirdrop" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Cancel one or more pending airdrops.
        /// > <p>
        /// > This transaction MUST be signed by _each_ account *sending* an
        /// > airdrop to be canceled.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_TransactionResponse` message.
        func cancelAirdrop(
            request: GRPCCore.ServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse>

        /// Handle the "claimAirdrop" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Claim one or more pending airdrops.
        /// > <p>
        /// > This transaction MUST be signed by _each_ account **receiving**
        /// > an airdrop to be claimed.<br>
        /// > If a "Sender" lacks sufficient balance to fulfill the airdrop at
        /// > the time the claim is made, that claim SHALL fail.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_TransactionResponse` message.
        func claimAirdrop(
            request: GRPCCore.ServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse>
    }

    /// Simple service protocol for the "proto.TokenService" service.
    ///
    /// This is the highest level protocol for the service. The API is the easiest to use but
    /// doesn't provide access to request or response metadata. If you need access to these
    /// then use ``ServiceProtocol`` instead.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Transactions and queries for the Token Service
    public protocol SimpleServiceProtocol: Proto_TokenService.ServiceProtocol {
        /// Handle the "createToken" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Create a new token.
        ///
        /// - Parameters:
        ///   - request: A `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_TransactionResponse` to respond with.
        func createToken(
            request: Proto_Transaction,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_TransactionResponse

        /// Handle the "updateToken" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Update a token.
        ///
        /// - Parameters:
        ///   - request: A `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_TransactionResponse` to respond with.
        func updateToken(
            request: Proto_Transaction,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_TransactionResponse

        /// Handle the "mintToken" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Mint one or more tokens to the treasury account.
        /// > <p>
        /// > This MAY specify a quantity of fungible/common tokens or
        /// > a list of specific non-fungible/unique tokes, but
        /// > MUST NOT specify both.
        ///
        /// - Parameters:
        ///   - request: A `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_TransactionResponse` to respond with.
        func mintToken(
            request: Proto_Transaction,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_TransactionResponse

        /// Handle the "burnToken" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Burn one or more tokens from the treasury account.
        /// > <p>
        /// > This MAY specify a quantity of fungible/common tokens or
        /// > a list of specific non-fungible/unique tokes, but
        /// > MUST NOT specify both.
        ///
        /// - Parameters:
        ///   - request: A `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_TransactionResponse` to respond with.
        func burnToken(
            request: Proto_Transaction,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_TransactionResponse

        /// Handle the "deleteToken" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Delete a token.
        ///
        /// - Parameters:
        ///   - request: A `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_TransactionResponse` to respond with.
        func deleteToken(
            request: Proto_Transaction,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_TransactionResponse

        /// Handle the "wipeTokenAccount" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Wipe one or more tokens from an identified Account.
        /// > <p>
        /// > This MAY specify a quantity of fungible/common tokens or
        /// > a list of specific non-fungible/unique tokes, but
        /// > MUST NOT specify both.
        ///
        /// - Parameters:
        ///   - request: A `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_TransactionResponse` to respond with.
        func wipeTokenAccount(
            request: Proto_Transaction,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_TransactionResponse

        /// Handle the "freezeTokenAccount" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Freeze the transfer of tokens to or from an identified Account.
        ///
        /// - Parameters:
        ///   - request: A `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_TransactionResponse` to respond with.
        func freezeTokenAccount(
            request: Proto_Transaction,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_TransactionResponse

        /// Handle the "unfreezeTokenAccount" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Unfreeze the transfer of tokens to or from an identified Account.
        ///
        /// - Parameters:
        ///   - request: A `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_TransactionResponse` to respond with.
        func unfreezeTokenAccount(
            request: Proto_Transaction,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_TransactionResponse

        /// Handle the "grantKycToTokenAccount" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Assert that KYC requirements are met for a specific account with
        /// > respect to a specific token.
        ///
        /// - Parameters:
        ///   - request: A `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_TransactionResponse` to respond with.
        func grantKycToTokenAccount(
            request: Proto_Transaction,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_TransactionResponse

        /// Handle the "revokeKycFromTokenAccount" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Assert that KYC requirements are _not_ met for a specific account with
        /// > respect to a specific token.
        ///
        /// - Parameters:
        ///   - request: A `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_TransactionResponse` to respond with.
        func revokeKycFromTokenAccount(
            request: Proto_Transaction,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_TransactionResponse

        /// Handle the "associateTokens" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Associate one or more tokens to an account.
        ///
        /// - Parameters:
        ///   - request: A `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_TransactionResponse` to respond with.
        func associateTokens(
            request: Proto_Transaction,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_TransactionResponse

        /// Handle the "dissociateTokens" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Dissociate one or more tokens from an account.
        ///
        /// - Parameters:
        ///   - request: A `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_TransactionResponse` to respond with.
        func dissociateTokens(
            request: Proto_Transaction,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_TransactionResponse

        /// Handle the "updateTokenFeeSchedule" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Update the custom fee schedule for a token.
        ///
        /// - Parameters:
        ///   - request: A `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_TransactionResponse` to respond with.
        func updateTokenFeeSchedule(
            request: Proto_Transaction,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_TransactionResponse

        /// Handle the "getTokenInfo" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve the detail characteristics for a token.
        /// > <p>
        /// > This query SHALL return information for the token type as a whole.<br/>
        /// > This query SHALL NOT return information for individual tokens.
        ///
        /// - Parameters:
        ///   - request: A `Proto_Query` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_Response` to respond with.
        func getTokenInfo(
            request: Proto_Query,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_Response

        /// Handle the "getTokenNftInfo" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve the metadata for a specific non-fungible/unique token.<br/>
        /// > The NFT to query is identified by token identifier and serial number.
        /// > <p>
        /// > This query SHALL return token metadata and, if an allowance is defined,
        /// > the designated "spender" account for the queried NFT.
        ///
        /// - Parameters:
        ///   - request: A `Proto_Query` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_Response` to respond with.
        func getTokenNftInfo(
            request: Proto_Query,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_Response

        /// Handle the "pauseToken" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Pause a token.
        ///
        /// - Parameters:
        ///   - request: A `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_TransactionResponse` to respond with.
        func pauseToken(
            request: Proto_Transaction,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_TransactionResponse

        /// Handle the "unpauseToken" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Unpause (resume) a token.
        ///
        /// - Parameters:
        ///   - request: A `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_TransactionResponse` to respond with.
        func unpauseToken(
            request: Proto_Transaction,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_TransactionResponse

        /// Handle the "updateNfts" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Update multiple non-fungible/unique tokens (NFTs) in a collection.<br/>
        /// > The NFTs are identified by token identifier and one or more
        /// > serial numbers.
        /// > <p>
        /// > This transaction SHALL update NFT metadata only.<br/>
        /// > This transaction MUST be signed by the token `metadata_key`.
        ///
        /// - Parameters:
        ///   - request: A `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_TransactionResponse` to respond with.
        func updateNfts(
            request: Proto_Transaction,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_TransactionResponse

        /// Handle the "rejectToken" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Reject one or more tokens.
        /// > <p>
        /// > This transaction SHALL transfer the full balance of one or more tokens
        /// > from the requesting account to the treasury for each token.<br/>
        /// > This transfer SHALL NOT charge any custom fee or royalty defined for
        /// > the token(s) to be rejected.<br/>
        /// > ### Effects on success
        /// > <ul>
        /// >   <li>If the rejected token is fungible/common, the requesting account
        /// >       SHALL have a balance of 0 for the rejected token.<br/>
        /// >       The treasury balance SHALL increase by the amount that the
        /// >       requesting account decreased.</li>
        /// >   <li>If the rejected token is non-fungible/unique the requesting
        /// >       account SHALL NOT hold the specific serialized token that
        /// >       is rejected.<br/>
        /// >       The treasury account SHALL hold each specific serialized token
        /// >       that was rejected.</li>
        /// > </li>
        ///
        /// - Parameters:
        ///   - request: A `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_TransactionResponse` to respond with.
        func rejectToken(
            request: Proto_Transaction,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_TransactionResponse

        /// Handle the "airdropTokens" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Airdrop one or more tokens to one or more accounts.
        /// > <p>
        /// > This transaction SHALL distribute tokens from the balance of one or
        /// > more sending account(s) to the balance of one or more
        /// > recipient accounts.<br/>
        /// > Accounts SHALL receive the tokens in one of four ways.
        /// > <ul>
        /// >   <li>An account already associated to the token to be distributed
        /// >       SHALL receive the airdropped tokens immediately to the
        /// >       recipient account balance.</li>
        /// >   <li>An account with available automatic association slots SHALL
        /// >       be automatically associated to the token, and SHALL
        /// >       immediately receive the airdropped tokens to the recipient
        /// >       account balance.</li>
        /// >   <li>An account with "receiver signature required" set SHALL have
        /// >       a "Pending Airdrop" created and MUST claim that airdrop with
        /// >       a `claimAirdrop` transaction.</li>
        /// >   <li>An account with no available automatic association slots SHALL
        /// >       have a "Pending Airdrop" created and MUST claim that airdrop
        /// >       with a `claimAirdrop` transaction. </li>
        /// > </ul>
        /// > Any airdrop that completes immediately SHALL be irreversible.<br/>
        /// > Any airdrop that results in a "Pending Airdrop" MAY be canceled via
        /// > a `cancelAirdrop` transaction.<br/>
        /// > All transfer fees (including custom fees and royalties), as well as
        /// > the rent cost for the first auto-renewal period for any
        /// > automatic-association slot occupied by the airdropped tokens,
        /// > SHALL be charged to the account submitting this transaction.
        ///
        /// - Parameters:
        ///   - request: A `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_TransactionResponse` to respond with.
        func airdropTokens(
            request: Proto_Transaction,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_TransactionResponse

        /// Handle the "cancelAirdrop" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Cancel one or more pending airdrops.
        /// > <p>
        /// > This transaction MUST be signed by _each_ account *sending* an
        /// > airdrop to be canceled.
        ///
        /// - Parameters:
        ///   - request: A `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_TransactionResponse` to respond with.
        func cancelAirdrop(
            request: Proto_Transaction,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_TransactionResponse

        /// Handle the "claimAirdrop" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Claim one or more pending airdrops.
        /// > <p>
        /// > This transaction MUST be signed by _each_ account **receiving**
        /// > an airdrop to be claimed.<br>
        /// > If a "Sender" lacks sufficient balance to fulfill the airdrop at
        /// > the time the claim is made, that claim SHALL fail.
        ///
        /// - Parameters:
        ///   - request: A `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_TransactionResponse` to respond with.
        func claimAirdrop(
            request: Proto_Transaction,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_TransactionResponse
    }
}

// Default implementation of 'registerMethods(with:)'.
extension Proto_TokenService.StreamingServiceProtocol {
    public func registerMethods<Transport>(with router: inout GRPCCore.RPCRouter<Transport>) where Transport: GRPCCore.ServerTransport {
        router.registerHandler(
            forMethod: Proto_TokenService.Method.createToken.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Transaction>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_TransactionResponse>(),
            handler: { request, context in
                try await self.createToken(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_TokenService.Method.updateToken.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Transaction>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_TransactionResponse>(),
            handler: { request, context in
                try await self.updateToken(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_TokenService.Method.mintToken.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Transaction>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_TransactionResponse>(),
            handler: { request, context in
                try await self.mintToken(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_TokenService.Method.burnToken.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Transaction>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_TransactionResponse>(),
            handler: { request, context in
                try await self.burnToken(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_TokenService.Method.deleteToken.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Transaction>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_TransactionResponse>(),
            handler: { request, context in
                try await self.deleteToken(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_TokenService.Method.wipeTokenAccount.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Transaction>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_TransactionResponse>(),
            handler: { request, context in
                try await self.wipeTokenAccount(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_TokenService.Method.freezeTokenAccount.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Transaction>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_TransactionResponse>(),
            handler: { request, context in
                try await self.freezeTokenAccount(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_TokenService.Method.unfreezeTokenAccount.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Transaction>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_TransactionResponse>(),
            handler: { request, context in
                try await self.unfreezeTokenAccount(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_TokenService.Method.grantKycToTokenAccount.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Transaction>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_TransactionResponse>(),
            handler: { request, context in
                try await self.grantKycToTokenAccount(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_TokenService.Method.revokeKycFromTokenAccount.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Transaction>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_TransactionResponse>(),
            handler: { request, context in
                try await self.revokeKycFromTokenAccount(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_TokenService.Method.associateTokens.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Transaction>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_TransactionResponse>(),
            handler: { request, context in
                try await self.associateTokens(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_TokenService.Method.dissociateTokens.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Transaction>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_TransactionResponse>(),
            handler: { request, context in
                try await self.dissociateTokens(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_TokenService.Method.updateTokenFeeSchedule.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Transaction>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_TransactionResponse>(),
            handler: { request, context in
                try await self.updateTokenFeeSchedule(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_TokenService.Method.getTokenInfo.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Query>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Response>(),
            handler: { request, context in
                try await self.getTokenInfo(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_TokenService.Method.getTokenNftInfo.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Query>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Response>(),
            handler: { request, context in
                try await self.getTokenNftInfo(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_TokenService.Method.pauseToken.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Transaction>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_TransactionResponse>(),
            handler: { request, context in
                try await self.pauseToken(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_TokenService.Method.unpauseToken.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Transaction>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_TransactionResponse>(),
            handler: { request, context in
                try await self.unpauseToken(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_TokenService.Method.updateNfts.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Transaction>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_TransactionResponse>(),
            handler: { request, context in
                try await self.updateNfts(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_TokenService.Method.rejectToken.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Transaction>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_TransactionResponse>(),
            handler: { request, context in
                try await self.rejectToken(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_TokenService.Method.airdropTokens.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Transaction>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_TransactionResponse>(),
            handler: { request, context in
                try await self.airdropTokens(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_TokenService.Method.cancelAirdrop.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Transaction>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_TransactionResponse>(),
            handler: { request, context in
                try await self.cancelAirdrop(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_TokenService.Method.claimAirdrop.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Transaction>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_TransactionResponse>(),
            handler: { request, context in
                try await self.claimAirdrop(
                    request: request,
                    context: context
                )
            }
        )
    }
}

// Default implementation of streaming methods from 'StreamingServiceProtocol'.
extension Proto_TokenService.ServiceProtocol {
    public func createToken(
        request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse> {
        let response = try await self.createToken(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func updateToken(
        request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse> {
        let response = try await self.updateToken(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func mintToken(
        request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse> {
        let response = try await self.mintToken(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func burnToken(
        request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse> {
        let response = try await self.burnToken(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func deleteToken(
        request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse> {
        let response = try await self.deleteToken(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func wipeTokenAccount(
        request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse> {
        let response = try await self.wipeTokenAccount(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func freezeTokenAccount(
        request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse> {
        let response = try await self.freezeTokenAccount(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func unfreezeTokenAccount(
        request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse> {
        let response = try await self.unfreezeTokenAccount(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func grantKycToTokenAccount(
        request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse> {
        let response = try await self.grantKycToTokenAccount(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func revokeKycFromTokenAccount(
        request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse> {
        let response = try await self.revokeKycFromTokenAccount(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func associateTokens(
        request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse> {
        let response = try await self.associateTokens(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func dissociateTokens(
        request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse> {
        let response = try await self.dissociateTokens(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func updateTokenFeeSchedule(
        request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse> {
        let response = try await self.updateTokenFeeSchedule(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func getTokenInfo(
        request: GRPCCore.StreamingServerRequest<Proto_Query>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_Response> {
        let response = try await self.getTokenInfo(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func getTokenNftInfo(
        request: GRPCCore.StreamingServerRequest<Proto_Query>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_Response> {
        let response = try await self.getTokenNftInfo(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func pauseToken(
        request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse> {
        let response = try await self.pauseToken(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func unpauseToken(
        request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse> {
        let response = try await self.unpauseToken(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func updateNfts(
        request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse> {
        let response = try await self.updateNfts(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func rejectToken(
        request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse> {
        let response = try await self.rejectToken(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func airdropTokens(
        request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse> {
        let response = try await self.airdropTokens(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func cancelAirdrop(
        request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse> {
        let response = try await self.cancelAirdrop(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func claimAirdrop(
        request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse> {
        let response = try await self.claimAirdrop(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }
}

// Default implementation of methods from 'ServiceProtocol'.
extension Proto_TokenService.SimpleServiceProtocol {
    public func createToken(
        request: GRPCCore.ServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse> {
        return GRPCCore.ServerResponse<Proto_TransactionResponse>(
            message: try await self.createToken(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func updateToken(
        request: GRPCCore.ServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse> {
        return GRPCCore.ServerResponse<Proto_TransactionResponse>(
            message: try await self.updateToken(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func mintToken(
        request: GRPCCore.ServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse> {
        return GRPCCore.ServerResponse<Proto_TransactionResponse>(
            message: try await self.mintToken(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func burnToken(
        request: GRPCCore.ServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse> {
        return GRPCCore.ServerResponse<Proto_TransactionResponse>(
            message: try await self.burnToken(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func deleteToken(
        request: GRPCCore.ServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse> {
        return GRPCCore.ServerResponse<Proto_TransactionResponse>(
            message: try await self.deleteToken(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func wipeTokenAccount(
        request: GRPCCore.ServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse> {
        return GRPCCore.ServerResponse<Proto_TransactionResponse>(
            message: try await self.wipeTokenAccount(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func freezeTokenAccount(
        request: GRPCCore.ServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse> {
        return GRPCCore.ServerResponse<Proto_TransactionResponse>(
            message: try await self.freezeTokenAccount(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func unfreezeTokenAccount(
        request: GRPCCore.ServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse> {
        return GRPCCore.ServerResponse<Proto_TransactionResponse>(
            message: try await self.unfreezeTokenAccount(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func grantKycToTokenAccount(
        request: GRPCCore.ServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse> {
        return GRPCCore.ServerResponse<Proto_TransactionResponse>(
            message: try await self.grantKycToTokenAccount(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func revokeKycFromTokenAccount(
        request: GRPCCore.ServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse> {
        return GRPCCore.ServerResponse<Proto_TransactionResponse>(
            message: try await self.revokeKycFromTokenAccount(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func associateTokens(
        request: GRPCCore.ServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse> {
        return GRPCCore.ServerResponse<Proto_TransactionResponse>(
            message: try await self.associateTokens(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func dissociateTokens(
        request: GRPCCore.ServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse> {
        return GRPCCore.ServerResponse<Proto_TransactionResponse>(
            message: try await self.dissociateTokens(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func updateTokenFeeSchedule(
        request: GRPCCore.ServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse> {
        return GRPCCore.ServerResponse<Proto_TransactionResponse>(
            message: try await self.updateTokenFeeSchedule(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func getTokenInfo(
        request: GRPCCore.ServerRequest<Proto_Query>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_Response> {
        return GRPCCore.ServerResponse<Proto_Response>(
            message: try await self.getTokenInfo(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func getTokenNftInfo(
        request: GRPCCore.ServerRequest<Proto_Query>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_Response> {
        return GRPCCore.ServerResponse<Proto_Response>(
            message: try await self.getTokenNftInfo(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func pauseToken(
        request: GRPCCore.ServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse> {
        return GRPCCore.ServerResponse<Proto_TransactionResponse>(
            message: try await self.pauseToken(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func unpauseToken(
        request: GRPCCore.ServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse> {
        return GRPCCore.ServerResponse<Proto_TransactionResponse>(
            message: try await self.unpauseToken(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func updateNfts(
        request: GRPCCore.ServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse> {
        return GRPCCore.ServerResponse<Proto_TransactionResponse>(
            message: try await self.updateNfts(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func rejectToken(
        request: GRPCCore.ServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse> {
        return GRPCCore.ServerResponse<Proto_TransactionResponse>(
            message: try await self.rejectToken(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func airdropTokens(
        request: GRPCCore.ServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse> {
        return GRPCCore.ServerResponse<Proto_TransactionResponse>(
            message: try await self.airdropTokens(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func cancelAirdrop(
        request: GRPCCore.ServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse> {
        return GRPCCore.ServerResponse<Proto_TransactionResponse>(
            message: try await self.cancelAirdrop(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func claimAirdrop(
        request: GRPCCore.ServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse> {
        return GRPCCore.ServerResponse<Proto_TransactionResponse>(
            message: try await self.claimAirdrop(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }
}

// MARK: proto.TokenService (client)

extension Proto_TokenService {
    /// Generated client protocol for the "proto.TokenService" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Transactions and queries for the Token Service
    public protocol ClientProtocol: Sendable {
        /// Call the "createToken" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Create a new token.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func createToken<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "updateToken" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Update a token.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func updateToken<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "mintToken" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Mint one or more tokens to the treasury account.
        /// > <p>
        /// > This MAY specify a quantity of fungible/common tokens or
        /// > a list of specific non-fungible/unique tokes, but
        /// > MUST NOT specify both.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func mintToken<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "burnToken" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Burn one or more tokens from the treasury account.
        /// > <p>
        /// > This MAY specify a quantity of fungible/common tokens or
        /// > a list of specific non-fungible/unique tokes, but
        /// > MUST NOT specify both.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func burnToken<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "deleteToken" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Delete a token.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteToken<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "wipeTokenAccount" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Wipe one or more tokens from an identified Account.
        /// > <p>
        /// > This MAY specify a quantity of fungible/common tokens or
        /// > a list of specific non-fungible/unique tokes, but
        /// > MUST NOT specify both.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func wipeTokenAccount<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "freezeTokenAccount" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Freeze the transfer of tokens to or from an identified Account.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func freezeTokenAccount<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "unfreezeTokenAccount" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Unfreeze the transfer of tokens to or from an identified Account.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func unfreezeTokenAccount<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "grantKycToTokenAccount" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Assert that KYC requirements are met for a specific account with
        /// > respect to a specific token.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func grantKycToTokenAccount<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "revokeKycFromTokenAccount" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Assert that KYC requirements are _not_ met for a specific account with
        /// > respect to a specific token.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func revokeKycFromTokenAccount<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "associateTokens" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Associate one or more tokens to an account.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func associateTokens<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "dissociateTokens" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Dissociate one or more tokens from an account.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func dissociateTokens<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "updateTokenFeeSchedule" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Update the custom fee schedule for a token.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func updateTokenFeeSchedule<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "getTokenInfo" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve the detail characteristics for a token.
        /// > <p>
        /// > This query SHALL return information for the token type as a whole.<br/>
        /// > This query SHALL NOT return information for individual tokens.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Query` message.
        ///   - serializer: A serializer for `Proto_Query` messages.
        ///   - deserializer: A deserializer for `Proto_Response` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getTokenInfo<Result>(
            request: GRPCCore.ClientRequest<Proto_Query>,
            serializer: some GRPCCore.MessageSerializer<Proto_Query>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_Response>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "getTokenNftInfo" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve the metadata for a specific non-fungible/unique token.<br/>
        /// > The NFT to query is identified by token identifier and serial number.
        /// > <p>
        /// > This query SHALL return token metadata and, if an allowance is defined,
        /// > the designated "spender" account for the queried NFT.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Query` message.
        ///   - serializer: A serializer for `Proto_Query` messages.
        ///   - deserializer: A deserializer for `Proto_Response` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getTokenNftInfo<Result>(
            request: GRPCCore.ClientRequest<Proto_Query>,
            serializer: some GRPCCore.MessageSerializer<Proto_Query>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_Response>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "pauseToken" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Pause a token.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func pauseToken<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "unpauseToken" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Unpause (resume) a token.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func unpauseToken<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "updateNfts" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Update multiple non-fungible/unique tokens (NFTs) in a collection.<br/>
        /// > The NFTs are identified by token identifier and one or more
        /// > serial numbers.
        /// > <p>
        /// > This transaction SHALL update NFT metadata only.<br/>
        /// > This transaction MUST be signed by the token `metadata_key`.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func updateNfts<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "rejectToken" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Reject one or more tokens.
        /// > <p>
        /// > This transaction SHALL transfer the full balance of one or more tokens
        /// > from the requesting account to the treasury for each token.<br/>
        /// > This transfer SHALL NOT charge any custom fee or royalty defined for
        /// > the token(s) to be rejected.<br/>
        /// > ### Effects on success
        /// > <ul>
        /// >   <li>If the rejected token is fungible/common, the requesting account
        /// >       SHALL have a balance of 0 for the rejected token.<br/>
        /// >       The treasury balance SHALL increase by the amount that the
        /// >       requesting account decreased.</li>
        /// >   <li>If the rejected token is non-fungible/unique the requesting
        /// >       account SHALL NOT hold the specific serialized token that
        /// >       is rejected.<br/>
        /// >       The treasury account SHALL hold each specific serialized token
        /// >       that was rejected.</li>
        /// > </li>
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func rejectToken<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "airdropTokens" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Airdrop one or more tokens to one or more accounts.
        /// > <p>
        /// > This transaction SHALL distribute tokens from the balance of one or
        /// > more sending account(s) to the balance of one or more
        /// > recipient accounts.<br/>
        /// > Accounts SHALL receive the tokens in one of four ways.
        /// > <ul>
        /// >   <li>An account already associated to the token to be distributed
        /// >       SHALL receive the airdropped tokens immediately to the
        /// >       recipient account balance.</li>
        /// >   <li>An account with available automatic association slots SHALL
        /// >       be automatically associated to the token, and SHALL
        /// >       immediately receive the airdropped tokens to the recipient
        /// >       account balance.</li>
        /// >   <li>An account with "receiver signature required" set SHALL have
        /// >       a "Pending Airdrop" created and MUST claim that airdrop with
        /// >       a `claimAirdrop` transaction.</li>
        /// >   <li>An account with no available automatic association slots SHALL
        /// >       have a "Pending Airdrop" created and MUST claim that airdrop
        /// >       with a `claimAirdrop` transaction. </li>
        /// > </ul>
        /// > Any airdrop that completes immediately SHALL be irreversible.<br/>
        /// > Any airdrop that results in a "Pending Airdrop" MAY be canceled via
        /// > a `cancelAirdrop` transaction.<br/>
        /// > All transfer fees (including custom fees and royalties), as well as
        /// > the rent cost for the first auto-renewal period for any
        /// > automatic-association slot occupied by the airdropped tokens,
        /// > SHALL be charged to the account submitting this transaction.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func airdropTokens<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "cancelAirdrop" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Cancel one or more pending airdrops.
        /// > <p>
        /// > This transaction MUST be signed by _each_ account *sending* an
        /// > airdrop to be canceled.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func cancelAirdrop<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "claimAirdrop" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Claim one or more pending airdrops.
        /// > <p>
        /// > This transaction MUST be signed by _each_ account **receiving**
        /// > an airdrop to be claimed.<br>
        /// > If a "Sender" lacks sufficient balance to fulfill the airdrop at
        /// > the time the claim is made, that claim SHALL fail.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func claimAirdrop<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "proto.TokenService" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Transactions and queries for the Token Service
    public struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        public init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "createToken" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Create a new token.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func createToken<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_TokenService.Method.createToken.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "updateToken" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Update a token.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func updateToken<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_TokenService.Method.updateToken.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "mintToken" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Mint one or more tokens to the treasury account.
        /// > <p>
        /// > This MAY specify a quantity of fungible/common tokens or
        /// > a list of specific non-fungible/unique tokes, but
        /// > MUST NOT specify both.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func mintToken<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_TokenService.Method.mintToken.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "burnToken" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Burn one or more tokens from the treasury account.
        /// > <p>
        /// > This MAY specify a quantity of fungible/common tokens or
        /// > a list of specific non-fungible/unique tokes, but
        /// > MUST NOT specify both.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func burnToken<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_TokenService.Method.burnToken.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "deleteToken" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Delete a token.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func deleteToken<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_TokenService.Method.deleteToken.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "wipeTokenAccount" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Wipe one or more tokens from an identified Account.
        /// > <p>
        /// > This MAY specify a quantity of fungible/common tokens or
        /// > a list of specific non-fungible/unique tokes, but
        /// > MUST NOT specify both.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func wipeTokenAccount<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_TokenService.Method.wipeTokenAccount.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "freezeTokenAccount" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Freeze the transfer of tokens to or from an identified Account.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func freezeTokenAccount<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_TokenService.Method.freezeTokenAccount.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "unfreezeTokenAccount" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Unfreeze the transfer of tokens to or from an identified Account.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func unfreezeTokenAccount<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_TokenService.Method.unfreezeTokenAccount.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "grantKycToTokenAccount" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Assert that KYC requirements are met for a specific account with
        /// > respect to a specific token.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func grantKycToTokenAccount<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_TokenService.Method.grantKycToTokenAccount.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "revokeKycFromTokenAccount" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Assert that KYC requirements are _not_ met for a specific account with
        /// > respect to a specific token.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func revokeKycFromTokenAccount<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_TokenService.Method.revokeKycFromTokenAccount.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "associateTokens" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Associate one or more tokens to an account.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func associateTokens<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_TokenService.Method.associateTokens.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "dissociateTokens" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Dissociate one or more tokens from an account.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func dissociateTokens<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_TokenService.Method.dissociateTokens.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "updateTokenFeeSchedule" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Update the custom fee schedule for a token.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func updateTokenFeeSchedule<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_TokenService.Method.updateTokenFeeSchedule.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "getTokenInfo" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve the detail characteristics for a token.
        /// > <p>
        /// > This query SHALL return information for the token type as a whole.<br/>
        /// > This query SHALL NOT return information for individual tokens.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Query` message.
        ///   - serializer: A serializer for `Proto_Query` messages.
        ///   - deserializer: A deserializer for `Proto_Response` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func getTokenInfo<Result>(
            request: GRPCCore.ClientRequest<Proto_Query>,
            serializer: some GRPCCore.MessageSerializer<Proto_Query>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_Response>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_TokenService.Method.getTokenInfo.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "getTokenNftInfo" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve the metadata for a specific non-fungible/unique token.<br/>
        /// > The NFT to query is identified by token identifier and serial number.
        /// > <p>
        /// > This query SHALL return token metadata and, if an allowance is defined,
        /// > the designated "spender" account for the queried NFT.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Query` message.
        ///   - serializer: A serializer for `Proto_Query` messages.
        ///   - deserializer: A deserializer for `Proto_Response` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func getTokenNftInfo<Result>(
            request: GRPCCore.ClientRequest<Proto_Query>,
            serializer: some GRPCCore.MessageSerializer<Proto_Query>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_Response>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_TokenService.Method.getTokenNftInfo.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "pauseToken" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Pause a token.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func pauseToken<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_TokenService.Method.pauseToken.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "unpauseToken" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Unpause (resume) a token.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func unpauseToken<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_TokenService.Method.unpauseToken.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "updateNfts" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Update multiple non-fungible/unique tokens (NFTs) in a collection.<br/>
        /// > The NFTs are identified by token identifier and one or more
        /// > serial numbers.
        /// > <p>
        /// > This transaction SHALL update NFT metadata only.<br/>
        /// > This transaction MUST be signed by the token `metadata_key`.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func updateNfts<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_TokenService.Method.updateNfts.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "rejectToken" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Reject one or more tokens.
        /// > <p>
        /// > This transaction SHALL transfer the full balance of one or more tokens
        /// > from the requesting account to the treasury for each token.<br/>
        /// > This transfer SHALL NOT charge any custom fee or royalty defined for
        /// > the token(s) to be rejected.<br/>
        /// > ### Effects on success
        /// > <ul>
        /// >   <li>If the rejected token is fungible/common, the requesting account
        /// >       SHALL have a balance of 0 for the rejected token.<br/>
        /// >       The treasury balance SHALL increase by the amount that the
        /// >       requesting account decreased.</li>
        /// >   <li>If the rejected token is non-fungible/unique the requesting
        /// >       account SHALL NOT hold the specific serialized token that
        /// >       is rejected.<br/>
        /// >       The treasury account SHALL hold each specific serialized token
        /// >       that was rejected.</li>
        /// > </li>
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func rejectToken<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_TokenService.Method.rejectToken.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "airdropTokens" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Airdrop one or more tokens to one or more accounts.
        /// > <p>
        /// > This transaction SHALL distribute tokens from the balance of one or
        /// > more sending account(s) to the balance of one or more
        /// > recipient accounts.<br/>
        /// > Accounts SHALL receive the tokens in one of four ways.
        /// > <ul>
        /// >   <li>An account already associated to the token to be distributed
        /// >       SHALL receive the airdropped tokens immediately to the
        /// >       recipient account balance.</li>
        /// >   <li>An account with available automatic association slots SHALL
        /// >       be automatically associated to the token, and SHALL
        /// >       immediately receive the airdropped tokens to the recipient
        /// >       account balance.</li>
        /// >   <li>An account with "receiver signature required" set SHALL have
        /// >       a "Pending Airdrop" created and MUST claim that airdrop with
        /// >       a `claimAirdrop` transaction.</li>
        /// >   <li>An account with no available automatic association slots SHALL
        /// >       have a "Pending Airdrop" created and MUST claim that airdrop
        /// >       with a `claimAirdrop` transaction. </li>
        /// > </ul>
        /// > Any airdrop that completes immediately SHALL be irreversible.<br/>
        /// > Any airdrop that results in a "Pending Airdrop" MAY be canceled via
        /// > a `cancelAirdrop` transaction.<br/>
        /// > All transfer fees (including custom fees and royalties), as well as
        /// > the rent cost for the first auto-renewal period for any
        /// > automatic-association slot occupied by the airdropped tokens,
        /// > SHALL be charged to the account submitting this transaction.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func airdropTokens<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_TokenService.Method.airdropTokens.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "cancelAirdrop" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Cancel one or more pending airdrops.
        /// > <p>
        /// > This transaction MUST be signed by _each_ account *sending* an
        /// > airdrop to be canceled.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func cancelAirdrop<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_TokenService.Method.cancelAirdrop.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "claimAirdrop" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Claim one or more pending airdrops.
        /// > <p>
        /// > This transaction MUST be signed by _each_ account **receiving**
        /// > an airdrop to be claimed.<br>
        /// > If a "Sender" lacks sufficient balance to fulfill the airdrop at
        /// > the time the claim is made, that claim SHALL fail.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func claimAirdrop<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_TokenService.Method.claimAirdrop.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
extension Proto_TokenService.ClientProtocol {
    /// Call the "createToken" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Create a new token.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Transaction` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createToken<Result>(
        request: GRPCCore.ClientRequest<Proto_Transaction>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.createToken(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Transaction>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_TransactionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "updateToken" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Update a token.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Transaction` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func updateToken<Result>(
        request: GRPCCore.ClientRequest<Proto_Transaction>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.updateToken(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Transaction>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_TransactionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "mintToken" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Mint one or more tokens to the treasury account.
    /// > <p>
    /// > This MAY specify a quantity of fungible/common tokens or
    /// > a list of specific non-fungible/unique tokes, but
    /// > MUST NOT specify both.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Transaction` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func mintToken<Result>(
        request: GRPCCore.ClientRequest<Proto_Transaction>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.mintToken(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Transaction>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_TransactionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "burnToken" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Burn one or more tokens from the treasury account.
    /// > <p>
    /// > This MAY specify a quantity of fungible/common tokens or
    /// > a list of specific non-fungible/unique tokes, but
    /// > MUST NOT specify both.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Transaction` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func burnToken<Result>(
        request: GRPCCore.ClientRequest<Proto_Transaction>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.burnToken(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Transaction>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_TransactionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "deleteToken" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Delete a token.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Transaction` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteToken<Result>(
        request: GRPCCore.ClientRequest<Proto_Transaction>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteToken(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Transaction>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_TransactionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "wipeTokenAccount" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Wipe one or more tokens from an identified Account.
    /// > <p>
    /// > This MAY specify a quantity of fungible/common tokens or
    /// > a list of specific non-fungible/unique tokes, but
    /// > MUST NOT specify both.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Transaction` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func wipeTokenAccount<Result>(
        request: GRPCCore.ClientRequest<Proto_Transaction>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.wipeTokenAccount(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Transaction>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_TransactionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "freezeTokenAccount" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Freeze the transfer of tokens to or from an identified Account.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Transaction` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func freezeTokenAccount<Result>(
        request: GRPCCore.ClientRequest<Proto_Transaction>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.freezeTokenAccount(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Transaction>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_TransactionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "unfreezeTokenAccount" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Unfreeze the transfer of tokens to or from an identified Account.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Transaction` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func unfreezeTokenAccount<Result>(
        request: GRPCCore.ClientRequest<Proto_Transaction>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.unfreezeTokenAccount(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Transaction>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_TransactionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "grantKycToTokenAccount" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Assert that KYC requirements are met for a specific account with
    /// > respect to a specific token.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Transaction` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func grantKycToTokenAccount<Result>(
        request: GRPCCore.ClientRequest<Proto_Transaction>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.grantKycToTokenAccount(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Transaction>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_TransactionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "revokeKycFromTokenAccount" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Assert that KYC requirements are _not_ met for a specific account with
    /// > respect to a specific token.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Transaction` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func revokeKycFromTokenAccount<Result>(
        request: GRPCCore.ClientRequest<Proto_Transaction>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.revokeKycFromTokenAccount(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Transaction>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_TransactionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "associateTokens" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Associate one or more tokens to an account.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Transaction` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func associateTokens<Result>(
        request: GRPCCore.ClientRequest<Proto_Transaction>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.associateTokens(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Transaction>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_TransactionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "dissociateTokens" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Dissociate one or more tokens from an account.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Transaction` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func dissociateTokens<Result>(
        request: GRPCCore.ClientRequest<Proto_Transaction>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.dissociateTokens(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Transaction>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_TransactionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "updateTokenFeeSchedule" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Update the custom fee schedule for a token.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Transaction` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func updateTokenFeeSchedule<Result>(
        request: GRPCCore.ClientRequest<Proto_Transaction>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.updateTokenFeeSchedule(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Transaction>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_TransactionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "getTokenInfo" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Retrieve the detail characteristics for a token.
    /// > <p>
    /// > This query SHALL return information for the token type as a whole.<br/>
    /// > This query SHALL NOT return information for individual tokens.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Query` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getTokenInfo<Result>(
        request: GRPCCore.ClientRequest<Proto_Query>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getTokenInfo(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Query>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Response>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "getTokenNftInfo" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Retrieve the metadata for a specific non-fungible/unique token.<br/>
    /// > The NFT to query is identified by token identifier and serial number.
    /// > <p>
    /// > This query SHALL return token metadata and, if an allowance is defined,
    /// > the designated "spender" account for the queried NFT.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Query` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getTokenNftInfo<Result>(
        request: GRPCCore.ClientRequest<Proto_Query>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getTokenNftInfo(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Query>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Response>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "pauseToken" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Pause a token.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Transaction` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func pauseToken<Result>(
        request: GRPCCore.ClientRequest<Proto_Transaction>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.pauseToken(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Transaction>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_TransactionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "unpauseToken" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Unpause (resume) a token.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Transaction` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func unpauseToken<Result>(
        request: GRPCCore.ClientRequest<Proto_Transaction>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.unpauseToken(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Transaction>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_TransactionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "updateNfts" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Update multiple non-fungible/unique tokens (NFTs) in a collection.<br/>
    /// > The NFTs are identified by token identifier and one or more
    /// > serial numbers.
    /// > <p>
    /// > This transaction SHALL update NFT metadata only.<br/>
    /// > This transaction MUST be signed by the token `metadata_key`.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Transaction` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func updateNfts<Result>(
        request: GRPCCore.ClientRequest<Proto_Transaction>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.updateNfts(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Transaction>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_TransactionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "rejectToken" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Reject one or more tokens.
    /// > <p>
    /// > This transaction SHALL transfer the full balance of one or more tokens
    /// > from the requesting account to the treasury for each token.<br/>
    /// > This transfer SHALL NOT charge any custom fee or royalty defined for
    /// > the token(s) to be rejected.<br/>
    /// > ### Effects on success
    /// > <ul>
    /// >   <li>If the rejected token is fungible/common, the requesting account
    /// >       SHALL have a balance of 0 for the rejected token.<br/>
    /// >       The treasury balance SHALL increase by the amount that the
    /// >       requesting account decreased.</li>
    /// >   <li>If the rejected token is non-fungible/unique the requesting
    /// >       account SHALL NOT hold the specific serialized token that
    /// >       is rejected.<br/>
    /// >       The treasury account SHALL hold each specific serialized token
    /// >       that was rejected.</li>
    /// > </li>
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Transaction` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func rejectToken<Result>(
        request: GRPCCore.ClientRequest<Proto_Transaction>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.rejectToken(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Transaction>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_TransactionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "airdropTokens" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Airdrop one or more tokens to one or more accounts.
    /// > <p>
    /// > This transaction SHALL distribute tokens from the balance of one or
    /// > more sending account(s) to the balance of one or more
    /// > recipient accounts.<br/>
    /// > Accounts SHALL receive the tokens in one of four ways.
    /// > <ul>
    /// >   <li>An account already associated to the token to be distributed
    /// >       SHALL receive the airdropped tokens immediately to the
    /// >       recipient account balance.</li>
    /// >   <li>An account with available automatic association slots SHALL
    /// >       be automatically associated to the token, and SHALL
    /// >       immediately receive the airdropped tokens to the recipient
    /// >       account balance.</li>
    /// >   <li>An account with "receiver signature required" set SHALL have
    /// >       a "Pending Airdrop" created and MUST claim that airdrop with
    /// >       a `claimAirdrop` transaction.</li>
    /// >   <li>An account with no available automatic association slots SHALL
    /// >       have a "Pending Airdrop" created and MUST claim that airdrop
    /// >       with a `claimAirdrop` transaction. </li>
    /// > </ul>
    /// > Any airdrop that completes immediately SHALL be irreversible.<br/>
    /// > Any airdrop that results in a "Pending Airdrop" MAY be canceled via
    /// > a `cancelAirdrop` transaction.<br/>
    /// > All transfer fees (including custom fees and royalties), as well as
    /// > the rent cost for the first auto-renewal period for any
    /// > automatic-association slot occupied by the airdropped tokens,
    /// > SHALL be charged to the account submitting this transaction.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Transaction` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func airdropTokens<Result>(
        request: GRPCCore.ClientRequest<Proto_Transaction>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.airdropTokens(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Transaction>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_TransactionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "cancelAirdrop" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Cancel one or more pending airdrops.
    /// > <p>
    /// > This transaction MUST be signed by _each_ account *sending* an
    /// > airdrop to be canceled.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Transaction` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func cancelAirdrop<Result>(
        request: GRPCCore.ClientRequest<Proto_Transaction>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.cancelAirdrop(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Transaction>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_TransactionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "claimAirdrop" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Claim one or more pending airdrops.
    /// > <p>
    /// > This transaction MUST be signed by _each_ account **receiving**
    /// > an airdrop to be claimed.<br>
    /// > If a "Sender" lacks sufficient balance to fulfill the airdrop at
    /// > the time the claim is made, that claim SHALL fail.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Transaction` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func claimAirdrop<Result>(
        request: GRPCCore.ClientRequest<Proto_Transaction>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.claimAirdrop(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Transaction>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_TransactionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
extension Proto_TokenService.ClientProtocol {
    /// Call the "createToken" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Create a new token.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createToken<Result>(
        _ message: Proto_Transaction,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Transaction>(
            message: message,
            metadata: metadata
        )
        return try await self.createToken(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "updateToken" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Update a token.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func updateToken<Result>(
        _ message: Proto_Transaction,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Transaction>(
            message: message,
            metadata: metadata
        )
        return try await self.updateToken(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "mintToken" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Mint one or more tokens to the treasury account.
    /// > <p>
    /// > This MAY specify a quantity of fungible/common tokens or
    /// > a list of specific non-fungible/unique tokes, but
    /// > MUST NOT specify both.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func mintToken<Result>(
        _ message: Proto_Transaction,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Transaction>(
            message: message,
            metadata: metadata
        )
        return try await self.mintToken(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "burnToken" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Burn one or more tokens from the treasury account.
    /// > <p>
    /// > This MAY specify a quantity of fungible/common tokens or
    /// > a list of specific non-fungible/unique tokes, but
    /// > MUST NOT specify both.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func burnToken<Result>(
        _ message: Proto_Transaction,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Transaction>(
            message: message,
            metadata: metadata
        )
        return try await self.burnToken(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "deleteToken" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Delete a token.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteToken<Result>(
        _ message: Proto_Transaction,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Transaction>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteToken(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "wipeTokenAccount" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Wipe one or more tokens from an identified Account.
    /// > <p>
    /// > This MAY specify a quantity of fungible/common tokens or
    /// > a list of specific non-fungible/unique tokes, but
    /// > MUST NOT specify both.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func wipeTokenAccount<Result>(
        _ message: Proto_Transaction,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Transaction>(
            message: message,
            metadata: metadata
        )
        return try await self.wipeTokenAccount(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "freezeTokenAccount" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Freeze the transfer of tokens to or from an identified Account.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func freezeTokenAccount<Result>(
        _ message: Proto_Transaction,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Transaction>(
            message: message,
            metadata: metadata
        )
        return try await self.freezeTokenAccount(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "unfreezeTokenAccount" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Unfreeze the transfer of tokens to or from an identified Account.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func unfreezeTokenAccount<Result>(
        _ message: Proto_Transaction,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Transaction>(
            message: message,
            metadata: metadata
        )
        return try await self.unfreezeTokenAccount(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "grantKycToTokenAccount" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Assert that KYC requirements are met for a specific account with
    /// > respect to a specific token.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func grantKycToTokenAccount<Result>(
        _ message: Proto_Transaction,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Transaction>(
            message: message,
            metadata: metadata
        )
        return try await self.grantKycToTokenAccount(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "revokeKycFromTokenAccount" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Assert that KYC requirements are _not_ met for a specific account with
    /// > respect to a specific token.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func revokeKycFromTokenAccount<Result>(
        _ message: Proto_Transaction,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Transaction>(
            message: message,
            metadata: metadata
        )
        return try await self.revokeKycFromTokenAccount(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "associateTokens" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Associate one or more tokens to an account.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func associateTokens<Result>(
        _ message: Proto_Transaction,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Transaction>(
            message: message,
            metadata: metadata
        )
        return try await self.associateTokens(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "dissociateTokens" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Dissociate one or more tokens from an account.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func dissociateTokens<Result>(
        _ message: Proto_Transaction,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Transaction>(
            message: message,
            metadata: metadata
        )
        return try await self.dissociateTokens(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "updateTokenFeeSchedule" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Update the custom fee schedule for a token.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func updateTokenFeeSchedule<Result>(
        _ message: Proto_Transaction,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Transaction>(
            message: message,
            metadata: metadata
        )
        return try await self.updateTokenFeeSchedule(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "getTokenInfo" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Retrieve the detail characteristics for a token.
    /// > <p>
    /// > This query SHALL return information for the token type as a whole.<br/>
    /// > This query SHALL NOT return information for individual tokens.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getTokenInfo<Result>(
        _ message: Proto_Query,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Query>(
            message: message,
            metadata: metadata
        )
        return try await self.getTokenInfo(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "getTokenNftInfo" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Retrieve the metadata for a specific non-fungible/unique token.<br/>
    /// > The NFT to query is identified by token identifier and serial number.
    /// > <p>
    /// > This query SHALL return token metadata and, if an allowance is defined,
    /// > the designated "spender" account for the queried NFT.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getTokenNftInfo<Result>(
        _ message: Proto_Query,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Query>(
            message: message,
            metadata: metadata
        )
        return try await self.getTokenNftInfo(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "pauseToken" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Pause a token.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func pauseToken<Result>(
        _ message: Proto_Transaction,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Transaction>(
            message: message,
            metadata: metadata
        )
        return try await self.pauseToken(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "unpauseToken" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Unpause (resume) a token.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func unpauseToken<Result>(
        _ message: Proto_Transaction,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Transaction>(
            message: message,
            metadata: metadata
        )
        return try await self.unpauseToken(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "updateNfts" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Update multiple non-fungible/unique tokens (NFTs) in a collection.<br/>
    /// > The NFTs are identified by token identifier and one or more
    /// > serial numbers.
    /// > <p>
    /// > This transaction SHALL update NFT metadata only.<br/>
    /// > This transaction MUST be signed by the token `metadata_key`.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func updateNfts<Result>(
        _ message: Proto_Transaction,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Transaction>(
            message: message,
            metadata: metadata
        )
        return try await self.updateNfts(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "rejectToken" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Reject one or more tokens.
    /// > <p>
    /// > This transaction SHALL transfer the full balance of one or more tokens
    /// > from the requesting account to the treasury for each token.<br/>
    /// > This transfer SHALL NOT charge any custom fee or royalty defined for
    /// > the token(s) to be rejected.<br/>
    /// > ### Effects on success
    /// > <ul>
    /// >   <li>If the rejected token is fungible/common, the requesting account
    /// >       SHALL have a balance of 0 for the rejected token.<br/>
    /// >       The treasury balance SHALL increase by the amount that the
    /// >       requesting account decreased.</li>
    /// >   <li>If the rejected token is non-fungible/unique the requesting
    /// >       account SHALL NOT hold the specific serialized token that
    /// >       is rejected.<br/>
    /// >       The treasury account SHALL hold each specific serialized token
    /// >       that was rejected.</li>
    /// > </li>
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func rejectToken<Result>(
        _ message: Proto_Transaction,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Transaction>(
            message: message,
            metadata: metadata
        )
        return try await self.rejectToken(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "airdropTokens" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Airdrop one or more tokens to one or more accounts.
    /// > <p>
    /// > This transaction SHALL distribute tokens from the balance of one or
    /// > more sending account(s) to the balance of one or more
    /// > recipient accounts.<br/>
    /// > Accounts SHALL receive the tokens in one of four ways.
    /// > <ul>
    /// >   <li>An account already associated to the token to be distributed
    /// >       SHALL receive the airdropped tokens immediately to the
    /// >       recipient account balance.</li>
    /// >   <li>An account with available automatic association slots SHALL
    /// >       be automatically associated to the token, and SHALL
    /// >       immediately receive the airdropped tokens to the recipient
    /// >       account balance.</li>
    /// >   <li>An account with "receiver signature required" set SHALL have
    /// >       a "Pending Airdrop" created and MUST claim that airdrop with
    /// >       a `claimAirdrop` transaction.</li>
    /// >   <li>An account with no available automatic association slots SHALL
    /// >       have a "Pending Airdrop" created and MUST claim that airdrop
    /// >       with a `claimAirdrop` transaction. </li>
    /// > </ul>
    /// > Any airdrop that completes immediately SHALL be irreversible.<br/>
    /// > Any airdrop that results in a "Pending Airdrop" MAY be canceled via
    /// > a `cancelAirdrop` transaction.<br/>
    /// > All transfer fees (including custom fees and royalties), as well as
    /// > the rent cost for the first auto-renewal period for any
    /// > automatic-association slot occupied by the airdropped tokens,
    /// > SHALL be charged to the account submitting this transaction.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func airdropTokens<Result>(
        _ message: Proto_Transaction,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Transaction>(
            message: message,
            metadata: metadata
        )
        return try await self.airdropTokens(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "cancelAirdrop" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Cancel one or more pending airdrops.
    /// > <p>
    /// > This transaction MUST be signed by _each_ account *sending* an
    /// > airdrop to be canceled.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func cancelAirdrop<Result>(
        _ message: Proto_Transaction,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Transaction>(
            message: message,
            metadata: metadata
        )
        return try await self.cancelAirdrop(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "claimAirdrop" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Claim one or more pending airdrops.
    /// > <p>
    /// > This transaction MUST be signed by _each_ account **receiving**
    /// > an airdrop to be claimed.<br>
    /// > If a "Sender" lacks sufficient balance to fulfill the airdrop at
    /// > the time the claim is made, that claim SHALL fail.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func claimAirdrop<Result>(
        _ message: Proto_Transaction,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Transaction>(
            message: message,
            metadata: metadata
        )
        return try await self.claimAirdrop(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}