//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: network_service.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


///*
/// Basic "network information" queries.
///
/// This service supports queries for the active services and API versions,
/// and a query for account details.
///
/// Usage: instantiate `Proto_NetworkServiceClient`, then call methods of this protocol to make API calls.
public protocol Proto_NetworkServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Proto_NetworkServiceClientInterceptorFactoryProtocol? { get }

  func getVersionInfo(
    _ request: Proto_Query,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Query, Proto_Response>

  func getAccountDetails(
    _ request: Proto_Query,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Query, Proto_Response>

  func getExecutionTime(
    _ request: Proto_Query,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Query, Proto_Response>

  func uncheckedSubmit(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>
}

extension Proto_NetworkServiceClientProtocol {
  public var serviceName: String {
    return "proto.NetworkService"
  }

  ///*
  /// Retrieve the active versions of Hedera Services and API messages.
  ///
  /// - Parameters:
  ///   - request: Request to send to getVersionInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getVersionInfo(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Query, Proto_Response> {
    return self.makeUnaryCall(
      path: Proto_NetworkServiceClientMetadata.Methods.getVersionInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetVersionInfoInterceptors() ?? []
    )
  }

  ///*
  /// Request detail information about an account.
  /// <p>
  /// The returned information SHALL include balance and allowances.<br/>
  /// The returned information SHALL NOT include a list of account records.
  ///
  /// - Parameters:
  ///   - request: Request to send to getAccountDetails.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getAccountDetails(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Query, Proto_Response> {
    return self.makeUnaryCall(
      path: Proto_NetworkServiceClientMetadata.Methods.getAccountDetails.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetAccountDetailsInterceptors() ?? []
    )
  }

  ///*
  /// Retrieve the time, in nanoseconds, spent in direct processing for one or
  /// more recent transactions.
  /// <p>
  /// For each transaction identifier provided, if that transaction is
  /// sufficiently recent (that is, it is within the range of the
  /// configuration value `stats.executionTimesToTrack`), the node SHALL
  /// return the time, in nanoseconds, spent to directly process that
  /// transaction (that is, excluding time to reach consensus).<br/>
  /// Note that because each node processes every transaction for the Hedera
  /// network, this query MAY be sent to any node.
  /// <p>
  /// <blockquote>Important<blockquote>
  /// This query is obsolete, not supported, and SHALL fail with a pre-check
  /// result of `NOT_SUPPORTED`.</blockquote></blockquote>
  ///
  /// - Parameters:
  ///   - request: Request to send to getExecutionTime.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getExecutionTime(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Query, Proto_Response> {
    return self.makeUnaryCall(
      path: Proto_NetworkServiceClientMetadata.Methods.getExecutionTime.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetExecutionTimeInterceptors() ?? []
    )
  }

  ///*
  /// Submit a transaction that wraps another transaction which will
  /// skip most validation.
  /// <p>
  /// <blockquote>Important<blockquote>
  /// This query is obsolete, not supported, and SHALL fail with a pre-check
  /// result of `NOT_SUPPORTED`.
  /// </blockquote></blockquote>
  ///
  /// - Parameters:
  ///   - request: Request to send to uncheckedSubmit.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func uncheckedSubmit(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(
      path: Proto_NetworkServiceClientMetadata.Methods.uncheckedSubmit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeuncheckedSubmitInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Proto_NetworkServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Proto_NetworkServiceNIOClient")
public final class Proto_NetworkServiceClient: Proto_NetworkServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Proto_NetworkServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Proto_NetworkServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the proto.NetworkService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Proto_NetworkServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Proto_NetworkServiceNIOClient: Proto_NetworkServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Proto_NetworkServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the proto.NetworkService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Proto_NetworkServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

///*
/// Basic "network information" queries.
///
/// This service supports queries for the active services and API versions,
/// and a query for account details.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Proto_NetworkServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Proto_NetworkServiceClientInterceptorFactoryProtocol? { get }

  func makeGetVersionInfoCall(
    _ request: Proto_Query,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Query, Proto_Response>

  func makeGetAccountDetailsCall(
    _ request: Proto_Query,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Query, Proto_Response>

  func makeGetExecutionTimeCall(
    _ request: Proto_Query,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Query, Proto_Response>

  func makeUncheckedSubmitCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Proto_NetworkServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Proto_NetworkServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: Proto_NetworkServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeGetVersionInfoCall(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Query, Proto_Response> {
    return self.makeAsyncUnaryCall(
      path: Proto_NetworkServiceClientMetadata.Methods.getVersionInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetVersionInfoInterceptors() ?? []
    )
  }

  public func makeGetAccountDetailsCall(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Query, Proto_Response> {
    return self.makeAsyncUnaryCall(
      path: Proto_NetworkServiceClientMetadata.Methods.getAccountDetails.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetAccountDetailsInterceptors() ?? []
    )
  }

  public func makeGetExecutionTimeCall(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Query, Proto_Response> {
    return self.makeAsyncUnaryCall(
      path: Proto_NetworkServiceClientMetadata.Methods.getExecutionTime.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetExecutionTimeInterceptors() ?? []
    )
  }

  public func makeUncheckedSubmitCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeAsyncUnaryCall(
      path: Proto_NetworkServiceClientMetadata.Methods.uncheckedSubmit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeuncheckedSubmitInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Proto_NetworkServiceAsyncClientProtocol {
  public func getVersionInfo(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_Response {
    return try await self.performAsyncUnaryCall(
      path: Proto_NetworkServiceClientMetadata.Methods.getVersionInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetVersionInfoInterceptors() ?? []
    )
  }

  public func getAccountDetails(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_Response {
    return try await self.performAsyncUnaryCall(
      path: Proto_NetworkServiceClientMetadata.Methods.getAccountDetails.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetAccountDetailsInterceptors() ?? []
    )
  }

  public func getExecutionTime(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_Response {
    return try await self.performAsyncUnaryCall(
      path: Proto_NetworkServiceClientMetadata.Methods.getExecutionTime.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetExecutionTimeInterceptors() ?? []
    )
  }

  public func uncheckedSubmit(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_TransactionResponse {
    return try await self.performAsyncUnaryCall(
      path: Proto_NetworkServiceClientMetadata.Methods.uncheckedSubmit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeuncheckedSubmitInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Proto_NetworkServiceAsyncClient: Proto_NetworkServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Proto_NetworkServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Proto_NetworkServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Proto_NetworkServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'getVersionInfo'.
  func makegetVersionInfoInterceptors() -> [ClientInterceptor<Proto_Query, Proto_Response>]

  /// - Returns: Interceptors to use when invoking 'getAccountDetails'.
  func makegetAccountDetailsInterceptors() -> [ClientInterceptor<Proto_Query, Proto_Response>]

  /// - Returns: Interceptors to use when invoking 'getExecutionTime'.
  func makegetExecutionTimeInterceptors() -> [ClientInterceptor<Proto_Query, Proto_Response>]

  /// - Returns: Interceptors to use when invoking 'uncheckedSubmit'.
  func makeuncheckedSubmitInterceptors() -> [ClientInterceptor<Proto_Transaction, Proto_TransactionResponse>]
}

public enum Proto_NetworkServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "NetworkService",
    fullName: "proto.NetworkService",
    methods: [
      Proto_NetworkServiceClientMetadata.Methods.getVersionInfo,
      Proto_NetworkServiceClientMetadata.Methods.getAccountDetails,
      Proto_NetworkServiceClientMetadata.Methods.getExecutionTime,
      Proto_NetworkServiceClientMetadata.Methods.uncheckedSubmit,
    ]
  )

  public enum Methods {
    public static let getVersionInfo = GRPCMethodDescriptor(
      name: "getVersionInfo",
      path: "/proto.NetworkService/getVersionInfo",
      type: GRPCCallType.unary
    )

    public static let getAccountDetails = GRPCMethodDescriptor(
      name: "getAccountDetails",
      path: "/proto.NetworkService/getAccountDetails",
      type: GRPCCallType.unary
    )

    public static let getExecutionTime = GRPCMethodDescriptor(
      name: "getExecutionTime",
      path: "/proto.NetworkService/getExecutionTime",
      type: GRPCCallType.unary
    )

    public static let uncheckedSubmit = GRPCMethodDescriptor(
      name: "uncheckedSubmit",
      path: "/proto.NetworkService/uncheckedSubmit",
      type: GRPCCallType.unary
    )
  }
}

///*
/// Basic "network information" queries.
///
/// This service supports queries for the active services and API versions,
/// and a query for account details.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Proto_NetworkServiceProvider: CallHandlerProvider {
  var interceptors: Proto_NetworkServiceServerInterceptorFactoryProtocol? { get }

  ///*
  /// Retrieve the active versions of Hedera Services and API messages.
  func getVersionInfo(request: Proto_Query, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_Response>

  ///*
  /// Request detail information about an account.
  /// <p>
  /// The returned information SHALL include balance and allowances.<br/>
  /// The returned information SHALL NOT include a list of account records.
  func getAccountDetails(request: Proto_Query, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_Response>

  ///*
  /// Retrieve the time, in nanoseconds, spent in direct processing for one or
  /// more recent transactions.
  /// <p>
  /// For each transaction identifier provided, if that transaction is
  /// sufficiently recent (that is, it is within the range of the
  /// configuration value `stats.executionTimesToTrack`), the node SHALL
  /// return the time, in nanoseconds, spent to directly process that
  /// transaction (that is, excluding time to reach consensus).<br/>
  /// Note that because each node processes every transaction for the Hedera
  /// network, this query MAY be sent to any node.
  /// <p>
  /// <blockquote>Important<blockquote>
  /// This query is obsolete, not supported, and SHALL fail with a pre-check
  /// result of `NOT_SUPPORTED`.</blockquote></blockquote>
  func getExecutionTime(request: Proto_Query, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_Response>

  ///*
  /// Submit a transaction that wraps another transaction which will
  /// skip most validation.
  /// <p>
  /// <blockquote>Important<blockquote>
  /// This query is obsolete, not supported, and SHALL fail with a pre-check
  /// result of `NOT_SUPPORTED`.
  /// </blockquote></blockquote>
  func uncheckedSubmit(request: Proto_Transaction, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_TransactionResponse>
}

extension Proto_NetworkServiceProvider {
  public var serviceName: Substring {
    return Proto_NetworkServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "getVersionInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Query>(),
        responseSerializer: ProtobufSerializer<Proto_Response>(),
        interceptors: self.interceptors?.makegetVersionInfoInterceptors() ?? [],
        userFunction: self.getVersionInfo(request:context:)
      )

    case "getAccountDetails":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Query>(),
        responseSerializer: ProtobufSerializer<Proto_Response>(),
        interceptors: self.interceptors?.makegetAccountDetailsInterceptors() ?? [],
        userFunction: self.getAccountDetails(request:context:)
      )

    case "getExecutionTime":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Query>(),
        responseSerializer: ProtobufSerializer<Proto_Response>(),
        interceptors: self.interceptors?.makegetExecutionTimeInterceptors() ?? [],
        userFunction: self.getExecutionTime(request:context:)
      )

    case "uncheckedSubmit":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Transaction>(),
        responseSerializer: ProtobufSerializer<Proto_TransactionResponse>(),
        interceptors: self.interceptors?.makeuncheckedSubmitInterceptors() ?? [],
        userFunction: self.uncheckedSubmit(request:context:)
      )

    default:
      return nil
    }
  }
}

///*
/// Basic "network information" queries.
///
/// This service supports queries for the active services and API versions,
/// and a query for account details.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Proto_NetworkServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Proto_NetworkServiceServerInterceptorFactoryProtocol? { get }

  ///*
  /// Retrieve the active versions of Hedera Services and API messages.
  func getVersionInfo(
    request: Proto_Query,
    context: GRPCAsyncServerCallContext
  ) async throws -> Proto_Response

  ///*
  /// Request detail information about an account.
  /// <p>
  /// The returned information SHALL include balance and allowances.<br/>
  /// The returned information SHALL NOT include a list of account records.
  func getAccountDetails(
    request: Proto_Query,
    context: GRPCAsyncServerCallContext
  ) async throws -> Proto_Response

  ///*
  /// Retrieve the time, in nanoseconds, spent in direct processing for one or
  /// more recent transactions.
  /// <p>
  /// For each transaction identifier provided, if that transaction is
  /// sufficiently recent (that is, it is within the range of the
  /// configuration value `stats.executionTimesToTrack`), the node SHALL
  /// return the time, in nanoseconds, spent to directly process that
  /// transaction (that is, excluding time to reach consensus).<br/>
  /// Note that because each node processes every transaction for the Hedera
  /// network, this query MAY be sent to any node.
  /// <p>
  /// <blockquote>Important<blockquote>
  /// This query is obsolete, not supported, and SHALL fail with a pre-check
  /// result of `NOT_SUPPORTED`.</blockquote></blockquote>
  func getExecutionTime(
    request: Proto_Query,
    context: GRPCAsyncServerCallContext
  ) async throws -> Proto_Response

  ///*
  /// Submit a transaction that wraps another transaction which will
  /// skip most validation.
  /// <p>
  /// <blockquote>Important<blockquote>
  /// This query is obsolete, not supported, and SHALL fail with a pre-check
  /// result of `NOT_SUPPORTED`.
  /// </blockquote></blockquote>
  func uncheckedSubmit(
    request: Proto_Transaction,
    context: GRPCAsyncServerCallContext
  ) async throws -> Proto_TransactionResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Proto_NetworkServiceAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Proto_NetworkServiceServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Proto_NetworkServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Proto_NetworkServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "getVersionInfo":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Query>(),
        responseSerializer: ProtobufSerializer<Proto_Response>(),
        interceptors: self.interceptors?.makegetVersionInfoInterceptors() ?? [],
        wrapping: { try await self.getVersionInfo(request: $0, context: $1) }
      )

    case "getAccountDetails":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Query>(),
        responseSerializer: ProtobufSerializer<Proto_Response>(),
        interceptors: self.interceptors?.makegetAccountDetailsInterceptors() ?? [],
        wrapping: { try await self.getAccountDetails(request: $0, context: $1) }
      )

    case "getExecutionTime":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Query>(),
        responseSerializer: ProtobufSerializer<Proto_Response>(),
        interceptors: self.interceptors?.makegetExecutionTimeInterceptors() ?? [],
        wrapping: { try await self.getExecutionTime(request: $0, context: $1) }
      )

    case "uncheckedSubmit":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Transaction>(),
        responseSerializer: ProtobufSerializer<Proto_TransactionResponse>(),
        interceptors: self.interceptors?.makeuncheckedSubmitInterceptors() ?? [],
        wrapping: { try await self.uncheckedSubmit(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

public protocol Proto_NetworkServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'getVersionInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makegetVersionInfoInterceptors() -> [ServerInterceptor<Proto_Query, Proto_Response>]

  /// - Returns: Interceptors to use when handling 'getAccountDetails'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makegetAccountDetailsInterceptors() -> [ServerInterceptor<Proto_Query, Proto_Response>]

  /// - Returns: Interceptors to use when handling 'getExecutionTime'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makegetExecutionTimeInterceptors() -> [ServerInterceptor<Proto_Query, Proto_Response>]

  /// - Returns: Interceptors to use when handling 'uncheckedSubmit'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeuncheckedSubmitInterceptors() -> [ServerInterceptor<Proto_Transaction, Proto_TransactionResponse>]
}

public enum Proto_NetworkServiceServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "NetworkService",
    fullName: "proto.NetworkService",
    methods: [
      Proto_NetworkServiceServerMetadata.Methods.getVersionInfo,
      Proto_NetworkServiceServerMetadata.Methods.getAccountDetails,
      Proto_NetworkServiceServerMetadata.Methods.getExecutionTime,
      Proto_NetworkServiceServerMetadata.Methods.uncheckedSubmit,
    ]
  )

  public enum Methods {
    public static let getVersionInfo = GRPCMethodDescriptor(
      name: "getVersionInfo",
      path: "/proto.NetworkService/getVersionInfo",
      type: GRPCCallType.unary
    )

    public static let getAccountDetails = GRPCMethodDescriptor(
      name: "getAccountDetails",
      path: "/proto.NetworkService/getAccountDetails",
      type: GRPCCallType.unary
    )

    public static let getExecutionTime = GRPCMethodDescriptor(
      name: "getExecutionTime",
      path: "/proto.NetworkService/getExecutionTime",
      type: GRPCCallType.unary
    )

    public static let uncheckedSubmit = GRPCMethodDescriptor(
      name: "uncheckedSubmit",
      path: "/proto.NetworkService/uncheckedSubmit",
      type: GRPCCallType.unary
    )
  }
}
