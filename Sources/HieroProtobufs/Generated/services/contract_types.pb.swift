// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: services/contract_types.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

///*
/// # Contract Message Types
/// Message types used in contract transactions.
///
/// ### Keywords
/// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
/// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
/// document are to be interpreted as described in
/// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
/// [RFC8174](https://www.ietf.org/rfc/rfc8174).

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
/// A contract "nonce" reference.<br/>
/// This connects a contract and its "nonce" value, and is primarily for use in
/// query responses.  A "nonce" is short for "nonsense" and is usually a value
/// with no particular meaning.
///
/// The nonce of a contract SHALL be incremented when that contract creates
/// another contract.
public struct Proto_ContractNonceInfo: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// A contract identifier.<br/>
  /// This refers to the contract that holds this nonce value.
  public var contractID: Proto_ContractID {
    get {return _contractID ?? Proto_ContractID()}
    set {_contractID = newValue}
  }
  /// Returns true if `contractID` has been explicitly set.
  public var hasContractID: Bool {return self._contractID != nil}
  /// Clears the value of `contractID`. Subsequent reads from it will return its default value.
  public mutating func clearContractID() {self._contractID = nil}

  ///*
  /// A "nonce" value.
  /// The current value of the nonce associated with the identified contract.
  public var nonce: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _contractID: Proto_ContractID? = nil
}

///*
/// EVM log data for a contract call.<br/>
/// The EVM log information produced by a smart contract function call.
///
/// Each contract function call MAY return zero or more log events.
public struct Proto_ContractLoginfo: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// A contract identifier.<br/>
  /// This refers to the contract that generated this log entry.
  public var contractID: Proto_ContractID {
    get {return _contractID ?? Proto_ContractID()}
    set {_contractID = newValue}
  }
  /// Returns true if `contractID` has been explicitly set.
  public var hasContractID: Bool {return self._contractID != nil}
  /// Clears the value of `contractID`. Subsequent reads from it will return its default value.
  public mutating func clearContractID() {self._contractID = nil}

  ///*
  /// A bloom filter.<br/>
  /// This filter applies to this log entry and indexes the contract log data
  /// in the full data of the Ethereum block.<br/>
  /// EIP-7668 proposes to remove bloom filters as they are quite low value
  /// in practice and separate indexing services are more effective.
  public var bloom: Data = Data()

  ///*
  /// A list of the "topics" in this log entry.<br/>
  /// The EVM permits up to 4 topics, each of which is 32 bytes (one EVM word).
  /// <p>
  /// The first "topic" is special, and MUST contain the keccak256 hash of the
  /// event signature, if the event is not anonymous.
  public var topic: [Data] = []

  ///*
  /// Event data for this log entry.<br/>
  /// This is binary data consisting of an arbitrary number of 256 bit
  /// (32 byte) words. The content of that data is determined by the smart
  /// contract code.<br/>
  public var data: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _contractID: Proto_ContractID? = nil
}

///*
/// A contract function result.<br/>
/// The result returned by a call to a smart contract function. This is part of
/// the response to a ContractCallLocal query, and is in the record for a
/// ContractCall. The ContractCreateInstance transaction record also carries a
/// function result, which is the results of the call to the constructor.
public struct Proto_ContractFunctionResult: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// A contract identifier.<br/>
  /// This identifies the smart contract that defines the function called.
  public var contractID: Proto_ContractID {
    get {return _storage._contractID ?? Proto_ContractID()}
    set {_uniqueStorage()._contractID = newValue}
  }
  /// Returns true if `contractID` has been explicitly set.
  public var hasContractID: Bool {return _storage._contractID != nil}
  /// Clears the value of `contractID`. Subsequent reads from it will return its default value.
  public mutating func clearContractID() {_uniqueStorage()._contractID = nil}

  ///*
  /// Result data from the function call.
  /// <p>
  /// This SHALL be encoded in RLP bytecode format.
  public var contractCallResult: Data {
    get {return _storage._contractCallResult}
    set {_uniqueStorage()._contractCallResult = newValue}
  }

  ///*
  /// Any error message produced by the contract call.
  /// <p>
  /// This SHALL be unset if the contract call succeeded.
  public var errorMessage: String {
    get {return _storage._errorMessage}
    set {_uniqueStorage()._errorMessage = newValue}
  }

  ///*
  /// A bloom filter produced by this contract call.<br/>
  /// Ethereum uses this bloom filter to search for call results in the
  /// Ethereum block history. High false positive rates make the bloom
  /// filters quite limited value.
  public var bloom: Data {
    get {return _storage._bloom}
    set {_uniqueStorage()._bloom = newValue}
  }

  ///*
  /// A quantity of "gas" used.<br/>
  /// This represents the resource units expended to execute this
  /// contract call, and correlates to transaction costs.
  public var gasUsed: UInt64 {
    get {return _storage._gasUsed}
    set {_uniqueStorage()._gasUsed = newValue}
  }

  ///*
  /// Any Log events produced by this contract call.
  public var logInfo: [Proto_ContractLoginfo] {
    get {return _storage._logInfo}
    set {_uniqueStorage()._logInfo = newValue}
  }

  ///*
  /// Replaced by values in transaction records to support
  /// `CREATE2` calls.<br/>
  /// <p>
  /// The list of smart contracts that were created by the function call.<br/>
  /// The created ids will now _also_ be externalized through internal
  /// transaction records, where each record has its alias field populated
  /// with the new contract's EVM address.<br/>
  /// This is needed for contracts created with CREATE2, which removes the
  /// trivial relationship between a new contract's Identifier and its
  /// Solidity address.
  ///
  /// NOTE: This field was marked as deprecated in the .proto file.
  public var createdContractIds: [Proto_ContractID] {
    get {return _storage._createdContractIds}
    set {_uniqueStorage()._createdContractIds = newValue}
  }

  ///*
  /// A created contract address.<br/>
  /// If the function created a new contract (e.g. `CREATE2`),
  /// this is the primary 20-byte EVM address for that contract.
  /// <p>
  /// Every contract SHALL have a "base" EVM address that is determined by its
  /// `shard.realm.num` contract ID.<br/>
  /// This address is constructed as follows
  /// <ol>
  ///   <li>The first 4 bytes are the big-endian
  ///       representation of the shard.</li>
  ///   <li>The next 8 bytes are the big-endian
  ///       representation of the realm.</li>
  ///   <li>The final 8 bytes are the big-endian
  ///       representation of the number.</li>
  /// </ol>
  /// <p>
  /// Contracts created via `CREATE2` SHALL have an _additional_, primary,
  /// address that is derived from the
  /// <a href="https://eips.ethereum.org/EIPS/eip-1014"><tt>EIP-1014</tt></a>
  /// specification. This additional address SHALL NOT be directly related to
  /// the `shard.realm.num` contract ID.<br/>
  /// It should be emphasized that Contracts created via a `CREATE2` call can
  /// also be referenced via the same "base" EVM address as described above.
  public var evmAddress: SwiftProtobuf.Google_Protobuf_BytesValue {
    get {return _storage._evmAddress ?? SwiftProtobuf.Google_Protobuf_BytesValue()}
    set {_uniqueStorage()._evmAddress = newValue}
  }
  /// Returns true if `evmAddress` has been explicitly set.
  public var hasEvmAddress: Bool {return _storage._evmAddress != nil}
  /// Clears the value of `evmAddress`. Subsequent reads from it will return its default value.
  public mutating func clearEvmAddress() {_uniqueStorage()._evmAddress = nil}

  ///*
  /// The amount of gas available for this call, sometimes referred to as the
  /// gasLimit.<br/>
  /// This field SHALL NOT be populated when the associated `TransactionBody`
  /// in the block stream is a `ContractCreateTransactionBody` or
  /// a `ContractCallTransactionBody`.
  public var gas: Int64 {
    get {return _storage._gas}
    set {_uniqueStorage()._gas = newValue}
  }

  ///*
  /// An amount, in tinybar, sent by this function call.<br/>
  /// This SHALL be zero(0) if the function called is not `payable`.<br/>
  /// This field SHALL NOT be populated when the associated `TransactionBody`
  /// in the block stream is a `ContractCreateTransactionBody` or
  /// a `ContractCallTransactionBody`.
  public var amount: Int64 {
    get {return _storage._amount}
    set {_uniqueStorage()._amount = newValue}
  }

  ///*
  /// The smart contract function to call, and the parameters to pass to that
  /// function.<br/>
  /// These SHALL be presented in EVM bytecode function call format.<br/>
  /// This field SHALL NOT be populated when the associated `TransactionBody`
  /// in the block stream is a `ContractCreateTransactionBody` or
  /// a `ContractCallTransactionBody`.
  public var functionParameters: Data {
    get {return _storage._functionParameters}
    set {_uniqueStorage()._functionParameters = newValue}
  }

  ///*
  /// The account that was the "sender" for this contract call.<br/>
  /// If this is not set it SHALL be read from the accountId in the
  /// transactionId for the contract call.<br/>
  /// This field SHALL NOT be populated when the associated `TransactionBody`
  /// in the block stream is a `ContractCreateTransactionBody` or
  /// a `ContractCallTransactionBody`.
  public var senderID: Proto_AccountID {
    get {return _storage._senderID ?? Proto_AccountID()}
    set {_uniqueStorage()._senderID = newValue}
  }
  /// Returns true if `senderID` has been explicitly set.
  public var hasSenderID: Bool {return _storage._senderID != nil}
  /// Clears the value of `senderID`. Subsequent reads from it will return its default value.
  public mutating func clearSenderID() {_uniqueStorage()._senderID = nil}

  ///*
  /// A list of contract account nonce values.<br/>
  /// This list SHALL contain a nonce value for each contract account modified
  /// as a result of this contract call. These nonce values SHALL be the value
  /// after the contract call is completed.
  public var contractNonces: [Proto_ContractNonceInfo] {
    get {return _storage._contractNonces}
    set {_uniqueStorage()._contractNonces = newValue}
  }

  ///*
  /// A nonce value for the "signer account".<br/>
  /// If the contract call updated the signer nonce for the signer account
  /// (i.e. by creating another contract), this field SHALL contain the
  /// updated value.<br/>
  /// If the signer account nonce was not updated, this field SHALL be `null`.
  public var signerNonce: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._signerNonce ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._signerNonce = newValue}
  }
  /// Returns true if `signerNonce` has been explicitly set.
  public var hasSignerNonce: Bool {return _storage._signerNonce != nil}
  /// Clears the value of `signerNonce`. Subsequent reads from it will return its default value.
  public mutating func clearSignerNonce() {_uniqueStorage()._signerNonce = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "proto"

extension Proto_ContractNonceInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ContractNonceInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "contract_id"),
    2: .same(proto: "nonce"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._contractID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.nonce) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._contractID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.nonce != 0 {
      try visitor.visitSingularInt64Field(value: self.nonce, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_ContractNonceInfo, rhs: Proto_ContractNonceInfo) -> Bool {
    if lhs._contractID != rhs._contractID {return false}
    if lhs.nonce != rhs.nonce {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_ContractLoginfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ContractLoginfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contractID"),
    2: .same(proto: "bloom"),
    3: .same(proto: "topic"),
    4: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._contractID) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.bloom) }()
      case 3: try { try decoder.decodeRepeatedBytesField(value: &self.topic) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._contractID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.bloom.isEmpty {
      try visitor.visitSingularBytesField(value: self.bloom, fieldNumber: 2)
    }
    if !self.topic.isEmpty {
      try visitor.visitRepeatedBytesField(value: self.topic, fieldNumber: 3)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_ContractLoginfo, rhs: Proto_ContractLoginfo) -> Bool {
    if lhs._contractID != rhs._contractID {return false}
    if lhs.bloom != rhs.bloom {return false}
    if lhs.topic != rhs.topic {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_ContractFunctionResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ContractFunctionResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contractID"),
    2: .same(proto: "contractCallResult"),
    3: .same(proto: "errorMessage"),
    4: .same(proto: "bloom"),
    5: .same(proto: "gasUsed"),
    6: .same(proto: "logInfo"),
    7: .same(proto: "createdContractIDs"),
    9: .standard(proto: "evm_address"),
    10: .same(proto: "gas"),
    11: .same(proto: "amount"),
    12: .same(proto: "functionParameters"),
    13: .standard(proto: "sender_id"),
    14: .standard(proto: "contract_nonces"),
    15: .standard(proto: "signer_nonce"),
  ]

  fileprivate class _StorageClass {
    var _contractID: Proto_ContractID? = nil
    var _contractCallResult: Data = Data()
    var _errorMessage: String = String()
    var _bloom: Data = Data()
    var _gasUsed: UInt64 = 0
    var _logInfo: [Proto_ContractLoginfo] = []
    var _createdContractIds: [Proto_ContractID] = []
    var _evmAddress: SwiftProtobuf.Google_Protobuf_BytesValue? = nil
    var _gas: Int64 = 0
    var _amount: Int64 = 0
    var _functionParameters: Data = Data()
    var _senderID: Proto_AccountID? = nil
    var _contractNonces: [Proto_ContractNonceInfo] = []
    var _signerNonce: SwiftProtobuf.Google_Protobuf_Int64Value? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _contractID = source._contractID
      _contractCallResult = source._contractCallResult
      _errorMessage = source._errorMessage
      _bloom = source._bloom
      _gasUsed = source._gasUsed
      _logInfo = source._logInfo
      _createdContractIds = source._createdContractIds
      _evmAddress = source._evmAddress
      _gas = source._gas
      _amount = source._amount
      _functionParameters = source._functionParameters
      _senderID = source._senderID
      _contractNonces = source._contractNonces
      _signerNonce = source._signerNonce
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._contractID) }()
        case 2: try { try decoder.decodeSingularBytesField(value: &_storage._contractCallResult) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._errorMessage) }()
        case 4: try { try decoder.decodeSingularBytesField(value: &_storage._bloom) }()
        case 5: try { try decoder.decodeSingularUInt64Field(value: &_storage._gasUsed) }()
        case 6: try { try decoder.decodeRepeatedMessageField(value: &_storage._logInfo) }()
        case 7: try { try decoder.decodeRepeatedMessageField(value: &_storage._createdContractIds) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._evmAddress) }()
        case 10: try { try decoder.decodeSingularInt64Field(value: &_storage._gas) }()
        case 11: try { try decoder.decodeSingularInt64Field(value: &_storage._amount) }()
        case 12: try { try decoder.decodeSingularBytesField(value: &_storage._functionParameters) }()
        case 13: try { try decoder.decodeSingularMessageField(value: &_storage._senderID) }()
        case 14: try { try decoder.decodeRepeatedMessageField(value: &_storage._contractNonces) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._signerNonce) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._contractID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      if !_storage._contractCallResult.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._contractCallResult, fieldNumber: 2)
      }
      if !_storage._errorMessage.isEmpty {
        try visitor.visitSingularStringField(value: _storage._errorMessage, fieldNumber: 3)
      }
      if !_storage._bloom.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._bloom, fieldNumber: 4)
      }
      if _storage._gasUsed != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._gasUsed, fieldNumber: 5)
      }
      if !_storage._logInfo.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._logInfo, fieldNumber: 6)
      }
      if !_storage._createdContractIds.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._createdContractIds, fieldNumber: 7)
      }
      try { if let v = _storage._evmAddress {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      if _storage._gas != 0 {
        try visitor.visitSingularInt64Field(value: _storage._gas, fieldNumber: 10)
      }
      if _storage._amount != 0 {
        try visitor.visitSingularInt64Field(value: _storage._amount, fieldNumber: 11)
      }
      if !_storage._functionParameters.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._functionParameters, fieldNumber: 12)
      }
      try { if let v = _storage._senderID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      } }()
      if !_storage._contractNonces.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._contractNonces, fieldNumber: 14)
      }
      try { if let v = _storage._signerNonce {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_ContractFunctionResult, rhs: Proto_ContractFunctionResult) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._contractID != rhs_storage._contractID {return false}
        if _storage._contractCallResult != rhs_storage._contractCallResult {return false}
        if _storage._errorMessage != rhs_storage._errorMessage {return false}
        if _storage._bloom != rhs_storage._bloom {return false}
        if _storage._gasUsed != rhs_storage._gasUsed {return false}
        if _storage._logInfo != rhs_storage._logInfo {return false}
        if _storage._createdContractIds != rhs_storage._createdContractIds {return false}
        if _storage._evmAddress != rhs_storage._evmAddress {return false}
        if _storage._gas != rhs_storage._gas {return false}
        if _storage._amount != rhs_storage._amount {return false}
        if _storage._functionParameters != rhs_storage._functionParameters {return false}
        if _storage._senderID != rhs_storage._senderID {return false}
        if _storage._contractNonces != rhs_storage._contractNonces {return false}
        if _storage._signerNonce != rhs_storage._signerNonce {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
