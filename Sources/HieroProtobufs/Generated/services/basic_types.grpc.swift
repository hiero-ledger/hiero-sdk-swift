///*
/// # Basic Types
/// Fundamental message types used across transactions and state as field types.
///
/// ### Requirements for identifier values
/// - Most entities in the network SHALL be identified by a multi-part
///   identifier. These identifier values SHALL consist of a shard, a realm, and
///   an entity identifier.
/// - Shard, Realm, and Entity Number MUST all be whole numbers.
/// - A Shard SHALL be globally unique.
/// - A Realm MAY be reused between shards, but SHALL be unique within a shard.
/// - An Entity Number MAY be reused between shards and realms, but SHALL be
///   unique within each combination of shard and realm.
/// - Every object (e.g. account, file, token, etc...) SHALL be scoped to exactly
///   one realm and shard. Thus a File has a FileID, a numeric triplet, such as
///   0.0.2 for shard 0, realm 0, entity 2.
/// - Identifier values SHOULD use an Entity Number as the third component of the
///   identifier. Some, however, MAY use alternative or composite values for the
///   Entity portion of the three part identifier. Any such alternative or
///   composite value MUST be unique within that shard and realm combination.
/// - The entity portion of the identifier, regardless of type, MUST be unique
///   within that realm and shard combination and MAY be globally unique.
/// - The triplet of shard.realm.entity MUST be globally unique, even across
///   different identifier types.
/// - Each realm SHALL maintain a single counter for entity numbers, so if there
///   is an identifier with value 0.1.2, then there MUST NOT be an identifier
///   with value 0.1.2 for any other object.
///
/// ### Keywords
/// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
/// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
/// document are to be interpreted as described in
/// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
/// [RFC8174](https://www.ietf.org/rfc/rfc8174).

// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: services/basic_types.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

// This file contained no services.