// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: services/crypto_add_live_hash.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

///*
/// # Add Live Hash
/// Associate content to an account via a SHA-384 hash.
///
/// > Important
/// >> This transaction is obsolete and not supported.<br/>
/// >> Any transaction of this type that is submitted SHALL fail
/// >> with a `PRE_CHECK` result of `NOT_SUPPORTED`.
///
/// ### Keywords
/// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
/// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
/// document are to be interpreted as described in
/// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
/// [RFC8174](https://www.ietf.org/rfc/rfc8174).

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
/// A Live Hash value associating some item of content to an account.
///
/// This message represents a desired entry in the ledger for a SHA-384
/// hash of some content, an associated specific account, a list of authorized
/// keys, and a duration the live hash is "valid".
public struct Proto_LiveHash: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// An account associated via this live hash to the hashed content.
  public var accountID: Proto_AccountID {
    get {return _accountID ?? Proto_AccountID()}
    set {_accountID = newValue}
  }
  /// Returns true if `accountID` has been explicitly set.
  public var hasAccountID: Bool {return self._accountID != nil}
  /// Clears the value of `accountID`. Subsequent reads from it will return its default value.
  public mutating func clearAccountID() {self._accountID = nil}

  ///*
  /// A SHA-384 hash of some content that is associated to the account
  /// or account holder.
  public var hash: Data = Data()

  ///*
  /// A list of keys, all of which MUST sign the transaction to add the
  /// live hash.<br/>
  /// Any one of these keys may, however, remove the live hash to revoke
  /// the association.
  public var keys: Proto_KeyList {
    get {return _keys ?? Proto_KeyList()}
    set {_keys = newValue}
  }
  /// Returns true if `keys` has been explicitly set.
  public var hasKeys: Bool {return self._keys != nil}
  /// Clears the value of `keys`. Subsequent reads from it will return its default value.
  public mutating func clearKeys() {self._keys = nil}

  ///*
  /// A duration describing how long this Live Hash SHALL remain valid.<br/>
  /// A Live Hash SHOULD NOT be relied upon after this duration has elapsed.
  public var duration: Proto_Duration {
    get {return _duration ?? Proto_Duration()}
    set {_duration = newValue}
  }
  /// Returns true if `duration` has been explicitly set.
  public var hasDuration: Bool {return self._duration != nil}
  /// Clears the value of `duration`. Subsequent reads from it will return its default value.
  public mutating func clearDuration() {self._duration = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _accountID: Proto_AccountID? = nil
  fileprivate var _keys: Proto_KeyList? = nil
  fileprivate var _duration: Proto_Duration? = nil
}

///*
/// Add a hash value to the ledger and associate it with an account.
///
/// Create an entry in the ledger for a SHA-384 hash of some content, and
/// associate that with a specific account.  This is sometimes used to associate
/// a credential or certificate with an account as a public record.<br/>
/// The entry created is also associated with a list of keys, all of which
/// MUST sign this transaction.<br/>
/// The account key for the associated account MUST sign this transaction.<br/>
///
/// The live hash, once created, MAY be removed from the ledger with one
/// or more signatures.
/// - The account key of the account associated to the live hash.
/// - Any one key from the key list in the live hash entry.
/// - Any combination of keys from the key list in the live hash entry.
public struct Proto_CryptoAddLiveHashTransactionBody: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// A Live Hash to be added to the ledger and associated with
  /// the identified account.
  public var liveHash: Proto_LiveHash {
    get {return _liveHash ?? Proto_LiveHash()}
    set {_liveHash = newValue}
  }
  /// Returns true if `liveHash` has been explicitly set.
  public var hasLiveHash: Bool {return self._liveHash != nil}
  /// Clears the value of `liveHash`. Subsequent reads from it will return its default value.
  public mutating func clearLiveHash() {self._liveHash = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _liveHash: Proto_LiveHash? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "proto"

extension Proto_LiveHash: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LiveHash"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "accountId"),
    2: .same(proto: "hash"),
    3: .same(proto: "keys"),
    5: .same(proto: "duration"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._accountID) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.hash) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._keys) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._duration) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._accountID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.hash.isEmpty {
      try visitor.visitSingularBytesField(value: self.hash, fieldNumber: 2)
    }
    try { if let v = self._keys {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._duration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_LiveHash, rhs: Proto_LiveHash) -> Bool {
    if lhs._accountID != rhs._accountID {return false}
    if lhs.hash != rhs.hash {return false}
    if lhs._keys != rhs._keys {return false}
    if lhs._duration != rhs._duration {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_CryptoAddLiveHashTransactionBody: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CryptoAddLiveHashTransactionBody"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .same(proto: "liveHash"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 3: try { try decoder.decodeSingularMessageField(value: &self._liveHash) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._liveHash {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_CryptoAddLiveHashTransactionBody, rhs: Proto_CryptoAddLiveHashTransactionBody) -> Bool {
    if lhs._liveHash != rhs._liveHash {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
