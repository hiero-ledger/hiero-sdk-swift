//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: services/file_service.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


///*
/// Service gRPC definitions for the Hedera File Service (HFS).
///
/// #### Signature Requirements
/// The HFS manages file authorization differently, depending on type of file
/// transaction, and this can be surprising.<br/>
/// The core element of file authorization is the `keys` field,
/// which is a `KeyList`; a list of individual `Key` messages, each of which
/// may represent a simple or complex key.<br/>
/// The file service transactions treat this list differently.<br/>
/// A `fileCreate`, `fileAppend`, or `fileUpdate` MUST have a valid signature
/// from _each_ key in the list.<br/>
/// A `fileDelete` MUST have a valid signature from _at least one_ key in
/// the list. This is different, and allows a file "owned" by many entities
/// to be deleted by any one of those entities. A deleted file cannot be
/// restored, so it is important to consider this when assigning keys for
/// a file.<br/>
/// If any of the keys in a `KeyList` are complex, the full requirements of
/// each complex key must be met to count as a "valid signature" for that key.
/// A complex key structure (i.e. a `ThresholdKey`, or `KeyList`, possibly
/// including additional `ThresholdKey` or `KeyList` descendants) may be
/// assigned as the sole entry in a file `keys` field to ensure all transactions
/// have the same signature requirements.
///
/// Usage: instantiate `Proto_FileServiceClient`, then call methods of this protocol to make API calls.
public protocol Proto_FileServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Proto_FileServiceClientInterceptorFactoryProtocol? { get }

  func createFile(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func updateFile(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func deleteFile(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func appendContent(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func getFileContent(
    _ request: Proto_Query,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Query, Proto_Response>

  func getFileInfo(
    _ request: Proto_Query,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Query, Proto_Response>

  func systemDelete(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func systemUndelete(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>
}

extension Proto_FileServiceClientProtocol {
  public var serviceName: String {
    return "proto.FileService"
  }

  ///*
  /// Create a file in HFS.
  ///
  /// - Parameters:
  ///   - request: Request to send to createFile.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createFile(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(
      path: Proto_FileServiceClientMetadata.Methods.createFile.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makecreateFileInterceptors() ?? []
    )
  }

  ///*
  /// Update a file in HFS.
  ///
  /// - Parameters:
  ///   - request: Request to send to updateFile.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateFile(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(
      path: Proto_FileServiceClientMetadata.Methods.updateFile.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeupdateFileInterceptors() ?? []
    )
  }

  ///*
  /// Delete a file in HFS.<br/>
  /// The content of a file deleted in this manner is completely removed
  /// from network state, but the file metadata remains.
  ///
  /// - Parameters:
  ///   - request: Request to send to deleteFile.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteFile(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(
      path: Proto_FileServiceClientMetadata.Methods.deleteFile.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makedeleteFileInterceptors() ?? []
    )
  }

  ///*
  /// Append content to a file in HFS.
  ///
  /// - Parameters:
  ///   - request: Request to send to appendContent.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func appendContent(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(
      path: Proto_FileServiceClientMetadata.Methods.appendContent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeappendContentInterceptors() ?? []
    )
  }

  ///*
  /// Retrieve the content of a file in HFS.<br/>
  /// Note that this query retrieves _only_ the file content, not any of
  /// the metadata for the file.
  ///
  /// - Parameters:
  ///   - request: Request to send to getFileContent.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getFileContent(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Query, Proto_Response> {
    return self.makeUnaryCall(
      path: Proto_FileServiceClientMetadata.Methods.getFileContent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetFileContentInterceptors() ?? []
    )
  }

  ///*
  /// Retrieve the metadata for a file in HFS.<br/>
  /// Note that this query does not retrieve the file _content_.
  ///
  /// - Parameters:
  ///   - request: Request to send to getFileInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getFileInfo(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Query, Proto_Response> {
    return self.makeUnaryCall(
      path: Proto_FileServiceClientMetadata.Methods.getFileInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetFileInfoInterceptors() ?? []
    )
  }

  ///*
  /// Delete a "regular" file without "owner" authorization.<br/>
  /// This transaction _does not_ require signatures for the keys in
  /// the file `keys` list, but must be signed by a "privileged" account.
  /// <p>
  /// This transaction SHALL NOT accept a file identifier for
  /// a "system" file.<br/>
  /// This transaction SHALL NOT remove the _content_ of the file from state.
  /// This permits use of the `systemUndelete` to reverse this action if
  /// performed in error.
  /// <p>
  /// This is a privileged transaction, and only accounts 2-59 are permitted
  /// to call this function, by default. The actual restriction is in the
  /// `api-permission.properties` file in the consensus node configuration.
  ///
  /// - Parameters:
  ///   - request: Request to send to systemDelete.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func systemDelete(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(
      path: Proto_FileServiceClientMetadata.Methods.systemDelete.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makesystemDeleteInterceptors() ?? []
    )
  }

  ///*
  /// Undelete a "regular" file.
  /// This transaction must be signed by a "privileged" account.<br/>
  /// <p>
  /// This transaction SHALL NOT accept a file identifier for
  /// a "system" file.<br/>
  /// The file identified SHOULD have been previously deleted.<br/>
  /// This transaction SHALL NOT recover the _content_ of a file unless that
  /// file was deleted with a `systemDelete` transaction. The _content_ of a
  /// file deleted with a `fileDelete` transaction is not retained in state.
  /// <p>
  /// This is a privileged transaction, and only accounts 2-60 are permitted
  /// to call this function, by default. The actual restriction is in the
  /// `api-permission.properties` file in the consensus node configuration.
  ///
  /// - Parameters:
  ///   - request: Request to send to systemUndelete.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func systemUndelete(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(
      path: Proto_FileServiceClientMetadata.Methods.systemUndelete.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makesystemUndeleteInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Proto_FileServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Proto_FileServiceNIOClient")
public final class Proto_FileServiceClient: Proto_FileServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Proto_FileServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Proto_FileServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the proto.FileService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Proto_FileServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Proto_FileServiceNIOClient: Proto_FileServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Proto_FileServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the proto.FileService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Proto_FileServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

///*
/// Service gRPC definitions for the Hedera File Service (HFS).
///
/// #### Signature Requirements
/// The HFS manages file authorization differently, depending on type of file
/// transaction, and this can be surprising.<br/>
/// The core element of file authorization is the `keys` field,
/// which is a `KeyList`; a list of individual `Key` messages, each of which
/// may represent a simple or complex key.<br/>
/// The file service transactions treat this list differently.<br/>
/// A `fileCreate`, `fileAppend`, or `fileUpdate` MUST have a valid signature
/// from _each_ key in the list.<br/>
/// A `fileDelete` MUST have a valid signature from _at least one_ key in
/// the list. This is different, and allows a file "owned" by many entities
/// to be deleted by any one of those entities. A deleted file cannot be
/// restored, so it is important to consider this when assigning keys for
/// a file.<br/>
/// If any of the keys in a `KeyList` are complex, the full requirements of
/// each complex key must be met to count as a "valid signature" for that key.
/// A complex key structure (i.e. a `ThresholdKey`, or `KeyList`, possibly
/// including additional `ThresholdKey` or `KeyList` descendants) may be
/// assigned as the sole entry in a file `keys` field to ensure all transactions
/// have the same signature requirements.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Proto_FileServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Proto_FileServiceClientInterceptorFactoryProtocol? { get }

  func makeCreateFileCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func makeUpdateFileCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func makeDeleteFileCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func makeAppendContentCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func makeGetFileContentCall(
    _ request: Proto_Query,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Query, Proto_Response>

  func makeGetFileInfoCall(
    _ request: Proto_Query,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Query, Proto_Response>

  func makeSystemDeleteCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func makeSystemUndeleteCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Proto_FileServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Proto_FileServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: Proto_FileServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeCreateFileCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeAsyncUnaryCall(
      path: Proto_FileServiceClientMetadata.Methods.createFile.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makecreateFileInterceptors() ?? []
    )
  }

  public func makeUpdateFileCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeAsyncUnaryCall(
      path: Proto_FileServiceClientMetadata.Methods.updateFile.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeupdateFileInterceptors() ?? []
    )
  }

  public func makeDeleteFileCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeAsyncUnaryCall(
      path: Proto_FileServiceClientMetadata.Methods.deleteFile.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makedeleteFileInterceptors() ?? []
    )
  }

  public func makeAppendContentCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeAsyncUnaryCall(
      path: Proto_FileServiceClientMetadata.Methods.appendContent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeappendContentInterceptors() ?? []
    )
  }

  public func makeGetFileContentCall(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Query, Proto_Response> {
    return self.makeAsyncUnaryCall(
      path: Proto_FileServiceClientMetadata.Methods.getFileContent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetFileContentInterceptors() ?? []
    )
  }

  public func makeGetFileInfoCall(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Query, Proto_Response> {
    return self.makeAsyncUnaryCall(
      path: Proto_FileServiceClientMetadata.Methods.getFileInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetFileInfoInterceptors() ?? []
    )
  }

  public func makeSystemDeleteCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeAsyncUnaryCall(
      path: Proto_FileServiceClientMetadata.Methods.systemDelete.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makesystemDeleteInterceptors() ?? []
    )
  }

  public func makeSystemUndeleteCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeAsyncUnaryCall(
      path: Proto_FileServiceClientMetadata.Methods.systemUndelete.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makesystemUndeleteInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Proto_FileServiceAsyncClientProtocol {
  public func createFile(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_TransactionResponse {
    return try await self.performAsyncUnaryCall(
      path: Proto_FileServiceClientMetadata.Methods.createFile.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makecreateFileInterceptors() ?? []
    )
  }

  public func updateFile(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_TransactionResponse {
    return try await self.performAsyncUnaryCall(
      path: Proto_FileServiceClientMetadata.Methods.updateFile.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeupdateFileInterceptors() ?? []
    )
  }

  public func deleteFile(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_TransactionResponse {
    return try await self.performAsyncUnaryCall(
      path: Proto_FileServiceClientMetadata.Methods.deleteFile.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makedeleteFileInterceptors() ?? []
    )
  }

  public func appendContent(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_TransactionResponse {
    return try await self.performAsyncUnaryCall(
      path: Proto_FileServiceClientMetadata.Methods.appendContent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeappendContentInterceptors() ?? []
    )
  }

  public func getFileContent(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_Response {
    return try await self.performAsyncUnaryCall(
      path: Proto_FileServiceClientMetadata.Methods.getFileContent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetFileContentInterceptors() ?? []
    )
  }

  public func getFileInfo(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_Response {
    return try await self.performAsyncUnaryCall(
      path: Proto_FileServiceClientMetadata.Methods.getFileInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetFileInfoInterceptors() ?? []
    )
  }

  public func systemDelete(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_TransactionResponse {
    return try await self.performAsyncUnaryCall(
      path: Proto_FileServiceClientMetadata.Methods.systemDelete.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makesystemDeleteInterceptors() ?? []
    )
  }

  public func systemUndelete(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_TransactionResponse {
    return try await self.performAsyncUnaryCall(
      path: Proto_FileServiceClientMetadata.Methods.systemUndelete.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makesystemUndeleteInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Proto_FileServiceAsyncClient: Proto_FileServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Proto_FileServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Proto_FileServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Proto_FileServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'createFile'.
  func makecreateFileInterceptors() -> [ClientInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when invoking 'updateFile'.
  func makeupdateFileInterceptors() -> [ClientInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when invoking 'deleteFile'.
  func makedeleteFileInterceptors() -> [ClientInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when invoking 'appendContent'.
  func makeappendContentInterceptors() -> [ClientInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when invoking 'getFileContent'.
  func makegetFileContentInterceptors() -> [ClientInterceptor<Proto_Query, Proto_Response>]

  /// - Returns: Interceptors to use when invoking 'getFileInfo'.
  func makegetFileInfoInterceptors() -> [ClientInterceptor<Proto_Query, Proto_Response>]

  /// - Returns: Interceptors to use when invoking 'systemDelete'.
  func makesystemDeleteInterceptors() -> [ClientInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when invoking 'systemUndelete'.
  func makesystemUndeleteInterceptors() -> [ClientInterceptor<Proto_Transaction, Proto_TransactionResponse>]
}

public enum Proto_FileServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "FileService",
    fullName: "proto.FileService",
    methods: [
      Proto_FileServiceClientMetadata.Methods.createFile,
      Proto_FileServiceClientMetadata.Methods.updateFile,
      Proto_FileServiceClientMetadata.Methods.deleteFile,
      Proto_FileServiceClientMetadata.Methods.appendContent,
      Proto_FileServiceClientMetadata.Methods.getFileContent,
      Proto_FileServiceClientMetadata.Methods.getFileInfo,
      Proto_FileServiceClientMetadata.Methods.systemDelete,
      Proto_FileServiceClientMetadata.Methods.systemUndelete,
    ]
  )

  public enum Methods {
    public static let createFile = GRPCMethodDescriptor(
      name: "createFile",
      path: "/proto.FileService/createFile",
      type: GRPCCallType.unary
    )

    public static let updateFile = GRPCMethodDescriptor(
      name: "updateFile",
      path: "/proto.FileService/updateFile",
      type: GRPCCallType.unary
    )

    public static let deleteFile = GRPCMethodDescriptor(
      name: "deleteFile",
      path: "/proto.FileService/deleteFile",
      type: GRPCCallType.unary
    )

    public static let appendContent = GRPCMethodDescriptor(
      name: "appendContent",
      path: "/proto.FileService/appendContent",
      type: GRPCCallType.unary
    )

    public static let getFileContent = GRPCMethodDescriptor(
      name: "getFileContent",
      path: "/proto.FileService/getFileContent",
      type: GRPCCallType.unary
    )

    public static let getFileInfo = GRPCMethodDescriptor(
      name: "getFileInfo",
      path: "/proto.FileService/getFileInfo",
      type: GRPCCallType.unary
    )

    public static let systemDelete = GRPCMethodDescriptor(
      name: "systemDelete",
      path: "/proto.FileService/systemDelete",
      type: GRPCCallType.unary
    )

    public static let systemUndelete = GRPCMethodDescriptor(
      name: "systemUndelete",
      path: "/proto.FileService/systemUndelete",
      type: GRPCCallType.unary
    )
  }
}

///*
/// Service gRPC definitions for the Hedera File Service (HFS).
///
/// #### Signature Requirements
/// The HFS manages file authorization differently, depending on type of file
/// transaction, and this can be surprising.<br/>
/// The core element of file authorization is the `keys` field,
/// which is a `KeyList`; a list of individual `Key` messages, each of which
/// may represent a simple or complex key.<br/>
/// The file service transactions treat this list differently.<br/>
/// A `fileCreate`, `fileAppend`, or `fileUpdate` MUST have a valid signature
/// from _each_ key in the list.<br/>
/// A `fileDelete` MUST have a valid signature from _at least one_ key in
/// the list. This is different, and allows a file "owned" by many entities
/// to be deleted by any one of those entities. A deleted file cannot be
/// restored, so it is important to consider this when assigning keys for
/// a file.<br/>
/// If any of the keys in a `KeyList` are complex, the full requirements of
/// each complex key must be met to count as a "valid signature" for that key.
/// A complex key structure (i.e. a `ThresholdKey`, or `KeyList`, possibly
/// including additional `ThresholdKey` or `KeyList` descendants) may be
/// assigned as the sole entry in a file `keys` field to ensure all transactions
/// have the same signature requirements.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Proto_FileServiceProvider: CallHandlerProvider {
  var interceptors: Proto_FileServiceServerInterceptorFactoryProtocol? { get }

  ///*
  /// Create a file in HFS.
  func createFile(request: Proto_Transaction, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_TransactionResponse>

  ///*
  /// Update a file in HFS.
  func updateFile(request: Proto_Transaction, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_TransactionResponse>

  ///*
  /// Delete a file in HFS.<br/>
  /// The content of a file deleted in this manner is completely removed
  /// from network state, but the file metadata remains.
  func deleteFile(request: Proto_Transaction, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_TransactionResponse>

  ///*
  /// Append content to a file in HFS.
  func appendContent(request: Proto_Transaction, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_TransactionResponse>

  ///*
  /// Retrieve the content of a file in HFS.<br/>
  /// Note that this query retrieves _only_ the file content, not any of
  /// the metadata for the file.
  func getFileContent(request: Proto_Query, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_Response>

  ///*
  /// Retrieve the metadata for a file in HFS.<br/>
  /// Note that this query does not retrieve the file _content_.
  func getFileInfo(request: Proto_Query, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_Response>

  ///*
  /// Delete a "regular" file without "owner" authorization.<br/>
  /// This transaction _does not_ require signatures for the keys in
  /// the file `keys` list, but must be signed by a "privileged" account.
  /// <p>
  /// This transaction SHALL NOT accept a file identifier for
  /// a "system" file.<br/>
  /// This transaction SHALL NOT remove the _content_ of the file from state.
  /// This permits use of the `systemUndelete` to reverse this action if
  /// performed in error.
  /// <p>
  /// This is a privileged transaction, and only accounts 2-59 are permitted
  /// to call this function, by default. The actual restriction is in the
  /// `api-permission.properties` file in the consensus node configuration.
  func systemDelete(request: Proto_Transaction, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_TransactionResponse>

  ///*
  /// Undelete a "regular" file.
  /// This transaction must be signed by a "privileged" account.<br/>
  /// <p>
  /// This transaction SHALL NOT accept a file identifier for
  /// a "system" file.<br/>
  /// The file identified SHOULD have been previously deleted.<br/>
  /// This transaction SHALL NOT recover the _content_ of a file unless that
  /// file was deleted with a `systemDelete` transaction. The _content_ of a
  /// file deleted with a `fileDelete` transaction is not retained in state.
  /// <p>
  /// This is a privileged transaction, and only accounts 2-60 are permitted
  /// to call this function, by default. The actual restriction is in the
  /// `api-permission.properties` file in the consensus node configuration.
  func systemUndelete(request: Proto_Transaction, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_TransactionResponse>
}

extension Proto_FileServiceProvider {
  public var serviceName: Substring {
    return Proto_FileServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "createFile":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Transaction>(),
        responseSerializer: ProtobufSerializer<Proto_TransactionResponse>(),
        interceptors: self.interceptors?.makecreateFileInterceptors() ?? [],
        userFunction: self.createFile(request:context:)
      )

    case "updateFile":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Transaction>(),
        responseSerializer: ProtobufSerializer<Proto_TransactionResponse>(),
        interceptors: self.interceptors?.makeupdateFileInterceptors() ?? [],
        userFunction: self.updateFile(request:context:)
      )

    case "deleteFile":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Transaction>(),
        responseSerializer: ProtobufSerializer<Proto_TransactionResponse>(),
        interceptors: self.interceptors?.makedeleteFileInterceptors() ?? [],
        userFunction: self.deleteFile(request:context:)
      )

    case "appendContent":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Transaction>(),
        responseSerializer: ProtobufSerializer<Proto_TransactionResponse>(),
        interceptors: self.interceptors?.makeappendContentInterceptors() ?? [],
        userFunction: self.appendContent(request:context:)
      )

    case "getFileContent":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Query>(),
        responseSerializer: ProtobufSerializer<Proto_Response>(),
        interceptors: self.interceptors?.makegetFileContentInterceptors() ?? [],
        userFunction: self.getFileContent(request:context:)
      )

    case "getFileInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Query>(),
        responseSerializer: ProtobufSerializer<Proto_Response>(),
        interceptors: self.interceptors?.makegetFileInfoInterceptors() ?? [],
        userFunction: self.getFileInfo(request:context:)
      )

    case "systemDelete":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Transaction>(),
        responseSerializer: ProtobufSerializer<Proto_TransactionResponse>(),
        interceptors: self.interceptors?.makesystemDeleteInterceptors() ?? [],
        userFunction: self.systemDelete(request:context:)
      )

    case "systemUndelete":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Transaction>(),
        responseSerializer: ProtobufSerializer<Proto_TransactionResponse>(),
        interceptors: self.interceptors?.makesystemUndeleteInterceptors() ?? [],
        userFunction: self.systemUndelete(request:context:)
      )

    default:
      return nil
    }
  }
}

///*
/// Service gRPC definitions for the Hedera File Service (HFS).
///
/// #### Signature Requirements
/// The HFS manages file authorization differently, depending on type of file
/// transaction, and this can be surprising.<br/>
/// The core element of file authorization is the `keys` field,
/// which is a `KeyList`; a list of individual `Key` messages, each of which
/// may represent a simple or complex key.<br/>
/// The file service transactions treat this list differently.<br/>
/// A `fileCreate`, `fileAppend`, or `fileUpdate` MUST have a valid signature
/// from _each_ key in the list.<br/>
/// A `fileDelete` MUST have a valid signature from _at least one_ key in
/// the list. This is different, and allows a file "owned" by many entities
/// to be deleted by any one of those entities. A deleted file cannot be
/// restored, so it is important to consider this when assigning keys for
/// a file.<br/>
/// If any of the keys in a `KeyList` are complex, the full requirements of
/// each complex key must be met to count as a "valid signature" for that key.
/// A complex key structure (i.e. a `ThresholdKey`, or `KeyList`, possibly
/// including additional `ThresholdKey` or `KeyList` descendants) may be
/// assigned as the sole entry in a file `keys` field to ensure all transactions
/// have the same signature requirements.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Proto_FileServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Proto_FileServiceServerInterceptorFactoryProtocol? { get }

  ///*
  /// Create a file in HFS.
  func createFile(
    request: Proto_Transaction,
    context: GRPCAsyncServerCallContext
  ) async throws -> Proto_TransactionResponse

  ///*
  /// Update a file in HFS.
  func updateFile(
    request: Proto_Transaction,
    context: GRPCAsyncServerCallContext
  ) async throws -> Proto_TransactionResponse

  ///*
  /// Delete a file in HFS.<br/>
  /// The content of a file deleted in this manner is completely removed
  /// from network state, but the file metadata remains.
  func deleteFile(
    request: Proto_Transaction,
    context: GRPCAsyncServerCallContext
  ) async throws -> Proto_TransactionResponse

  ///*
  /// Append content to a file in HFS.
  func appendContent(
    request: Proto_Transaction,
    context: GRPCAsyncServerCallContext
  ) async throws -> Proto_TransactionResponse

  ///*
  /// Retrieve the content of a file in HFS.<br/>
  /// Note that this query retrieves _only_ the file content, not any of
  /// the metadata for the file.
  func getFileContent(
    request: Proto_Query,
    context: GRPCAsyncServerCallContext
  ) async throws -> Proto_Response

  ///*
  /// Retrieve the metadata for a file in HFS.<br/>
  /// Note that this query does not retrieve the file _content_.
  func getFileInfo(
    request: Proto_Query,
    context: GRPCAsyncServerCallContext
  ) async throws -> Proto_Response

  ///*
  /// Delete a "regular" file without "owner" authorization.<br/>
  /// This transaction _does not_ require signatures for the keys in
  /// the file `keys` list, but must be signed by a "privileged" account.
  /// <p>
  /// This transaction SHALL NOT accept a file identifier for
  /// a "system" file.<br/>
  /// This transaction SHALL NOT remove the _content_ of the file from state.
  /// This permits use of the `systemUndelete` to reverse this action if
  /// performed in error.
  /// <p>
  /// This is a privileged transaction, and only accounts 2-59 are permitted
  /// to call this function, by default. The actual restriction is in the
  /// `api-permission.properties` file in the consensus node configuration.
  func systemDelete(
    request: Proto_Transaction,
    context: GRPCAsyncServerCallContext
  ) async throws -> Proto_TransactionResponse

  ///*
  /// Undelete a "regular" file.
  /// This transaction must be signed by a "privileged" account.<br/>
  /// <p>
  /// This transaction SHALL NOT accept a file identifier for
  /// a "system" file.<br/>
  /// The file identified SHOULD have been previously deleted.<br/>
  /// This transaction SHALL NOT recover the _content_ of a file unless that
  /// file was deleted with a `systemDelete` transaction. The _content_ of a
  /// file deleted with a `fileDelete` transaction is not retained in state.
  /// <p>
  /// This is a privileged transaction, and only accounts 2-60 are permitted
  /// to call this function, by default. The actual restriction is in the
  /// `api-permission.properties` file in the consensus node configuration.
  func systemUndelete(
    request: Proto_Transaction,
    context: GRPCAsyncServerCallContext
  ) async throws -> Proto_TransactionResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Proto_FileServiceAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Proto_FileServiceServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Proto_FileServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Proto_FileServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "createFile":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Transaction>(),
        responseSerializer: ProtobufSerializer<Proto_TransactionResponse>(),
        interceptors: self.interceptors?.makecreateFileInterceptors() ?? [],
        wrapping: { try await self.createFile(request: $0, context: $1) }
      )

    case "updateFile":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Transaction>(),
        responseSerializer: ProtobufSerializer<Proto_TransactionResponse>(),
        interceptors: self.interceptors?.makeupdateFileInterceptors() ?? [],
        wrapping: { try await self.updateFile(request: $0, context: $1) }
      )

    case "deleteFile":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Transaction>(),
        responseSerializer: ProtobufSerializer<Proto_TransactionResponse>(),
        interceptors: self.interceptors?.makedeleteFileInterceptors() ?? [],
        wrapping: { try await self.deleteFile(request: $0, context: $1) }
      )

    case "appendContent":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Transaction>(),
        responseSerializer: ProtobufSerializer<Proto_TransactionResponse>(),
        interceptors: self.interceptors?.makeappendContentInterceptors() ?? [],
        wrapping: { try await self.appendContent(request: $0, context: $1) }
      )

    case "getFileContent":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Query>(),
        responseSerializer: ProtobufSerializer<Proto_Response>(),
        interceptors: self.interceptors?.makegetFileContentInterceptors() ?? [],
        wrapping: { try await self.getFileContent(request: $0, context: $1) }
      )

    case "getFileInfo":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Query>(),
        responseSerializer: ProtobufSerializer<Proto_Response>(),
        interceptors: self.interceptors?.makegetFileInfoInterceptors() ?? [],
        wrapping: { try await self.getFileInfo(request: $0, context: $1) }
      )

    case "systemDelete":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Transaction>(),
        responseSerializer: ProtobufSerializer<Proto_TransactionResponse>(),
        interceptors: self.interceptors?.makesystemDeleteInterceptors() ?? [],
        wrapping: { try await self.systemDelete(request: $0, context: $1) }
      )

    case "systemUndelete":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Transaction>(),
        responseSerializer: ProtobufSerializer<Proto_TransactionResponse>(),
        interceptors: self.interceptors?.makesystemUndeleteInterceptors() ?? [],
        wrapping: { try await self.systemUndelete(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

public protocol Proto_FileServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'createFile'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makecreateFileInterceptors() -> [ServerInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when handling 'updateFile'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeupdateFileInterceptors() -> [ServerInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when handling 'deleteFile'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makedeleteFileInterceptors() -> [ServerInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when handling 'appendContent'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeappendContentInterceptors() -> [ServerInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when handling 'getFileContent'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makegetFileContentInterceptors() -> [ServerInterceptor<Proto_Query, Proto_Response>]

  /// - Returns: Interceptors to use when handling 'getFileInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makegetFileInfoInterceptors() -> [ServerInterceptor<Proto_Query, Proto_Response>]

  /// - Returns: Interceptors to use when handling 'systemDelete'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makesystemDeleteInterceptors() -> [ServerInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when handling 'systemUndelete'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makesystemUndeleteInterceptors() -> [ServerInterceptor<Proto_Transaction, Proto_TransactionResponse>]
}

public enum Proto_FileServiceServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "FileService",
    fullName: "proto.FileService",
    methods: [
      Proto_FileServiceServerMetadata.Methods.createFile,
      Proto_FileServiceServerMetadata.Methods.updateFile,
      Proto_FileServiceServerMetadata.Methods.deleteFile,
      Proto_FileServiceServerMetadata.Methods.appendContent,
      Proto_FileServiceServerMetadata.Methods.getFileContent,
      Proto_FileServiceServerMetadata.Methods.getFileInfo,
      Proto_FileServiceServerMetadata.Methods.systemDelete,
      Proto_FileServiceServerMetadata.Methods.systemUndelete,
    ]
  )

  public enum Methods {
    public static let createFile = GRPCMethodDescriptor(
      name: "createFile",
      path: "/proto.FileService/createFile",
      type: GRPCCallType.unary
    )

    public static let updateFile = GRPCMethodDescriptor(
      name: "updateFile",
      path: "/proto.FileService/updateFile",
      type: GRPCCallType.unary
    )

    public static let deleteFile = GRPCMethodDescriptor(
      name: "deleteFile",
      path: "/proto.FileService/deleteFile",
      type: GRPCCallType.unary
    )

    public static let appendContent = GRPCMethodDescriptor(
      name: "appendContent",
      path: "/proto.FileService/appendContent",
      type: GRPCCallType.unary
    )

    public static let getFileContent = GRPCMethodDescriptor(
      name: "getFileContent",
      path: "/proto.FileService/getFileContent",
      type: GRPCCallType.unary
    )

    public static let getFileInfo = GRPCMethodDescriptor(
      name: "getFileInfo",
      path: "/proto.FileService/getFileInfo",
      type: GRPCCallType.unary
    )

    public static let systemDelete = GRPCMethodDescriptor(
      name: "systemDelete",
      path: "/proto.FileService/systemDelete",
      type: GRPCCallType.unary
    )

    public static let systemUndelete = GRPCMethodDescriptor(
      name: "systemUndelete",
      path: "/proto.FileService/systemUndelete",
      type: GRPCCallType.unary
    )
  }
}
