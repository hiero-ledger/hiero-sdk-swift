// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: services/token_wipe_account.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

///*
/// # Token Wipe Account
/// Administratively burn tokens owned by a single, non-treasury, account.
///
/// ### Keywords
/// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
/// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
/// document are to be interpreted as described in
/// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
/// [RFC8174](https://www.ietf.org/rfc/rfc8174).

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
/// Wipe (administratively burn) tokens held by a non-treasury account.<br/>
/// On success, the requested tokens will be removed from the identified account
/// and the token supply will be reduced by the amount "wiped".
///
/// This transaction MUST be signed by the token `wipe_key`.<br/>
/// The identified token MUST exist, MUST NOT be deleted,
/// and MUST NOT be paused.<br/>
/// The identified token MUST have a valid `Key` set for the `wipe_key` field,
/// and that key MUST NOT be an empty `KeyList`.<br/>
/// The identified account MUST exist, MUST NOT be deleted, MUST be
/// associated to the identified token, MUST NOT be frozen for the identified
/// token, MUST NOT be the token `treasury`, and MUST hold a balance for the
/// token or the specific serial numbers provided.<br/>
/// This transaction SHOULD provide a value for `amount` or `serialNumbers`,
/// but MUST NOT set both fields.
///
/// ### Block Stream Effects
/// The new total supply for the wiped token type SHALL be recorded.
public struct Proto_TokenWipeAccountTransactionBody: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// A token identifier.
  /// <p>
  /// This field is REQUIRED.<br/>
  /// The identified token MUST exist, MUST NOT be paused, MUST NOT be
  /// deleted, and MUST NOT be expired.
  public var token: Proto_TokenID {
    get {return _token ?? Proto_TokenID()}
    set {_token = newValue}
  }
  /// Returns true if `token` has been explicitly set.
  public var hasToken: Bool {return self._token != nil}
  /// Clears the value of `token`. Subsequent reads from it will return its default value.
  public mutating func clearToken() {self._token = nil}

  ///*
  /// An account identifier.<br/>
  /// This identifies the account from which tokens will be wiped.
  /// <p>
  /// This field is REQUIRED.<br/>
  /// The identified account MUST NOT be deleted or expired.<br/>
  /// If the identified token `kyc_key` is set to a valid key, the
  /// identified account MUST have "KYC" granted.<br/>
  /// The identified account MUST NOT be the `treasury` account for the
  /// identified token.
  public var account: Proto_AccountID {
    get {return _account ?? Proto_AccountID()}
    set {_account = newValue}
  }
  /// Returns true if `account` has been explicitly set.
  public var hasAccount: Bool {return self._account != nil}
  /// Clears the value of `account`. Subsequent reads from it will return its default value.
  public mutating func clearAccount() {self._account = nil}

  ///*
  /// An amount of fungible/common tokens to wipe.
  /// <p>
  /// If the identified token is a non-fungible/unique token type,
  /// this value MUST be exactly zero(`0`).<br/>
  /// If the identified token type is fungible/common:
  /// <ul>
  ///   <li>This value SHALL be specified in units of the smallest
  ///       denomination possible for the identified token
  ///       (<tt>10<sup>-decimals</sup></tt> whole tokens).</li>
  ///   <li>This value MUST be strictly less than `Long.MAX_VALUE`.</li>
  ///   <li>This value MUST be less than or equal to the current total
  ///       supply for the identified token.</li>
  ///   <li>This value MUST be less than or equal to the current balance
  ///       held by the identified account.</li>
  ///   <li>This value MAY be zero(`0`).</li>
  /// </ul>
  public var amount: UInt64 = 0

  ///*
  /// A list of serial numbers to wipe.<br/>
  /// The non-fungible/unique tokens with these serial numbers will be
  /// destroyed and cannot be recovered or reused.
  /// <p>
  /// If the identified token type is a fungible/common type, this
  /// list MUST be empty.<br/>
  /// If the identified token type is non-fungible/unique:
  /// <ul>
  ///   <li>This list MUST contain at least one entry if the identified token
  ///       type is non-fungible/unique.>/li>
  ///   <li>This list MUST NOT contain more entries than the current total
  ///       supply for the identified token.</li>
  ///   <li>Every entry in this list MUST be a valid serial number for the
  ///       identified token (i.e. "collection").</li>
  ///   <li>Every entry in this list MUST be owned by the
  ///       identified account</li>
  ///   <li></li>
  /// </ul>
  /// This list MUST NOT contain more entries than the network configuration
  /// value for batch size limit, typically ten(`10`).
  public var serialNumbers: [Int64] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _token: Proto_TokenID? = nil
  fileprivate var _account: Proto_AccountID? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "proto"

extension Proto_TokenWipeAccountTransactionBody: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TokenWipeAccountTransactionBody"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
    2: .same(proto: "account"),
    3: .same(proto: "amount"),
    4: .same(proto: "serialNumbers"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._token) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._account) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.amount) }()
      case 4: try { try decoder.decodeRepeatedInt64Field(value: &self.serialNumbers) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._token {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._account {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if self.amount != 0 {
      try visitor.visitSingularUInt64Field(value: self.amount, fieldNumber: 3)
    }
    if !self.serialNumbers.isEmpty {
      try visitor.visitPackedInt64Field(value: self.serialNumbers, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_TokenWipeAccountTransactionBody, rhs: Proto_TokenWipeAccountTransactionBody) -> Bool {
    if lhs._token != rhs._token {return false}
    if lhs._account != rhs._account {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.serialNumbers != rhs.serialNumbers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
