///*
/// # Consensus Service API
/// GRPC service definitions for the Hedera Consensus Service (HCS).
///
/// ### Keywords
/// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
/// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
/// document are to be interpreted as described in
/// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
/// [RFC8174](https://www.ietf.org/rfc/rfc8174).

// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: services/consensus_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf

// MARK: - proto.ConsensusService

/// Namespace containing generated types for the "proto.ConsensusService" service.
public enum Proto_ConsensusService {
    /// Service descriptor for the "proto.ConsensusService" service.
    public static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.ConsensusService")
    /// Namespace for method metadata.
    public enum Method {
        /// Namespace for "createTopic" metadata.
        public enum createTopic {
            /// Request type for "createTopic".
            public typealias Input = Proto_Transaction
            /// Response type for "createTopic".
            public typealias Output = Proto_TransactionResponse
            /// Descriptor for "createTopic".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.ConsensusService"),
                method: "createTopic"
            )
        }
        /// Namespace for "updateTopic" metadata.
        public enum updateTopic {
            /// Request type for "updateTopic".
            public typealias Input = Proto_Transaction
            /// Response type for "updateTopic".
            public typealias Output = Proto_TransactionResponse
            /// Descriptor for "updateTopic".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.ConsensusService"),
                method: "updateTopic"
            )
        }
        /// Namespace for "deleteTopic" metadata.
        public enum deleteTopic {
            /// Request type for "deleteTopic".
            public typealias Input = Proto_Transaction
            /// Response type for "deleteTopic".
            public typealias Output = Proto_TransactionResponse
            /// Descriptor for "deleteTopic".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.ConsensusService"),
                method: "deleteTopic"
            )
        }
        /// Namespace for "submitMessage" metadata.
        public enum submitMessage {
            /// Request type for "submitMessage".
            public typealias Input = Proto_Transaction
            /// Response type for "submitMessage".
            public typealias Output = Proto_TransactionResponse
            /// Descriptor for "submitMessage".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.ConsensusService"),
                method: "submitMessage"
            )
        }
        /// Namespace for "getTopicInfo" metadata.
        public enum getTopicInfo {
            /// Request type for "getTopicInfo".
            public typealias Input = Proto_Query
            /// Response type for "getTopicInfo".
            public typealias Output = Proto_Response
            /// Descriptor for "getTopicInfo".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.ConsensusService"),
                method: "getTopicInfo"
            )
        }
        /// Descriptors for all methods in the "proto.ConsensusService" service.
        public static let descriptors: [GRPCCore.MethodDescriptor] = [
            createTopic.descriptor,
            updateTopic.descriptor,
            deleteTopic.descriptor,
            submitMessage.descriptor,
            getTopicInfo.descriptor
        ]
    }
}

extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "proto.ConsensusService" service.
    public static let proto_ConsensusService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "proto.ConsensusService")
}

// MARK: proto.ConsensusService (server)

extension Proto_ConsensusService {
    /// Streaming variant of the service protocol for the "proto.ConsensusService" service.
    ///
    /// This protocol is the lowest-level of the service protocols generated for this service
    /// giving you the most flexibility over the implementation of your service. This comes at
    /// the cost of more verbose and less strict APIs. Each RPC requires you to implement it in
    /// terms of a request stream and response stream. Where only a single request or response
    /// message is expected, you are responsible for enforcing this invariant is maintained.
    ///
    /// Where possible, prefer using the stricter, less-verbose ``ServiceProtocol``
    /// or ``SimpleServiceProtocol`` instead.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > The Hedera Consensus Service (HCS) provides the ability for a Hashgraph to
    /// > provide aBFT consensus as to the order and validity of messages submitted to
    /// > a *topic*, as well as a *consensus timestamp* for those messages.
    public protocol StreamingServiceProtocol: GRPCCore.RegistrableRPCService {
        /// Handle the "createTopic" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Create an HCS topic.
        /// > <p>
        /// > On success, the resulting TransactionReceipt SHALL contain the newly
        /// > created TopicId.<br/>
        /// > If the `adminKey` is set on the topic, this transaction MUST be signed
        /// > by that key.<br/>
        /// > If the `adminKey` is _not_ set on the topic, this transaction MUST NOT
        /// > set an `autoRenewAccount`. The new topic will be immutable and must be
        /// > renewed manually.<br/>
        /// > If the `autoRenewAccount` is set on the topic, this transaction MUST be
        /// > signed by that account.<br/>
        /// > <p>
        /// > The request body MUST be a
        /// > [ConsensusCreateTopicTransactionBody](#proto.ConsensusCreateTopicTransactionBody)
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Transaction` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_TransactionResponse` messages.
        func createTopic(
            request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse>

        /// Handle the "updateTopic" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Update an HCS topic.
        /// > <p>
        /// > If the `adminKey` is not set on the topic, this transaction MUST extend
        /// > the `expirationTime` and MUST NOT modify any other field.<br/>
        /// > If the `adminKey` is set on the topic, this transaction MUST be signed
        /// > by that key.<br/>
        /// > If this transaction sets a new `adminKey`, this transaction MUST be
        /// > signed by <strong>_both_</strong> keys, the pre-update `adminKey` and
        /// > the post-update `adminKey`.<br/>
        /// > If this transaction sets a new, non-null, `autoRenewAccount`, the newly
        /// > set account MUST sign this transaction.<br/>
        /// > <p>
        /// > The request body MUST be a
        /// > [ConsensusUpdateTopicTransactionBody](#proto.ConsensusUpdateTopicTransactionBody)
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Transaction` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_TransactionResponse` messages.
        func updateTopic(
            request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse>

        /// Handle the "deleteTopic" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Delete an HCS topic.
        /// > <p>
        /// > If this transaction succeeds, all subsequent transactions referencing
        /// > the deleted topic SHALL fail.<br/>
        /// > The `adminKey` MUST be set on the topic and this transaction MUST be
        /// > signed by that key.<br/>
        /// > If the `adminKey` is not set on the topic, this transaction SHALL fail
        /// > with a response code of `UNAUTHORIZED`. A topic without an `adminKey`
        /// > cannot be deleted, but MAY expire.<br/>
        /// > <p>
        /// > The request body MUST be a
        /// > [ConsensusDeleteTopicTransactionBody](#proto.ConsensusDeleteTopicTransactionBody)
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Transaction` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_TransactionResponse` messages.
        func deleteTopic(
            request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse>

        /// Handle the "submitMessage" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Submit a message to an HCS topic.
        /// > <p>
        /// > Valid and authorized messages on valid topics will be ordered by the
        /// > consensus service, published in the block stream, and available to all
        /// > subscribers on this topic via the mirror nodes.<br/>
        /// > If this transaction succeeds the resulting TransactionReceipt SHALL
        /// > contain the latest topicSequenceNumber and topicRunningHash for the
        /// > topic.<br/>
        /// > If the topic has a `submitKey` then that key MUST sign this
        /// > transaction.<br/>
        /// > <p>
        /// > The request body MUST be a
        /// > [ConsensusSubmitMessageTransactionBody](#proto.ConsensusSubmitMessageTransactionBody)
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Transaction` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_TransactionResponse` messages.
        func submitMessage(
            request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse>

        /// Handle the "getTopicInfo" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve the latest state of a topic. This method is unrestricted and
        /// > allowed on any topic by any payer account.
        /// > <p>
        /// > The request body MUST be a
        /// > [ConsensusGetTopicInfoQuery](#proto.ConsensusGetTopicInfoQuery)<br/>
        /// > The response body SHALL be a
        /// > [ConsensusGetTopicInfoResponse](#proto.ConsensusGetTopicInfoResponse)
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Proto_Query` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Proto_Response` messages.
        func getTopicInfo(
            request: GRPCCore.StreamingServerRequest<Proto_Query>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Proto_Response>
    }

    /// Service protocol for the "proto.ConsensusService" service.
    ///
    /// This protocol is higher level than ``StreamingServiceProtocol`` but lower level than
    /// the ``SimpleServiceProtocol``, it provides access to request and response metadata and
    /// trailing response metadata. If you don't need these then consider using
    /// the ``SimpleServiceProtocol``. If you need fine grained control over your RPCs then
    /// use ``StreamingServiceProtocol``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > The Hedera Consensus Service (HCS) provides the ability for a Hashgraph to
    /// > provide aBFT consensus as to the order and validity of messages submitted to
    /// > a *topic*, as well as a *consensus timestamp* for those messages.
    public protocol ServiceProtocol: Proto_ConsensusService.StreamingServiceProtocol {
        /// Handle the "createTopic" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Create an HCS topic.
        /// > <p>
        /// > On success, the resulting TransactionReceipt SHALL contain the newly
        /// > created TopicId.<br/>
        /// > If the `adminKey` is set on the topic, this transaction MUST be signed
        /// > by that key.<br/>
        /// > If the `adminKey` is _not_ set on the topic, this transaction MUST NOT
        /// > set an `autoRenewAccount`. The new topic will be immutable and must be
        /// > renewed manually.<br/>
        /// > If the `autoRenewAccount` is set on the topic, this transaction MUST be
        /// > signed by that account.<br/>
        /// > <p>
        /// > The request body MUST be a
        /// > [ConsensusCreateTopicTransactionBody](#proto.ConsensusCreateTopicTransactionBody)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_TransactionResponse` message.
        func createTopic(
            request: GRPCCore.ServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse>

        /// Handle the "updateTopic" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Update an HCS topic.
        /// > <p>
        /// > If the `adminKey` is not set on the topic, this transaction MUST extend
        /// > the `expirationTime` and MUST NOT modify any other field.<br/>
        /// > If the `adminKey` is set on the topic, this transaction MUST be signed
        /// > by that key.<br/>
        /// > If this transaction sets a new `adminKey`, this transaction MUST be
        /// > signed by <strong>_both_</strong> keys, the pre-update `adminKey` and
        /// > the post-update `adminKey`.<br/>
        /// > If this transaction sets a new, non-null, `autoRenewAccount`, the newly
        /// > set account MUST sign this transaction.<br/>
        /// > <p>
        /// > The request body MUST be a
        /// > [ConsensusUpdateTopicTransactionBody](#proto.ConsensusUpdateTopicTransactionBody)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_TransactionResponse` message.
        func updateTopic(
            request: GRPCCore.ServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse>

        /// Handle the "deleteTopic" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Delete an HCS topic.
        /// > <p>
        /// > If this transaction succeeds, all subsequent transactions referencing
        /// > the deleted topic SHALL fail.<br/>
        /// > The `adminKey` MUST be set on the topic and this transaction MUST be
        /// > signed by that key.<br/>
        /// > If the `adminKey` is not set on the topic, this transaction SHALL fail
        /// > with a response code of `UNAUTHORIZED`. A topic without an `adminKey`
        /// > cannot be deleted, but MAY expire.<br/>
        /// > <p>
        /// > The request body MUST be a
        /// > [ConsensusDeleteTopicTransactionBody](#proto.ConsensusDeleteTopicTransactionBody)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_TransactionResponse` message.
        func deleteTopic(
            request: GRPCCore.ServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse>

        /// Handle the "submitMessage" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Submit a message to an HCS topic.
        /// > <p>
        /// > Valid and authorized messages on valid topics will be ordered by the
        /// > consensus service, published in the block stream, and available to all
        /// > subscribers on this topic via the mirror nodes.<br/>
        /// > If this transaction succeeds the resulting TransactionReceipt SHALL
        /// > contain the latest topicSequenceNumber and topicRunningHash for the
        /// > topic.<br/>
        /// > If the topic has a `submitKey` then that key MUST sign this
        /// > transaction.<br/>
        /// > <p>
        /// > The request body MUST be a
        /// > [ConsensusSubmitMessageTransactionBody](#proto.ConsensusSubmitMessageTransactionBody)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_TransactionResponse` message.
        func submitMessage(
            request: GRPCCore.ServerRequest<Proto_Transaction>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse>

        /// Handle the "getTopicInfo" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve the latest state of a topic. This method is unrestricted and
        /// > allowed on any topic by any payer account.
        /// > <p>
        /// > The request body MUST be a
        /// > [ConsensusGetTopicInfoQuery](#proto.ConsensusGetTopicInfoQuery)<br/>
        /// > The response body SHALL be a
        /// > [ConsensusGetTopicInfoResponse](#proto.ConsensusGetTopicInfoResponse)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Query` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Proto_Response` message.
        func getTopicInfo(
            request: GRPCCore.ServerRequest<Proto_Query>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Proto_Response>
    }

    /// Simple service protocol for the "proto.ConsensusService" service.
    ///
    /// This is the highest level protocol for the service. The API is the easiest to use but
    /// doesn't provide access to request or response metadata. If you need access to these
    /// then use ``ServiceProtocol`` instead.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > The Hedera Consensus Service (HCS) provides the ability for a Hashgraph to
    /// > provide aBFT consensus as to the order and validity of messages submitted to
    /// > a *topic*, as well as a *consensus timestamp* for those messages.
    public protocol SimpleServiceProtocol: Proto_ConsensusService.ServiceProtocol {
        /// Handle the "createTopic" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Create an HCS topic.
        /// > <p>
        /// > On success, the resulting TransactionReceipt SHALL contain the newly
        /// > created TopicId.<br/>
        /// > If the `adminKey` is set on the topic, this transaction MUST be signed
        /// > by that key.<br/>
        /// > If the `adminKey` is _not_ set on the topic, this transaction MUST NOT
        /// > set an `autoRenewAccount`. The new topic will be immutable and must be
        /// > renewed manually.<br/>
        /// > If the `autoRenewAccount` is set on the topic, this transaction MUST be
        /// > signed by that account.<br/>
        /// > <p>
        /// > The request body MUST be a
        /// > [ConsensusCreateTopicTransactionBody](#proto.ConsensusCreateTopicTransactionBody)
        ///
        /// - Parameters:
        ///   - request: A `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_TransactionResponse` to respond with.
        func createTopic(
            request: Proto_Transaction,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_TransactionResponse

        /// Handle the "updateTopic" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Update an HCS topic.
        /// > <p>
        /// > If the `adminKey` is not set on the topic, this transaction MUST extend
        /// > the `expirationTime` and MUST NOT modify any other field.<br/>
        /// > If the `adminKey` is set on the topic, this transaction MUST be signed
        /// > by that key.<br/>
        /// > If this transaction sets a new `adminKey`, this transaction MUST be
        /// > signed by <strong>_both_</strong> keys, the pre-update `adminKey` and
        /// > the post-update `adminKey`.<br/>
        /// > If this transaction sets a new, non-null, `autoRenewAccount`, the newly
        /// > set account MUST sign this transaction.<br/>
        /// > <p>
        /// > The request body MUST be a
        /// > [ConsensusUpdateTopicTransactionBody](#proto.ConsensusUpdateTopicTransactionBody)
        ///
        /// - Parameters:
        ///   - request: A `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_TransactionResponse` to respond with.
        func updateTopic(
            request: Proto_Transaction,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_TransactionResponse

        /// Handle the "deleteTopic" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Delete an HCS topic.
        /// > <p>
        /// > If this transaction succeeds, all subsequent transactions referencing
        /// > the deleted topic SHALL fail.<br/>
        /// > The `adminKey` MUST be set on the topic and this transaction MUST be
        /// > signed by that key.<br/>
        /// > If the `adminKey` is not set on the topic, this transaction SHALL fail
        /// > with a response code of `UNAUTHORIZED`. A topic without an `adminKey`
        /// > cannot be deleted, but MAY expire.<br/>
        /// > <p>
        /// > The request body MUST be a
        /// > [ConsensusDeleteTopicTransactionBody](#proto.ConsensusDeleteTopicTransactionBody)
        ///
        /// - Parameters:
        ///   - request: A `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_TransactionResponse` to respond with.
        func deleteTopic(
            request: Proto_Transaction,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_TransactionResponse

        /// Handle the "submitMessage" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Submit a message to an HCS topic.
        /// > <p>
        /// > Valid and authorized messages on valid topics will be ordered by the
        /// > consensus service, published in the block stream, and available to all
        /// > subscribers on this topic via the mirror nodes.<br/>
        /// > If this transaction succeeds the resulting TransactionReceipt SHALL
        /// > contain the latest topicSequenceNumber and topicRunningHash for the
        /// > topic.<br/>
        /// > If the topic has a `submitKey` then that key MUST sign this
        /// > transaction.<br/>
        /// > <p>
        /// > The request body MUST be a
        /// > [ConsensusSubmitMessageTransactionBody](#proto.ConsensusSubmitMessageTransactionBody)
        ///
        /// - Parameters:
        ///   - request: A `Proto_Transaction` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_TransactionResponse` to respond with.
        func submitMessage(
            request: Proto_Transaction,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_TransactionResponse

        /// Handle the "getTopicInfo" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve the latest state of a topic. This method is unrestricted and
        /// > allowed on any topic by any payer account.
        /// > <p>
        /// > The request body MUST be a
        /// > [ConsensusGetTopicInfoQuery](#proto.ConsensusGetTopicInfoQuery)<br/>
        /// > The response body SHALL be a
        /// > [ConsensusGetTopicInfoResponse](#proto.ConsensusGetTopicInfoResponse)
        ///
        /// - Parameters:
        ///   - request: A `Proto_Query` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Proto_Response` to respond with.
        func getTopicInfo(
            request: Proto_Query,
            context: GRPCCore.ServerContext
        ) async throws -> Proto_Response
    }
}

// Default implementation of 'registerMethods(with:)'.
extension Proto_ConsensusService.StreamingServiceProtocol {
    public func registerMethods<Transport>(with router: inout GRPCCore.RPCRouter<Transport>) where Transport: GRPCCore.ServerTransport {
        router.registerHandler(
            forMethod: Proto_ConsensusService.Method.createTopic.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Transaction>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_TransactionResponse>(),
            handler: { request, context in
                try await self.createTopic(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_ConsensusService.Method.updateTopic.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Transaction>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_TransactionResponse>(),
            handler: { request, context in
                try await self.updateTopic(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_ConsensusService.Method.deleteTopic.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Transaction>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_TransactionResponse>(),
            handler: { request, context in
                try await self.deleteTopic(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_ConsensusService.Method.submitMessage.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Transaction>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_TransactionResponse>(),
            handler: { request, context in
                try await self.submitMessage(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Proto_ConsensusService.Method.getTopicInfo.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Query>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Response>(),
            handler: { request, context in
                try await self.getTopicInfo(
                    request: request,
                    context: context
                )
            }
        )
    }
}

// Default implementation of streaming methods from 'StreamingServiceProtocol'.
extension Proto_ConsensusService.ServiceProtocol {
    public func createTopic(
        request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse> {
        let response = try await self.createTopic(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func updateTopic(
        request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse> {
        let response = try await self.updateTopic(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func deleteTopic(
        request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse> {
        let response = try await self.deleteTopic(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func submitMessage(
        request: GRPCCore.StreamingServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_TransactionResponse> {
        let response = try await self.submitMessage(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func getTopicInfo(
        request: GRPCCore.StreamingServerRequest<Proto_Query>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Proto_Response> {
        let response = try await self.getTopicInfo(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }
}

// Default implementation of methods from 'ServiceProtocol'.
extension Proto_ConsensusService.SimpleServiceProtocol {
    public func createTopic(
        request: GRPCCore.ServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse> {
        return GRPCCore.ServerResponse<Proto_TransactionResponse>(
            message: try await self.createTopic(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func updateTopic(
        request: GRPCCore.ServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse> {
        return GRPCCore.ServerResponse<Proto_TransactionResponse>(
            message: try await self.updateTopic(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func deleteTopic(
        request: GRPCCore.ServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse> {
        return GRPCCore.ServerResponse<Proto_TransactionResponse>(
            message: try await self.deleteTopic(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func submitMessage(
        request: GRPCCore.ServerRequest<Proto_Transaction>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_TransactionResponse> {
        return GRPCCore.ServerResponse<Proto_TransactionResponse>(
            message: try await self.submitMessage(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func getTopicInfo(
        request: GRPCCore.ServerRequest<Proto_Query>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Proto_Response> {
        return GRPCCore.ServerResponse<Proto_Response>(
            message: try await self.getTopicInfo(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }
}

// MARK: proto.ConsensusService (client)

extension Proto_ConsensusService {
    /// Generated client protocol for the "proto.ConsensusService" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > The Hedera Consensus Service (HCS) provides the ability for a Hashgraph to
    /// > provide aBFT consensus as to the order and validity of messages submitted to
    /// > a *topic*, as well as a *consensus timestamp* for those messages.
    public protocol ClientProtocol: Sendable {
        /// Call the "createTopic" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Create an HCS topic.
        /// > <p>
        /// > On success, the resulting TransactionReceipt SHALL contain the newly
        /// > created TopicId.<br/>
        /// > If the `adminKey` is set on the topic, this transaction MUST be signed
        /// > by that key.<br/>
        /// > If the `adminKey` is _not_ set on the topic, this transaction MUST NOT
        /// > set an `autoRenewAccount`. The new topic will be immutable and must be
        /// > renewed manually.<br/>
        /// > If the `autoRenewAccount` is set on the topic, this transaction MUST be
        /// > signed by that account.<br/>
        /// > <p>
        /// > The request body MUST be a
        /// > [ConsensusCreateTopicTransactionBody](#proto.ConsensusCreateTopicTransactionBody)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func createTopic<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "updateTopic" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Update an HCS topic.
        /// > <p>
        /// > If the `adminKey` is not set on the topic, this transaction MUST extend
        /// > the `expirationTime` and MUST NOT modify any other field.<br/>
        /// > If the `adminKey` is set on the topic, this transaction MUST be signed
        /// > by that key.<br/>
        /// > If this transaction sets a new `adminKey`, this transaction MUST be
        /// > signed by <strong>_both_</strong> keys, the pre-update `adminKey` and
        /// > the post-update `adminKey`.<br/>
        /// > If this transaction sets a new, non-null, `autoRenewAccount`, the newly
        /// > set account MUST sign this transaction.<br/>
        /// > <p>
        /// > The request body MUST be a
        /// > [ConsensusUpdateTopicTransactionBody](#proto.ConsensusUpdateTopicTransactionBody)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func updateTopic<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "deleteTopic" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Delete an HCS topic.
        /// > <p>
        /// > If this transaction succeeds, all subsequent transactions referencing
        /// > the deleted topic SHALL fail.<br/>
        /// > The `adminKey` MUST be set on the topic and this transaction MUST be
        /// > signed by that key.<br/>
        /// > If the `adminKey` is not set on the topic, this transaction SHALL fail
        /// > with a response code of `UNAUTHORIZED`. A topic without an `adminKey`
        /// > cannot be deleted, but MAY expire.<br/>
        /// > <p>
        /// > The request body MUST be a
        /// > [ConsensusDeleteTopicTransactionBody](#proto.ConsensusDeleteTopicTransactionBody)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteTopic<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "submitMessage" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Submit a message to an HCS topic.
        /// > <p>
        /// > Valid and authorized messages on valid topics will be ordered by the
        /// > consensus service, published in the block stream, and available to all
        /// > subscribers on this topic via the mirror nodes.<br/>
        /// > If this transaction succeeds the resulting TransactionReceipt SHALL
        /// > contain the latest topicSequenceNumber and topicRunningHash for the
        /// > topic.<br/>
        /// > If the topic has a `submitKey` then that key MUST sign this
        /// > transaction.<br/>
        /// > <p>
        /// > The request body MUST be a
        /// > [ConsensusSubmitMessageTransactionBody](#proto.ConsensusSubmitMessageTransactionBody)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func submitMessage<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "getTopicInfo" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve the latest state of a topic. This method is unrestricted and
        /// > allowed on any topic by any payer account.
        /// > <p>
        /// > The request body MUST be a
        /// > [ConsensusGetTopicInfoQuery](#proto.ConsensusGetTopicInfoQuery)<br/>
        /// > The response body SHALL be a
        /// > [ConsensusGetTopicInfoResponse](#proto.ConsensusGetTopicInfoResponse)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Query` message.
        ///   - serializer: A serializer for `Proto_Query` messages.
        ///   - deserializer: A deserializer for `Proto_Response` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getTopicInfo<Result>(
            request: GRPCCore.ClientRequest<Proto_Query>,
            serializer: some GRPCCore.MessageSerializer<Proto_Query>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_Response>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "proto.ConsensusService" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > The Hedera Consensus Service (HCS) provides the ability for a Hashgraph to
    /// > provide aBFT consensus as to the order and validity of messages submitted to
    /// > a *topic*, as well as a *consensus timestamp* for those messages.
    public struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        public init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "createTopic" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Create an HCS topic.
        /// > <p>
        /// > On success, the resulting TransactionReceipt SHALL contain the newly
        /// > created TopicId.<br/>
        /// > If the `adminKey` is set on the topic, this transaction MUST be signed
        /// > by that key.<br/>
        /// > If the `adminKey` is _not_ set on the topic, this transaction MUST NOT
        /// > set an `autoRenewAccount`. The new topic will be immutable and must be
        /// > renewed manually.<br/>
        /// > If the `autoRenewAccount` is set on the topic, this transaction MUST be
        /// > signed by that account.<br/>
        /// > <p>
        /// > The request body MUST be a
        /// > [ConsensusCreateTopicTransactionBody](#proto.ConsensusCreateTopicTransactionBody)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func createTopic<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_ConsensusService.Method.createTopic.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "updateTopic" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Update an HCS topic.
        /// > <p>
        /// > If the `adminKey` is not set on the topic, this transaction MUST extend
        /// > the `expirationTime` and MUST NOT modify any other field.<br/>
        /// > If the `adminKey` is set on the topic, this transaction MUST be signed
        /// > by that key.<br/>
        /// > If this transaction sets a new `adminKey`, this transaction MUST be
        /// > signed by <strong>_both_</strong> keys, the pre-update `adminKey` and
        /// > the post-update `adminKey`.<br/>
        /// > If this transaction sets a new, non-null, `autoRenewAccount`, the newly
        /// > set account MUST sign this transaction.<br/>
        /// > <p>
        /// > The request body MUST be a
        /// > [ConsensusUpdateTopicTransactionBody](#proto.ConsensusUpdateTopicTransactionBody)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func updateTopic<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_ConsensusService.Method.updateTopic.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "deleteTopic" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Delete an HCS topic.
        /// > <p>
        /// > If this transaction succeeds, all subsequent transactions referencing
        /// > the deleted topic SHALL fail.<br/>
        /// > The `adminKey` MUST be set on the topic and this transaction MUST be
        /// > signed by that key.<br/>
        /// > If the `adminKey` is not set on the topic, this transaction SHALL fail
        /// > with a response code of `UNAUTHORIZED`. A topic without an `adminKey`
        /// > cannot be deleted, but MAY expire.<br/>
        /// > <p>
        /// > The request body MUST be a
        /// > [ConsensusDeleteTopicTransactionBody](#proto.ConsensusDeleteTopicTransactionBody)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func deleteTopic<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_ConsensusService.Method.deleteTopic.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "submitMessage" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Submit a message to an HCS topic.
        /// > <p>
        /// > Valid and authorized messages on valid topics will be ordered by the
        /// > consensus service, published in the block stream, and available to all
        /// > subscribers on this topic via the mirror nodes.<br/>
        /// > If this transaction succeeds the resulting TransactionReceipt SHALL
        /// > contain the latest topicSequenceNumber and topicRunningHash for the
        /// > topic.<br/>
        /// > If the topic has a `submitKey` then that key MUST sign this
        /// > transaction.<br/>
        /// > <p>
        /// > The request body MUST be a
        /// > [ConsensusSubmitMessageTransactionBody](#proto.ConsensusSubmitMessageTransactionBody)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Transaction` message.
        ///   - serializer: A serializer for `Proto_Transaction` messages.
        ///   - deserializer: A deserializer for `Proto_TransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func submitMessage<Result>(
            request: GRPCCore.ClientRequest<Proto_Transaction>,
            serializer: some GRPCCore.MessageSerializer<Proto_Transaction>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_TransactionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_ConsensusService.Method.submitMessage.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "getTopicInfo" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > 
        /// > Retrieve the latest state of a topic. This method is unrestricted and
        /// > allowed on any topic by any payer account.
        /// > <p>
        /// > The request body MUST be a
        /// > [ConsensusGetTopicInfoQuery](#proto.ConsensusGetTopicInfoQuery)<br/>
        /// > The response body SHALL be a
        /// > [ConsensusGetTopicInfoResponse](#proto.ConsensusGetTopicInfoResponse)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Proto_Query` message.
        ///   - serializer: A serializer for `Proto_Query` messages.
        ///   - deserializer: A deserializer for `Proto_Response` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func getTopicInfo<Result>(
            request: GRPCCore.ClientRequest<Proto_Query>,
            serializer: some GRPCCore.MessageSerializer<Proto_Query>,
            deserializer: some GRPCCore.MessageDeserializer<Proto_Response>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Proto_ConsensusService.Method.getTopicInfo.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
extension Proto_ConsensusService.ClientProtocol {
    /// Call the "createTopic" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Create an HCS topic.
    /// > <p>
    /// > On success, the resulting TransactionReceipt SHALL contain the newly
    /// > created TopicId.<br/>
    /// > If the `adminKey` is set on the topic, this transaction MUST be signed
    /// > by that key.<br/>
    /// > If the `adminKey` is _not_ set on the topic, this transaction MUST NOT
    /// > set an `autoRenewAccount`. The new topic will be immutable and must be
    /// > renewed manually.<br/>
    /// > If the `autoRenewAccount` is set on the topic, this transaction MUST be
    /// > signed by that account.<br/>
    /// > <p>
    /// > The request body MUST be a
    /// > [ConsensusCreateTopicTransactionBody](#proto.ConsensusCreateTopicTransactionBody)
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Transaction` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createTopic<Result>(
        request: GRPCCore.ClientRequest<Proto_Transaction>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.createTopic(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Transaction>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_TransactionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "updateTopic" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Update an HCS topic.
    /// > <p>
    /// > If the `adminKey` is not set on the topic, this transaction MUST extend
    /// > the `expirationTime` and MUST NOT modify any other field.<br/>
    /// > If the `adminKey` is set on the topic, this transaction MUST be signed
    /// > by that key.<br/>
    /// > If this transaction sets a new `adminKey`, this transaction MUST be
    /// > signed by <strong>_both_</strong> keys, the pre-update `adminKey` and
    /// > the post-update `adminKey`.<br/>
    /// > If this transaction sets a new, non-null, `autoRenewAccount`, the newly
    /// > set account MUST sign this transaction.<br/>
    /// > <p>
    /// > The request body MUST be a
    /// > [ConsensusUpdateTopicTransactionBody](#proto.ConsensusUpdateTopicTransactionBody)
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Transaction` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func updateTopic<Result>(
        request: GRPCCore.ClientRequest<Proto_Transaction>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.updateTopic(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Transaction>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_TransactionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "deleteTopic" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Delete an HCS topic.
    /// > <p>
    /// > If this transaction succeeds, all subsequent transactions referencing
    /// > the deleted topic SHALL fail.<br/>
    /// > The `adminKey` MUST be set on the topic and this transaction MUST be
    /// > signed by that key.<br/>
    /// > If the `adminKey` is not set on the topic, this transaction SHALL fail
    /// > with a response code of `UNAUTHORIZED`. A topic without an `adminKey`
    /// > cannot be deleted, but MAY expire.<br/>
    /// > <p>
    /// > The request body MUST be a
    /// > [ConsensusDeleteTopicTransactionBody](#proto.ConsensusDeleteTopicTransactionBody)
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Transaction` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteTopic<Result>(
        request: GRPCCore.ClientRequest<Proto_Transaction>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteTopic(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Transaction>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_TransactionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "submitMessage" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Submit a message to an HCS topic.
    /// > <p>
    /// > Valid and authorized messages on valid topics will be ordered by the
    /// > consensus service, published in the block stream, and available to all
    /// > subscribers on this topic via the mirror nodes.<br/>
    /// > If this transaction succeeds the resulting TransactionReceipt SHALL
    /// > contain the latest topicSequenceNumber and topicRunningHash for the
    /// > topic.<br/>
    /// > If the topic has a `submitKey` then that key MUST sign this
    /// > transaction.<br/>
    /// > <p>
    /// > The request body MUST be a
    /// > [ConsensusSubmitMessageTransactionBody](#proto.ConsensusSubmitMessageTransactionBody)
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Transaction` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func submitMessage<Result>(
        request: GRPCCore.ClientRequest<Proto_Transaction>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.submitMessage(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Transaction>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_TransactionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "getTopicInfo" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Retrieve the latest state of a topic. This method is unrestricted and
    /// > allowed on any topic by any payer account.
    /// > <p>
    /// > The request body MUST be a
    /// > [ConsensusGetTopicInfoQuery](#proto.ConsensusGetTopicInfoQuery)<br/>
    /// > The response body SHALL be a
    /// > [ConsensusGetTopicInfoResponse](#proto.ConsensusGetTopicInfoResponse)
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Proto_Query` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getTopicInfo<Result>(
        request: GRPCCore.ClientRequest<Proto_Query>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getTopicInfo(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Proto_Query>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Proto_Response>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
extension Proto_ConsensusService.ClientProtocol {
    /// Call the "createTopic" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Create an HCS topic.
    /// > <p>
    /// > On success, the resulting TransactionReceipt SHALL contain the newly
    /// > created TopicId.<br/>
    /// > If the `adminKey` is set on the topic, this transaction MUST be signed
    /// > by that key.<br/>
    /// > If the `adminKey` is _not_ set on the topic, this transaction MUST NOT
    /// > set an `autoRenewAccount`. The new topic will be immutable and must be
    /// > renewed manually.<br/>
    /// > If the `autoRenewAccount` is set on the topic, this transaction MUST be
    /// > signed by that account.<br/>
    /// > <p>
    /// > The request body MUST be a
    /// > [ConsensusCreateTopicTransactionBody](#proto.ConsensusCreateTopicTransactionBody)
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createTopic<Result>(
        _ message: Proto_Transaction,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Transaction>(
            message: message,
            metadata: metadata
        )
        return try await self.createTopic(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "updateTopic" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Update an HCS topic.
    /// > <p>
    /// > If the `adminKey` is not set on the topic, this transaction MUST extend
    /// > the `expirationTime` and MUST NOT modify any other field.<br/>
    /// > If the `adminKey` is set on the topic, this transaction MUST be signed
    /// > by that key.<br/>
    /// > If this transaction sets a new `adminKey`, this transaction MUST be
    /// > signed by <strong>_both_</strong> keys, the pre-update `adminKey` and
    /// > the post-update `adminKey`.<br/>
    /// > If this transaction sets a new, non-null, `autoRenewAccount`, the newly
    /// > set account MUST sign this transaction.<br/>
    /// > <p>
    /// > The request body MUST be a
    /// > [ConsensusUpdateTopicTransactionBody](#proto.ConsensusUpdateTopicTransactionBody)
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func updateTopic<Result>(
        _ message: Proto_Transaction,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Transaction>(
            message: message,
            metadata: metadata
        )
        return try await self.updateTopic(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "deleteTopic" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Delete an HCS topic.
    /// > <p>
    /// > If this transaction succeeds, all subsequent transactions referencing
    /// > the deleted topic SHALL fail.<br/>
    /// > The `adminKey` MUST be set on the topic and this transaction MUST be
    /// > signed by that key.<br/>
    /// > If the `adminKey` is not set on the topic, this transaction SHALL fail
    /// > with a response code of `UNAUTHORIZED`. A topic without an `adminKey`
    /// > cannot be deleted, but MAY expire.<br/>
    /// > <p>
    /// > The request body MUST be a
    /// > [ConsensusDeleteTopicTransactionBody](#proto.ConsensusDeleteTopicTransactionBody)
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteTopic<Result>(
        _ message: Proto_Transaction,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Transaction>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteTopic(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "submitMessage" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Submit a message to an HCS topic.
    /// > <p>
    /// > Valid and authorized messages on valid topics will be ordered by the
    /// > consensus service, published in the block stream, and available to all
    /// > subscribers on this topic via the mirror nodes.<br/>
    /// > If this transaction succeeds the resulting TransactionReceipt SHALL
    /// > contain the latest topicSequenceNumber and topicRunningHash for the
    /// > topic.<br/>
    /// > If the topic has a `submitKey` then that key MUST sign this
    /// > transaction.<br/>
    /// > <p>
    /// > The request body MUST be a
    /// > [ConsensusSubmitMessageTransactionBody](#proto.ConsensusSubmitMessageTransactionBody)
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func submitMessage<Result>(
        _ message: Proto_Transaction,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_TransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Transaction>(
            message: message,
            metadata: metadata
        )
        return try await self.submitMessage(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "getTopicInfo" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > 
    /// > Retrieve the latest state of a topic. This method is unrestricted and
    /// > allowed on any topic by any payer account.
    /// > <p>
    /// > The request body MUST be a
    /// > [ConsensusGetTopicInfoQuery](#proto.ConsensusGetTopicInfoQuery)<br/>
    /// > The response body SHALL be a
    /// > [ConsensusGetTopicInfoResponse](#proto.ConsensusGetTopicInfoResponse)
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getTopicInfo<Result>(
        _ message: Proto_Query,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Proto_Response>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Proto_Query>(
            message: message,
            metadata: metadata
        )
        return try await self.getTopicInfo(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}