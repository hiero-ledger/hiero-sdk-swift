// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: contract_delete.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

///*
/// # Contract Delete
/// Delete a smart contract, transferring any remaining balance to a
/// designated account.
///
/// ### Keywords
/// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
/// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
/// document are to be interpreted as described in
/// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
/// [RFC8174](https://www.ietf.org/rfc/rfc8174).

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
/// Delete a smart contract, and transfer any remaining HBAR balance to a
/// designated account.
///
/// If this call succeeds then all subsequent calls to that smart contract
/// SHALL execute the `0x0` opcode, as required for EVM equivalence.
///
/// ### Requirements
///  - An account or smart contract MUST be designated to receive all remaining
///    account balances.
///  - The smart contract MUST have an admin key set. If the contract does not
///    have `admin_key` set, then this transaction SHALL fail and response code
///    `MODIFYING_IMMUTABLE_CONTRACT` SHALL be set.
///  - If `admin_key` is, or contains, an empty `KeyList` key, it SHALL be
///    treated the same as an admin key that is not set.
///  - The `Key` set for `admin_key` on the smart contract MUST have a valid
///    signature set on this transaction.
///  - The designated receiving account MAY have `receiver_sig_required` set. If
///    that field is set, the receiver account MUST also sign this transaction.
///  - The field `permanent_removal` MUST NOT be set. That field is reserved for
///    internal system use when purging the smart contract from state. Any user
///    transaction with that field set SHALL be rejected and a response code
///    `PERMANENT_REMOVAL_REQUIRES_SYSTEM_INITIATION` SHALL be set.
///
/// ### Block Stream Effects
/// None
public struct Proto_ContractDeleteTransactionBody: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// The id of the contract to be deleted.
  /// <p>
  /// This field is REQUIRED.
  public var contractID: Proto_ContractID {
    get {return _contractID ?? Proto_ContractID()}
    set {_contractID = newValue}
  }
  /// Returns true if `contractID` has been explicitly set.
  public var hasContractID: Bool {return self._contractID != nil}
  /// Clears the value of `contractID`. Subsequent reads from it will return its default value.
  public mutating func clearContractID() {self._contractID = nil}

  public var obtainers: Proto_ContractDeleteTransactionBody.OneOf_Obtainers? = nil

  ///*
  /// An Account ID recipient.
  /// <p>
  /// This account SHALL receive all HBAR and other tokens still owned by
  /// the contract that is removed.
  public var transferAccountID: Proto_AccountID {
    get {
      if case .transferAccountID(let v)? = obtainers {return v}
      return Proto_AccountID()
    }
    set {obtainers = .transferAccountID(newValue)}
  }

  ///*
  /// A contract ID recipient.
  /// <p>
  /// This contract SHALL receive all HBAR and other tokens still owned by
  /// the contract that is removed.
  public var transferContractID: Proto_ContractID {
    get {
      if case .transferContractID(let v)? = obtainers {return v}
      return Proto_ContractID()
    }
    set {obtainers = .transferContractID(newValue)}
  }

  ///*
  /// A flag indicating that this transaction is "synthetic"; initiated by the
  /// node software.
  /// <p>
  /// The consensus nodes create such "synthetic" transactions to both to
  /// properly manage state changes and to communicate those changes to other
  /// systems via the Block Stream.<br/>
  /// A user-initiated transaction MUST NOT set this flag.
  public var permanentRemoval: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Obtainers: Equatable, Sendable {
    ///*
    /// An Account ID recipient.
    /// <p>
    /// This account SHALL receive all HBAR and other tokens still owned by
    /// the contract that is removed.
    case transferAccountID(Proto_AccountID)
    ///*
    /// A contract ID recipient.
    /// <p>
    /// This contract SHALL receive all HBAR and other tokens still owned by
    /// the contract that is removed.
    case transferContractID(Proto_ContractID)

  }

  public init() {}

  fileprivate var _contractID: Proto_ContractID? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "proto"

extension Proto_ContractDeleteTransactionBody: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ContractDeleteTransactionBody"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contractID"),
    2: .same(proto: "transferAccountID"),
    3: .same(proto: "transferContractID"),
    4: .standard(proto: "permanent_removal"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._contractID) }()
      case 2: try {
        var v: Proto_AccountID?
        var hadOneofValue = false
        if let current = self.obtainers {
          hadOneofValue = true
          if case .transferAccountID(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.obtainers = .transferAccountID(v)
        }
      }()
      case 3: try {
        var v: Proto_ContractID?
        var hadOneofValue = false
        if let current = self.obtainers {
          hadOneofValue = true
          if case .transferContractID(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.obtainers = .transferContractID(v)
        }
      }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.permanentRemoval) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._contractID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    switch self.obtainers {
    case .transferAccountID?: try {
      guard case .transferAccountID(let v)? = self.obtainers else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .transferContractID?: try {
      guard case .transferContractID(let v)? = self.obtainers else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    if self.permanentRemoval != false {
      try visitor.visitSingularBoolField(value: self.permanentRemoval, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_ContractDeleteTransactionBody, rhs: Proto_ContractDeleteTransactionBody) -> Bool {
    if lhs._contractID != rhs._contractID {return false}
    if lhs.obtainers != rhs.obtainers {return false}
    if lhs.permanentRemoval != rhs.permanentRemoval {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
