// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: services/contract_create.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

///*
/// # Smart Contract Create
///
/// Create a new smart contract.
///
/// ## General Comments
///  - A smart contract normally enforces rules, so "the code is law".<br/>
///    For example, an ERC-20 contract prevents a transfer from being undone
///    without a signature by the recipient of the transfer. This characteristic
///    is generally true if the contract instance was created without a value
///    for the `adminKey` field. For some uses, however, it may be desirable to
///    create something like an ERC-20 contract that has a specific group of
///    trusted individuals who can act as a "supreme court" with the ability to
///    override the normal operation, when a sufficient number of them agree to
///    do so. If `adminKey` is set to a valid Key (which MAY be complex), then a
///    transaction that can change the state of the smart contract in arbitrary
///    ways MAY be signed with enough signatures to activate that Key. Such
///    transactions might reverse a transaction, change the code to close an
///    unexpected loophole, remove an exploit, or adjust outputs in ways not
///    covered by the code itself. The admin key MAY also be used to change the
///    autoRenewPeriod, and change the adminKey field itself (for example, to
///    remove that key after a suitable testing period). The API currently does
///    not implement all relevant capabilities. But it does allow the `adminKey`
///    field to be set and queried, and MAY implement further administrative
///    capability in future releases.
///  - The current API ignores shardID, realmID, and newRealmAdminKey, and
///    creates everything in shard 0 and realm 0. Future versions of the system
///    MAY support additional shards and realms.
///
/// ### Keywords
/// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
/// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
/// document are to be interpreted as described in
/// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
/// [RFC8174](https://www.ietf.org/rfc/rfc8174).

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
/// Create a new smart contract.
///
/// If this transaction succeeds, the `ContractID` for the new smart contract
/// SHALL be set in the transaction receipt.<br/>
/// The contract is defined by the initial bytecode (or `initcode`). The
/// `initcode` SHALL be stored either in a previously created file, or in the
/// transaction body itself for very small contracts.
///
/// As part of contract creation, the constructor defined for the new smart
/// contract SHALL run with the parameters provided in the
/// `constructorParameters` field.<br/>
/// The gas to "power" that constructor MUST be provided via the `gas` field,
/// and SHALL be charged to the payer for this transaction.<br/>
/// If the contract _constructor_ stores information, it is charged gas for that
/// storage. There is a separate fee in HBAR to maintain that storage until the
/// expiration, and that fee SHALL be added to this transaction as part of the
/// _transaction fee_, rather than gas.
///
/// ### Block Stream Effects
/// A `CreateContractOutput` message SHALL be emitted for each transaction.
public struct Proto_ContractCreateTransactionBody: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var initcodeSource: OneOf_InitcodeSource? {
    get {return _storage._initcodeSource}
    set {_uniqueStorage()._initcodeSource = newValue}
  }

  ///*
  /// The source for the smart contract EVM bytecode.
  /// <p>
  /// The file containing the smart contract initcode.
  /// A copy of the contents SHALL be made and held as `bytes`
  /// in smart contract state.<br/>
  /// The contract bytecode is limited in size only by the
  /// network file size limit.
  public var fileID: Proto_FileID {
    get {
      if case .fileID(let v)? = _storage._initcodeSource {return v}
      return Proto_FileID()
    }
    set {_uniqueStorage()._initcodeSource = .fileID(newValue)}
  }

  ///*
  /// The source for the smart contract EVM bytecode.
  /// <p>
  /// The bytes of the smart contract initcode. A copy of the contents
  /// SHALL be made and held as `bytes` in smart contract state.<br/>
  /// This value is limited in length by the network transaction size
  /// limit. This entire transaction, including all fields and signatures,
  /// MUST be less than the network transaction size limit.
  public var initcode: Data {
    get {
      if case .initcode(let v)? = _storage._initcodeSource {return v}
      return Data()
    }
    set {_uniqueStorage()._initcodeSource = .initcode(newValue)}
  }

  ///*
  /// Access control for modification of the smart contract after
  /// it is created.
  /// <p>
  /// If this field is set, that key MUST sign this transaction.<br/>
  /// If this field is set, that key MUST sign each future transaction to
  /// update or delete the contract.<br/>
  /// An updateContract transaction that _only_ extends the topic
  /// expirationTime (a "manual renewal" transaction) SHALL NOT require
  /// admin key signature.
  /// <p>
  /// A contract without an admin key SHALL be immutable, except for
  /// expiration and renewal.
  public var adminKey: Proto_Key {
    get {return _storage._adminKey ?? Proto_Key()}
    set {_uniqueStorage()._adminKey = newValue}
  }
  /// Returns true if `adminKey` has been explicitly set.
  public var hasAdminKey: Bool {return _storage._adminKey != nil}
  /// Clears the value of `adminKey`. Subsequent reads from it will return its default value.
  public mutating func clearAdminKey() {_uniqueStorage()._adminKey = nil}

  ///*
  /// A maximum limit to the amount of gas to use for the constructor call.
  /// <p>
  /// The network SHALL charge the greater of the following, but SHALL NOT
  /// charge more than the value of this field.
  /// <ol>
  ///   <li>The actual gas consumed by the smart contract
  ///       constructor call.</li>
  ///   <li>`80%` of this value.</li>
  /// </ol>
  /// The `80%` factor encourages reasonable estimation, while allowing for
  /// some overage to ensure successful execution.
  public var gas: Int64 {
    get {return _storage._gas}
    set {_uniqueStorage()._gas = newValue}
  }

  ///*
  /// The amount of HBAR to use as an initial balance for the account
  /// representing the new smart contract.
  /// <p>
  /// This value is presented in tinybar
  /// (10<sup><strong>-</strong>8</sup> HBAR).<br/>
  /// The HBAR provided here will be withdrawn from the payer account that
  /// signed this transaction.
  public var initialBalance: Int64 {
    get {return _storage._initialBalance}
    set {_uniqueStorage()._initialBalance = newValue}
  }

  ///*
  /// Proxy account staking is handled via `staked_id`.
  /// <p>
  /// Former field to designate a proxy account for HBAR staking.
  /// This field MUST NOT be set.
  ///
  /// NOTE: This field was marked as deprecated in the .proto file.
  public var proxyAccountID: Proto_AccountID {
    get {return _storage._proxyAccountID ?? Proto_AccountID()}
    set {_uniqueStorage()._proxyAccountID = newValue}
  }
  /// Returns true if `proxyAccountID` has been explicitly set.
  public var hasProxyAccountID: Bool {return _storage._proxyAccountID != nil}
  /// Clears the value of `proxyAccountID`. Subsequent reads from it will return its default value.
  public mutating func clearProxyAccountID() {_uniqueStorage()._proxyAccountID = nil}

  ///*
  /// The initial lifetime, in seconds, for the smart contract, and the number
  /// of seconds for which the smart contract will be automatically renewed
  /// upon expiration.
  /// <p>
  /// This value MUST be set.<br/>
  /// This value MUST be greater than the configured MIN_AUTORENEW_PERIOD.<br/>
  /// This value MUST be less than the configured MAX_AUTORENEW_PERIOD.<br/>
  public var autoRenewPeriod: Proto_Duration {
    get {return _storage._autoRenewPeriod ?? Proto_Duration()}
    set {_uniqueStorage()._autoRenewPeriod = newValue}
  }
  /// Returns true if `autoRenewPeriod` has been explicitly set.
  public var hasAutoRenewPeriod: Bool {return _storage._autoRenewPeriod != nil}
  /// Clears the value of `autoRenewPeriod`. Subsequent reads from it will return its default value.
  public mutating func clearAutoRenewPeriod() {_uniqueStorage()._autoRenewPeriod = nil}

  ///*
  /// An array of bytes containing the EVM-encoded parameters to pass to
  /// the smart contract constructor defined in the smart contract init
  /// code provided.
  public var constructorParameters: Data {
    get {return _storage._constructorParameters}
    set {_uniqueStorage()._constructorParameters = newValue}
  }

  ///*
  /// <blockquote>Review Question<br/>
  /// <blockquote>Should this be deprecated?<br/>
  /// It's never been used and probably never should be used...<br/>
  /// Shard should be determined by the node the transaction is submitted to.
  /// </blockquote></blockquote>
  /// <p>
  /// The shard in which to create the new smart contract.<br/>
  /// This value is currently ignored.
  public var shardID: Proto_ShardID {
    get {return _storage._shardID ?? Proto_ShardID()}
    set {_uniqueStorage()._shardID = newValue}
  }
  /// Returns true if `shardID` has been explicitly set.
  public var hasShardID: Bool {return _storage._shardID != nil}
  /// Clears the value of `shardID`. Subsequent reads from it will return its default value.
  public mutating func clearShardID() {_uniqueStorage()._shardID = nil}

  ///*
  /// <blockquote>Review Question<br/>
  /// <blockquote>Should this be deprecated?<br/>
  /// It's never been used and probably never should be used...<br/>
  /// Realm should be determined by node and network parameters.
  /// </blockquote></blockquote>
  /// <p>
  /// The shard/realm in which to create the new smart contract.<br/>
  /// This value is currently ignored.
  public var realmID: Proto_RealmID {
    get {return _storage._realmID ?? Proto_RealmID()}
    set {_uniqueStorage()._realmID = newValue}
  }
  /// Returns true if `realmID` has been explicitly set.
  public var hasRealmID: Bool {return _storage._realmID != nil}
  /// Clears the value of `realmID`. Subsequent reads from it will return its default value.
  public mutating func clearRealmID() {_uniqueStorage()._realmID = nil}

  ///*
  /// <blockquote>Review Question<br/>
  /// <blockquote>Should this be deprecated?<br/>
  /// It's never been used and probably never should be used...<br/>
  /// If a realm is used, it must already exist; we shouldn't be creating it
  /// without a separate transaction.</blockquote></blockquote>
  /// <p>
  /// This was intended to provide an admin key for any new realm created
  /// during the creation of the smart contract.<br/>
  /// This value is currently ignored. a new realm SHALL NOT be created,
  /// regardless of the value of `realmID`.
  public var newRealmAdminKey: Proto_Key {
    get {return _storage._newRealmAdminKey ?? Proto_Key()}
    set {_uniqueStorage()._newRealmAdminKey = newValue}
  }
  /// Returns true if `newRealmAdminKey` has been explicitly set.
  public var hasNewRealmAdminKey: Bool {return _storage._newRealmAdminKey != nil}
  /// Clears the value of `newRealmAdminKey`. Subsequent reads from it will return its default value.
  public mutating func clearNewRealmAdminKey() {_uniqueStorage()._newRealmAdminKey = nil}

  ///*
  /// A short memo for this smart contract.
  /// <p>
  /// This value, if set, MUST NOT exceed `transaction.maxMemoUtf8Bytes`
  /// (default 100) bytes when encoded as UTF-8.
  public var memo: String {
    get {return _storage._memo}
    set {_uniqueStorage()._memo = newValue}
  }

  ///*
  /// The maximum number of tokens that can be auto-associated with this
  /// smart contract.
  /// <p>
  /// If this is less than or equal to `used_auto_associations` (or 0), then
  /// this contract MUST manually associate with a token before transacting
  /// in that token.<br/>
  /// Following HIP-904 This value may also be `-1` to indicate no limit.<br/>
  /// This value MUST NOT be less than `-1`.
  public var maxAutomaticTokenAssociations: Int32 {
    get {return _storage._maxAutomaticTokenAssociations}
    set {_uniqueStorage()._maxAutomaticTokenAssociations = newValue}
  }

  ///*
  /// The id of an account, in the same shard and realm as this smart
  /// contract, that has signed this transaction, allowing the network to use
  /// its balance, when needed, to automatically extend this contract's
  /// expiration time.
  /// <p>
  /// If this field is set, that key MUST sign this transaction.<br/>
  /// If this field is set, then the network SHALL deduct the necessary fees
  /// from the designated auto renew account, if that account has sufficient
  /// balance. If the auto renew account does not have sufficient balance,
  /// then the fees for contract renewal SHALL be deducted from the HBAR
  /// balance held by the smart contract.<br/>
  /// If this field is not set, then all renewal fees SHALL be deducted from
  /// the HBAR balance held by this contract.
  public var autoRenewAccountID: Proto_AccountID {
    get {return _storage._autoRenewAccountID ?? Proto_AccountID()}
    set {_uniqueStorage()._autoRenewAccountID = newValue}
  }
  /// Returns true if `autoRenewAccountID` has been explicitly set.
  public var hasAutoRenewAccountID: Bool {return _storage._autoRenewAccountID != nil}
  /// Clears the value of `autoRenewAccountID`. Subsequent reads from it will return its default value.
  public mutating func clearAutoRenewAccountID() {_uniqueStorage()._autoRenewAccountID = nil}

  public var stakedID: OneOf_StakedID? {
    get {return _storage._stakedID}
    set {_uniqueStorage()._stakedID = newValue}
  }

  ///*
  /// An account ID.
  /// <p>
  /// This smart contract SHALL stake its HBAR via this account as proxy.
  public var stakedAccountID: Proto_AccountID {
    get {
      if case .stakedAccountID(let v)? = _storage._stakedID {return v}
      return Proto_AccountID()
    }
    set {_uniqueStorage()._stakedID = .stakedAccountID(newValue)}
  }

  ///*
  /// The ID of a network node.
  /// <p>
  /// This smart contract SHALL stake its HBAR to this node.
  /// <p>
  /// <blockquote>Note: node IDs do fluctuate as node operators change.
  /// Most contracts are immutable, and a contract staking to an invalid
  /// node ID SHALL NOT participate in staking. Immutable contracts MAY
  /// find it more reliable to use a proxy account for staking
  /// (via `staked_account_id`) to enable updating the _effective_ staking
  /// node ID when necessary through updating the proxy
  /// account.</blockquote>
  public var stakedNodeID: Int64 {
    get {
      if case .stakedNodeID(let v)? = _storage._stakedID {return v}
      return 0
    }
    set {_uniqueStorage()._stakedID = .stakedNodeID(newValue)}
  }

  ///*
  /// A flag indicating that this smart contract declines to receive any
  /// reward for staking its HBAR balance to help secure the network.
  /// <p>
  /// If set to true, this smart contract SHALL NOT receive any reward for
  /// staking its HBAR balance to help secure the network, regardless of
  /// staking configuration, but MAY stake HBAR to support the network
  /// without reward.
  public var declineReward: Bool {
    get {return _storage._declineReward}
    set {_uniqueStorage()._declineReward = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_InitcodeSource: Equatable, @unchecked Sendable {
    ///*
    /// The source for the smart contract EVM bytecode.
    /// <p>
    /// The file containing the smart contract initcode.
    /// A copy of the contents SHALL be made and held as `bytes`
    /// in smart contract state.<br/>
    /// The contract bytecode is limited in size only by the
    /// network file size limit.
    case fileID(Proto_FileID)
    ///*
    /// The source for the smart contract EVM bytecode.
    /// <p>
    /// The bytes of the smart contract initcode. A copy of the contents
    /// SHALL be made and held as `bytes` in smart contract state.<br/>
    /// This value is limited in length by the network transaction size
    /// limit. This entire transaction, including all fields and signatures,
    /// MUST be less than the network transaction size limit.
    case initcode(Data)

  }

  public enum OneOf_StakedID: Equatable, Sendable {
    ///*
    /// An account ID.
    /// <p>
    /// This smart contract SHALL stake its HBAR via this account as proxy.
    case stakedAccountID(Proto_AccountID)
    ///*
    /// The ID of a network node.
    /// <p>
    /// This smart contract SHALL stake its HBAR to this node.
    /// <p>
    /// <blockquote>Note: node IDs do fluctuate as node operators change.
    /// Most contracts are immutable, and a contract staking to an invalid
    /// node ID SHALL NOT participate in staking. Immutable contracts MAY
    /// find it more reliable to use a proxy account for staking
    /// (via `staked_account_id`) to enable updating the _effective_ staking
    /// node ID when necessary through updating the proxy
    /// account.</blockquote>
    case stakedNodeID(Int64)

  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "proto"

extension Proto_ContractCreateTransactionBody: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ContractCreateTransactionBody"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "fileID"),
    16: .same(proto: "initcode"),
    3: .same(proto: "adminKey"),
    4: .same(proto: "gas"),
    5: .same(proto: "initialBalance"),
    6: .same(proto: "proxyAccountID"),
    8: .same(proto: "autoRenewPeriod"),
    9: .same(proto: "constructorParameters"),
    10: .same(proto: "shardID"),
    11: .same(proto: "realmID"),
    12: .same(proto: "newRealmAdminKey"),
    13: .same(proto: "memo"),
    14: .standard(proto: "max_automatic_token_associations"),
    15: .standard(proto: "auto_renew_account_id"),
    17: .standard(proto: "staked_account_id"),
    18: .standard(proto: "staked_node_id"),
    19: .standard(proto: "decline_reward"),
  ]

  fileprivate class _StorageClass {
    var _initcodeSource: Proto_ContractCreateTransactionBody.OneOf_InitcodeSource?
    var _adminKey: Proto_Key? = nil
    var _gas: Int64 = 0
    var _initialBalance: Int64 = 0
    var _proxyAccountID: Proto_AccountID? = nil
    var _autoRenewPeriod: Proto_Duration? = nil
    var _constructorParameters: Data = Data()
    var _shardID: Proto_ShardID? = nil
    var _realmID: Proto_RealmID? = nil
    var _newRealmAdminKey: Proto_Key? = nil
    var _memo: String = String()
    var _maxAutomaticTokenAssociations: Int32 = 0
    var _autoRenewAccountID: Proto_AccountID? = nil
    var _stakedID: Proto_ContractCreateTransactionBody.OneOf_StakedID?
    var _declineReward: Bool = false

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _initcodeSource = source._initcodeSource
      _adminKey = source._adminKey
      _gas = source._gas
      _initialBalance = source._initialBalance
      _proxyAccountID = source._proxyAccountID
      _autoRenewPeriod = source._autoRenewPeriod
      _constructorParameters = source._constructorParameters
      _shardID = source._shardID
      _realmID = source._realmID
      _newRealmAdminKey = source._newRealmAdminKey
      _memo = source._memo
      _maxAutomaticTokenAssociations = source._maxAutomaticTokenAssociations
      _autoRenewAccountID = source._autoRenewAccountID
      _stakedID = source._stakedID
      _declineReward = source._declineReward
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try {
          var v: Proto_FileID?
          var hadOneofValue = false
          if let current = _storage._initcodeSource {
            hadOneofValue = true
            if case .fileID(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._initcodeSource = .fileID(v)
          }
        }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._adminKey) }()
        case 4: try { try decoder.decodeSingularInt64Field(value: &_storage._gas) }()
        case 5: try { try decoder.decodeSingularInt64Field(value: &_storage._initialBalance) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._proxyAccountID) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._autoRenewPeriod) }()
        case 9: try { try decoder.decodeSingularBytesField(value: &_storage._constructorParameters) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._shardID) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._realmID) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._newRealmAdminKey) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._memo) }()
        case 14: try { try decoder.decodeSingularInt32Field(value: &_storage._maxAutomaticTokenAssociations) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._autoRenewAccountID) }()
        case 16: try {
          var v: Data?
          try decoder.decodeSingularBytesField(value: &v)
          if let v = v {
            if _storage._initcodeSource != nil {try decoder.handleConflictingOneOf()}
            _storage._initcodeSource = .initcode(v)
          }
        }()
        case 17: try {
          var v: Proto_AccountID?
          var hadOneofValue = false
          if let current = _storage._stakedID {
            hadOneofValue = true
            if case .stakedAccountID(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._stakedID = .stakedAccountID(v)
          }
        }()
        case 18: try {
          var v: Int64?
          try decoder.decodeSingularInt64Field(value: &v)
          if let v = v {
            if _storage._stakedID != nil {try decoder.handleConflictingOneOf()}
            _storage._stakedID = .stakedNodeID(v)
          }
        }()
        case 19: try { try decoder.decodeSingularBoolField(value: &_storage._declineReward) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if case .fileID(let v)? = _storage._initcodeSource {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._adminKey {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      if _storage._gas != 0 {
        try visitor.visitSingularInt64Field(value: _storage._gas, fieldNumber: 4)
      }
      if _storage._initialBalance != 0 {
        try visitor.visitSingularInt64Field(value: _storage._initialBalance, fieldNumber: 5)
      }
      try { if let v = _storage._proxyAccountID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._autoRenewPeriod {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      if !_storage._constructorParameters.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._constructorParameters, fieldNumber: 9)
      }
      try { if let v = _storage._shardID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._realmID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._newRealmAdminKey {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
      if !_storage._memo.isEmpty {
        try visitor.visitSingularStringField(value: _storage._memo, fieldNumber: 13)
      }
      if _storage._maxAutomaticTokenAssociations != 0 {
        try visitor.visitSingularInt32Field(value: _storage._maxAutomaticTokenAssociations, fieldNumber: 14)
      }
      try { if let v = _storage._autoRenewAccountID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      } }()
      try { if case .initcode(let v)? = _storage._initcodeSource {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 16)
      } }()
      switch _storage._stakedID {
      case .stakedAccountID?: try {
        guard case .stakedAccountID(let v)? = _storage._stakedID else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      }()
      case .stakedNodeID?: try {
        guard case .stakedNodeID(let v)? = _storage._stakedID else { preconditionFailure() }
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 18)
      }()
      case nil: break
      }
      if _storage._declineReward != false {
        try visitor.visitSingularBoolField(value: _storage._declineReward, fieldNumber: 19)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_ContractCreateTransactionBody, rhs: Proto_ContractCreateTransactionBody) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._initcodeSource != rhs_storage._initcodeSource {return false}
        if _storage._adminKey != rhs_storage._adminKey {return false}
        if _storage._gas != rhs_storage._gas {return false}
        if _storage._initialBalance != rhs_storage._initialBalance {return false}
        if _storage._proxyAccountID != rhs_storage._proxyAccountID {return false}
        if _storage._autoRenewPeriod != rhs_storage._autoRenewPeriod {return false}
        if _storage._constructorParameters != rhs_storage._constructorParameters {return false}
        if _storage._shardID != rhs_storage._shardID {return false}
        if _storage._realmID != rhs_storage._realmID {return false}
        if _storage._newRealmAdminKey != rhs_storage._newRealmAdminKey {return false}
        if _storage._memo != rhs_storage._memo {return false}
        if _storage._maxAutomaticTokenAssociations != rhs_storage._maxAutomaticTokenAssociations {return false}
        if _storage._autoRenewAccountID != rhs_storage._autoRenewAccountID {return false}
        if _storage._stakedID != rhs_storage._stakedID {return false}
        if _storage._declineReward != rhs_storage._declineReward {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
