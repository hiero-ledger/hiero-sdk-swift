// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: crypto_create.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

///*
/// # Crypto Create
/// Messages to create a new end-user account within the distributed ledger.
///
/// ### Keywords
/// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
/// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
/// document are to be interpreted as described in
/// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
/// [RFC8174](https://www.ietf.org/rfc/rfc8174).

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///
/// Create a new account.
///
/// If the auto_renew_account field is set, the key of the referenced account
/// MUST sign this transaction.<br/>
/// Current limitations REQUIRE that `shardID` and `realmID` both MUST be `0`.
/// This is expected to change in the future.
///
/// ### Block Stream Effects
/// The newly created account SHALL be included in State Changes.
public struct Proto_CryptoCreateTransactionBody: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// The identifying key for this account.
  /// This key represents the account owner, and is required for most actions
  /// involving this account that do not modify the account itself. This key
  /// may also identify the account for smart contracts.
  /// <p>
  /// This field is REQUIRED.
  /// This `Key` MUST NOT be an empty `KeyList` and MUST contain at least one
  /// "primitive" (i.e. cryptographic) key value.
  public var key: Proto_Key {
    get {return _storage._key ?? Proto_Key()}
    set {_uniqueStorage()._key = newValue}
  }
  /// Returns true if `key` has been explicitly set.
  public var hasKey: Bool {return _storage._key != nil}
  /// Clears the value of `key`. Subsequent reads from it will return its default value.
  public mutating func clearKey() {_uniqueStorage()._key = nil}

  ///*
  /// An amount, in tinybar, to deposit to the newly created account.
  /// <p>
  /// The deposited amount SHALL be debited to the "payer" account for this
  /// transaction.
  public var initialBalance: UInt64 {
    get {return _storage._initialBalance}
    set {_uniqueStorage()._initialBalance = newValue}
  }

  ///*
  /// Use `staked_id` instead.<br/>
  /// An account identifier for a staking proxy.
  ///
  /// NOTE: This field was marked as deprecated in the .proto file.
  public var proxyAccountID: Proto_AccountID {
    get {return _storage._proxyAccountID ?? Proto_AccountID()}
    set {_uniqueStorage()._proxyAccountID = newValue}
  }
  /// Returns true if `proxyAccountID` has been explicitly set.
  public var hasProxyAccountID: Bool {return _storage._proxyAccountID != nil}
  /// Clears the value of `proxyAccountID`. Subsequent reads from it will return its default value.
  public mutating func clearProxyAccountID() {_uniqueStorage()._proxyAccountID = nil}

  ///*
  /// Removed prior to the first available history, and may be related to an
  /// early design dead-end.<br/>
  /// An amount below which record stream records would not be created for
  /// a transaction that reduces this account balance.
  ///
  /// NOTE: This field was marked as deprecated in the .proto file.
  public var sendRecordThreshold: UInt64 {
    get {return _storage._sendRecordThreshold}
    set {_uniqueStorage()._sendRecordThreshold = newValue}
  }

  ///*
  /// Removed prior to the first available history, and may be related to an
  /// early design dead-end.<br/>
  /// An amount below which record stream records would not be created for
  /// a transaction that increases this account balance.
  ///
  /// NOTE: This field was marked as deprecated in the .proto file.
  public var receiveRecordThreshold: UInt64 {
    get {return _storage._receiveRecordThreshold}
    set {_uniqueStorage()._receiveRecordThreshold = newValue}
  }

  ///*
  /// A flag indicating the account holder must authorize all incoming
  /// token transfers.
  /// <p>
  /// If this flag is set then any transaction that would result in adding
  /// hbar or other tokens to this account balance MUST be signed by the
  /// identifying key of this account (that is, the `key` field).<br/>
  /// If this flag is set, then the account key (`key` field) MUST sign
  /// this create transaction, in addition to the transaction payer.
  public var receiverSigRequired: Bool {
    get {return _storage._receiverSigRequired}
    set {_uniqueStorage()._receiverSigRequired = newValue}
  }

  ///*
  /// The duration between account automatic renewals.<br/>
  /// All entities in state may be charged "rent" occasionally (typically
  /// every 90 days) to prevent unnecessary growth of the ledger. This value
  /// sets the interval between such events for this account.
  /// <p>
  /// If the account balance (in HBAR) is insufficient to pay the full renewal
  /// fee, the entire HBAR balance SHALL be consumed and the expiration for
  /// the account SHALL be extended as far as the available balance can
  /// support.<br/>
  /// If the account HBAR balance is `0` when the account must be renewed, then
  /// the account SHALL be deleted, and subsequently removed from state.
  public var autoRenewPeriod: Proto_Duration {
    get {return _storage._autoRenewPeriod ?? Proto_Duration()}
    set {_uniqueStorage()._autoRenewPeriod = newValue}
  }
  /// Returns true if `autoRenewPeriod` has been explicitly set.
  public var hasAutoRenewPeriod: Bool {return _storage._autoRenewPeriod != nil}
  /// Clears the value of `autoRenewPeriod`. Subsequent reads from it will return its default value.
  public mutating func clearAutoRenewPeriod() {_uniqueStorage()._autoRenewPeriod = nil}

  ///*
  /// The shard in which this account is created
  /// <p>
  /// Currently, this MUST be `0`.<br/>
  /// If the desired shard is `0`, this SHOULD NOT be set.
  public var shardID: Proto_ShardID {
    get {return _storage._shardID ?? Proto_ShardID()}
    set {_uniqueStorage()._shardID = newValue}
  }
  /// Returns true if `shardID` has been explicitly set.
  public var hasShardID: Bool {return _storage._shardID != nil}
  /// Clears the value of `shardID`. Subsequent reads from it will return its default value.
  public mutating func clearShardID() {_uniqueStorage()._shardID = nil}

  ///*
  /// The realm in which this account is created.
  /// <p>
  /// The shard number for this realm MUST match the value in `shardID`.<br/>
  /// Currently, this MUST be `0` for both fields.<br/>
  /// If the desired realm is `0`, this SHOULD NOT be set.
  public var realmID: Proto_RealmID {
    get {return _storage._realmID ?? Proto_RealmID()}
    set {_uniqueStorage()._realmID = newValue}
  }
  /// Returns true if `realmID` has been explicitly set.
  public var hasRealmID: Bool {return _storage._realmID != nil}
  /// Clears the value of `realmID`. Subsequent reads from it will return its default value.
  public mutating func clearRealmID() {_uniqueStorage()._realmID = nil}

  ///*
  /// This field was never actually used or enabled, and is not expected to
  /// ever be used in the future.<br/>
  ///
  /// NOTE: This field was marked as deprecated in the .proto file.
  public var newRealmAdminKey: Proto_Key {
    get {return _storage._newRealmAdminKey ?? Proto_Key()}
    set {_uniqueStorage()._newRealmAdminKey = newValue}
  }
  /// Returns true if `newRealmAdminKey` has been explicitly set.
  public var hasNewRealmAdminKey: Bool {return _storage._newRealmAdminKey != nil}
  /// Clears the value of `newRealmAdminKey`. Subsequent reads from it will return its default value.
  public mutating func clearNewRealmAdminKey() {_uniqueStorage()._newRealmAdminKey = nil}

  ///*
  /// A short description of this Account.
  /// <p>
  /// This value, if set, MUST NOT exceed `transaction.maxMemoUtf8Bytes`
  /// (default 100) bytes when encoded as UTF-8.
  public var memo: String {
    get {return _storage._memo}
    set {_uniqueStorage()._memo = newValue}
  }

  ///*
  /// A maximum number of tokens that can be auto-associated
  /// with this account.<br/>
  /// By default this value is 0 for all accounts except for automatically
  /// created accounts (e.g. smart contracts), which default to -1.
  /// <p>
  /// If this value is `0`, then this account MUST manually associate to
  /// a token before holding or transacting in that token.<br/>
  /// This value MAY also be `-1` to indicate no limit.<br/>
  /// This value MUST NOT be less than `-1`.
  public var maxAutomaticTokenAssociations: Int32 {
    get {return _storage._maxAutomaticTokenAssociations}
    set {_uniqueStorage()._maxAutomaticTokenAssociations = newValue}
  }

  public var stakedID: OneOf_StakedID? {
    get {return _storage._stakedID}
    set {_uniqueStorage()._stakedID = newValue}
  }

  ///*
  /// ID of the account to which this account is staking its balances.
  /// <p>
  /// If this account is not currently staking its balances, then this
  /// field, if set, MUST be the sentinel value of `0.0.0`.
  public var stakedAccountID: Proto_AccountID {
    get {
      if case .stakedAccountID(let v)? = _storage._stakedID {return v}
      return Proto_AccountID()
    }
    set {_uniqueStorage()._stakedID = .stakedAccountID(newValue)}
  }

  ///*
  /// ID of the node this account is staked to.
  /// <p>
  /// If this account is not currently staking its balances, then this
  /// field, if set, SHALL be the sentinel value of `-1`.<br/>
  /// Wallet software SHOULD surface staking issues to users and provide a
  /// simple mechanism to update staking to a new node ID in the event the
  /// prior staked node ID ceases to be valid.
  public var stakedNodeID: Int64 {
    get {
      if case .stakedNodeID(let v)? = _storage._stakedID {return v}
      return 0
    }
    set {_uniqueStorage()._stakedID = .stakedNodeID(newValue)}
  }

  ///*
  /// A boolean indicating that this account has chosen to decline rewards for
  /// staking its balances.
  /// <p>
  /// This account MAY still stake its balances, but SHALL NOT receive reward
  /// payments for doing so, if this value is set.
  public var declineReward: Bool {
    get {return _storage._declineReward}
    set {_uniqueStorage()._declineReward = newValue}
  }

  ///*
  /// Bytes to be used as the account's alias.
  /// <p>
  /// This value, if set, MUST be one of the following values<br/>
  /// <ul>
  ///   <li>The 32-byte serialized form of the ED25519 account key.</li>
  ///   <li>The 33-byte _compressed_ serialized form of the ECDSA(secp256k1)
  ///       account key.</li>
  ///   <li>The 20-byte EVM address derived from a keccak-256 hash of the
  ///       ECDSA(secp256k1) account key</li>
  /// </ul>
  /// All aliases within the network MUST be unique. If this value matches an
  /// existing account alias, this `create` transaction SHALL fail.<br/>
  /// If an account exists with a particular alias value, any transaction to
  /// transfer value _to_ that alias SHALL deposit the transferred value in
  /// the existing account, and SHALL NOT assess an account creation fee.<br/>
  /// Once set, an account alias is immutable and MUST NOT be changed.
  public var alias: Data {
    get {return _storage._alias}
    set {_uniqueStorage()._alias = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_StakedID: Equatable, Sendable {
    ///*
    /// ID of the account to which this account is staking its balances.
    /// <p>
    /// If this account is not currently staking its balances, then this
    /// field, if set, MUST be the sentinel value of `0.0.0`.
    case stakedAccountID(Proto_AccountID)
    ///*
    /// ID of the node this account is staked to.
    /// <p>
    /// If this account is not currently staking its balances, then this
    /// field, if set, SHALL be the sentinel value of `-1`.<br/>
    /// Wallet software SHOULD surface staking issues to users and provide a
    /// simple mechanism to update staking to a new node ID in the event the
    /// prior staked node ID ceases to be valid.
    case stakedNodeID(Int64)

  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "proto"

extension Proto_CryptoCreateTransactionBody: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CryptoCreateTransactionBody"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "initialBalance"),
    3: .same(proto: "proxyAccountID"),
    6: .same(proto: "sendRecordThreshold"),
    7: .same(proto: "receiveRecordThreshold"),
    8: .same(proto: "receiverSigRequired"),
    9: .same(proto: "autoRenewPeriod"),
    10: .same(proto: "shardID"),
    11: .same(proto: "realmID"),
    12: .same(proto: "newRealmAdminKey"),
    13: .same(proto: "memo"),
    14: .standard(proto: "max_automatic_token_associations"),
    15: .standard(proto: "staked_account_id"),
    16: .standard(proto: "staked_node_id"),
    17: .standard(proto: "decline_reward"),
    18: .same(proto: "alias"),
  ]

  fileprivate class _StorageClass {
    var _key: Proto_Key? = nil
    var _initialBalance: UInt64 = 0
    var _proxyAccountID: Proto_AccountID? = nil
    var _sendRecordThreshold: UInt64 = 0
    var _receiveRecordThreshold: UInt64 = 0
    var _receiverSigRequired: Bool = false
    var _autoRenewPeriod: Proto_Duration? = nil
    var _shardID: Proto_ShardID? = nil
    var _realmID: Proto_RealmID? = nil
    var _newRealmAdminKey: Proto_Key? = nil
    var _memo: String = String()
    var _maxAutomaticTokenAssociations: Int32 = 0
    var _stakedID: Proto_CryptoCreateTransactionBody.OneOf_StakedID?
    var _declineReward: Bool = false
    var _alias: Data = Data()

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _key = source._key
      _initialBalance = source._initialBalance
      _proxyAccountID = source._proxyAccountID
      _sendRecordThreshold = source._sendRecordThreshold
      _receiveRecordThreshold = source._receiveRecordThreshold
      _receiverSigRequired = source._receiverSigRequired
      _autoRenewPeriod = source._autoRenewPeriod
      _shardID = source._shardID
      _realmID = source._realmID
      _newRealmAdminKey = source._newRealmAdminKey
      _memo = source._memo
      _maxAutomaticTokenAssociations = source._maxAutomaticTokenAssociations
      _stakedID = source._stakedID
      _declineReward = source._declineReward
      _alias = source._alias
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._key) }()
        case 2: try { try decoder.decodeSingularUInt64Field(value: &_storage._initialBalance) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._proxyAccountID) }()
        case 6: try { try decoder.decodeSingularUInt64Field(value: &_storage._sendRecordThreshold) }()
        case 7: try { try decoder.decodeSingularUInt64Field(value: &_storage._receiveRecordThreshold) }()
        case 8: try { try decoder.decodeSingularBoolField(value: &_storage._receiverSigRequired) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._autoRenewPeriod) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._shardID) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._realmID) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._newRealmAdminKey) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._memo) }()
        case 14: try { try decoder.decodeSingularInt32Field(value: &_storage._maxAutomaticTokenAssociations) }()
        case 15: try {
          var v: Proto_AccountID?
          var hadOneofValue = false
          if let current = _storage._stakedID {
            hadOneofValue = true
            if case .stakedAccountID(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._stakedID = .stakedAccountID(v)
          }
        }()
        case 16: try {
          var v: Int64?
          try decoder.decodeSingularInt64Field(value: &v)
          if let v = v {
            if _storage._stakedID != nil {try decoder.handleConflictingOneOf()}
            _storage._stakedID = .stakedNodeID(v)
          }
        }()
        case 17: try { try decoder.decodeSingularBoolField(value: &_storage._declineReward) }()
        case 18: try { try decoder.decodeSingularBytesField(value: &_storage._alias) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._key {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      if _storage._initialBalance != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._initialBalance, fieldNumber: 2)
      }
      try { if let v = _storage._proxyAccountID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      if _storage._sendRecordThreshold != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._sendRecordThreshold, fieldNumber: 6)
      }
      if _storage._receiveRecordThreshold != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._receiveRecordThreshold, fieldNumber: 7)
      }
      if _storage._receiverSigRequired != false {
        try visitor.visitSingularBoolField(value: _storage._receiverSigRequired, fieldNumber: 8)
      }
      try { if let v = _storage._autoRenewPeriod {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._shardID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._realmID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._newRealmAdminKey {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
      if !_storage._memo.isEmpty {
        try visitor.visitSingularStringField(value: _storage._memo, fieldNumber: 13)
      }
      if _storage._maxAutomaticTokenAssociations != 0 {
        try visitor.visitSingularInt32Field(value: _storage._maxAutomaticTokenAssociations, fieldNumber: 14)
      }
      switch _storage._stakedID {
      case .stakedAccountID?: try {
        guard case .stakedAccountID(let v)? = _storage._stakedID else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      }()
      case .stakedNodeID?: try {
        guard case .stakedNodeID(let v)? = _storage._stakedID else { preconditionFailure() }
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 16)
      }()
      case nil: break
      }
      if _storage._declineReward != false {
        try visitor.visitSingularBoolField(value: _storage._declineReward, fieldNumber: 17)
      }
      if !_storage._alias.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._alias, fieldNumber: 18)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_CryptoCreateTransactionBody, rhs: Proto_CryptoCreateTransactionBody) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._key != rhs_storage._key {return false}
        if _storage._initialBalance != rhs_storage._initialBalance {return false}
        if _storage._proxyAccountID != rhs_storage._proxyAccountID {return false}
        if _storage._sendRecordThreshold != rhs_storage._sendRecordThreshold {return false}
        if _storage._receiveRecordThreshold != rhs_storage._receiveRecordThreshold {return false}
        if _storage._receiverSigRequired != rhs_storage._receiverSigRequired {return false}
        if _storage._autoRenewPeriod != rhs_storage._autoRenewPeriod {return false}
        if _storage._shardID != rhs_storage._shardID {return false}
        if _storage._realmID != rhs_storage._realmID {return false}
        if _storage._newRealmAdminKey != rhs_storage._newRealmAdminKey {return false}
        if _storage._memo != rhs_storage._memo {return false}
        if _storage._maxAutomaticTokenAssociations != rhs_storage._maxAutomaticTokenAssociations {return false}
        if _storage._stakedID != rhs_storage._stakedID {return false}
        if _storage._declineReward != rhs_storage._declineReward {return false}
        if _storage._alias != rhs_storage._alias {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
