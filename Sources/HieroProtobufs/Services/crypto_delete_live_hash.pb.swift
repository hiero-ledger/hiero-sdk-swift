// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: crypto_delete_live_hash.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

///*
/// # Delete Live Hash
/// Dissociate a specific live hash from a specified account.
///
/// > Important
/// >> This transaction is obsolete and not supported.<br/>
/// >> Any transaction of this type that is submitted SHALL fail with a `PRE_CHECK` result
/// >> of `NOT_SUPPORTED`.
///
/// ### Keywords
/// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
/// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
/// document are to be interpreted as described in
/// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
/// [RFC8174](https://www.ietf.org/rfc/rfc8174).

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
/// Delete a specific live hash associated to a given account.
///
/// This transaction MUST be signed by either the key of the associated account,
/// or at least one of the keys listed in the live hash.
///
/// ### Block Stream Effects
/// None
public struct Proto_CryptoDeleteLiveHashTransactionBody: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// An account associated to a live hash.
  public var accountOfLiveHash: Proto_AccountID {
    get {return _accountOfLiveHash ?? Proto_AccountID()}
    set {_accountOfLiveHash = newValue}
  }
  /// Returns true if `accountOfLiveHash` has been explicitly set.
  public var hasAccountOfLiveHash: Bool {return self._accountOfLiveHash != nil}
  /// Clears the value of `accountOfLiveHash`. Subsequent reads from it will return its default value.
  public mutating func clearAccountOfLiveHash() {self._accountOfLiveHash = nil}

  ///*
  /// The SHA-384 value of a specific live hash to delete.
  public var liveHashToDelete: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _accountOfLiveHash: Proto_AccountID? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "proto"

extension Proto_CryptoDeleteLiveHashTransactionBody: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CryptoDeleteLiveHashTransactionBody"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "accountOfLiveHash"),
    2: .same(proto: "liveHashToDelete"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._accountOfLiveHash) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.liveHashToDelete) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._accountOfLiveHash {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.liveHashToDelete.isEmpty {
      try visitor.visitSingularBytesField(value: self.liveHashToDelete, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_CryptoDeleteLiveHashTransactionBody, rhs: Proto_CryptoDeleteLiveHashTransactionBody) -> Bool {
    if lhs._accountOfLiveHash != rhs._accountOfLiveHash {return false}
    if lhs.liveHashToDelete != rhs.liveHashToDelete {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
